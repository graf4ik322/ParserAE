#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import aiohttp
import asyncio
import logging
import re
import json
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional

from .prompts import PromptTemplates

logger = logging.getLogger(__name__)

class AIProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ò–ò —á–µ—Ä–µ–∑ OpenRouter API"""
    
    def __init__(self, api_key: str, model: str = "openai/gpt-4-turbo-preview"):
        self.api_key = api_key
        self.model = model
        self.base_url = "https://openrouter.ai/api/v1"
        self.session = None
        self.cooldowns = {}  # –ö—É–ª–¥–∞—É–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        logger.info(f"üß† AIProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é: {model}")
    
    async def _get_session(self) -> aiohttp.ClientSession:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç HTTP —Å–µ—Å—Å–∏—é"""
        if self.session is None or self.session.closed:
            self.session = aiohttp.ClientSession(
                headers={
                    "Authorization": f"Bearer {self.api_key}",
                    "Content-Type": "application/json",
                    "HTTP-Referer": "https://perfume-bot.local",
                    "X-Title": "Perfume Bot"
                },
                timeout=aiohttp.ClientTimeout(total=180)  # 3 –º–∏–Ω—É—Ç—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
            )
        return self.session
    
    async def call_openrouter_api(self, prompt: str, max_tokens: int = 4000) -> str:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API"""
        try:
            session = await self._get_session()
            
            payload = {
                "model": self.model,
                "messages": [
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                "max_tokens": max_tokens,
                "temperature": 0.7,
                "top_p": 0.9,
                "frequency_penalty": 0.1,
                "presence_penalty": 0.1
            }
            
            logger.info(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API (–º–æ–¥–µ–ª—å: {self.model})")
            
            async with session.post(f"{self.base_url}/chat/completions", json=payload) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    if 'choices' in data and len(data['choices']) > 0:
                        content = data['choices'][0]['message']['content']
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
                        usage = data.get('usage', {})
                        total_tokens = usage.get('total_tokens', 0)
                        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò ({total_tokens} —Ç–æ–∫–µ–Ω–æ–≤)")
                        
                        return content
                    else:
                        logger.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter API")
                        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞."
                        
                elif response.status == 429:
                    logger.warning("Rate limit –ø—Ä–µ–≤—ã—à–µ–Ω –¥–ª—è OpenRouter API")
                    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                    
                else:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ OpenRouter API ({response.status}): {error_text}")
                    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    
        except asyncio.TimeoutError:
            logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter API")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter API: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    def create_perfume_question_prompt(self, user_question: str, perfumes_data: List[Dict[str, Any]]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ –ø–∞—Ä—Ñ—é–º–∞—Ö"""
        return PromptTemplates.create_perfume_question_prompt(user_question, perfumes_data)
    
    def create_quiz_results_prompt(self, user_profile: Dict[str, Any], suitable_perfumes: List[Dict[str, Any]]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–≤–∏–∑–∞"""
        return PromptTemplates.create_quiz_results_prompt(user_profile, suitable_perfumes)
    
    def create_fragrance_info_prompt(self, query: str, matching_perfumes: List[Dict[str, Any]]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä–æ–º–∞—Ç–µ"""
        return PromptTemplates.create_fragrance_info_prompt(query, matching_perfumes)
    
    def process_ai_response_with_links(self, ai_response: str, db_manager) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ò–ò –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏"""
        try:
            # –ò—â–µ–º –≤—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã –≤ –æ—Ç–≤–µ—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [–ê—Ä—Ç–∏–∫—É–ª: XXX]
            article_pattern = r'\[–ê—Ä—Ç–∏–∫—É–ª:\s*([A-Z0-9\-_]+)\]'
            matches = re.finditer(article_pattern, ai_response, re.IGNORECASE)
            
            processed_response = ai_response
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã
            for match in matches:
                article = match.group(1)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –∏–∑ –ë–î
                url = db_manager.get_perfume_url_by_article(article)
                
                if url:
                    # –ó–∞–º–µ–Ω—è–µ–º –∞—Ä—Ç–∏–∫—É–ª –Ω–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏"
                    article_mark = f"[–ê—Ä—Ç–∏–∫—É–ª: {article}]"
                    link_mark = f"[–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏]({url})"
                    processed_response = processed_response.replace(article_mark, link_mark)
                    
                    logger.info(f"üîó –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞: {article}")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è Telegram
            formatted_response = self._format_text_for_telegram(processed_response)
            
            return formatted_response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –ò–ò: {e}")
            return ai_response  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    
    def find_perfumes_by_query(self, query: str, all_perfumes: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–ò—â–µ—Ç –ø–∞—Ä—Ñ—é–º—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        matching = []
        query_lower = query.lower()
        
        for perfume in all_perfumes:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏, –±—Ä–µ–Ω–¥–µ, —Ñ–∞–±—Ä–∏–∫–µ –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª–µ
            if (query_lower in perfume['name'].lower() or
                query_lower in perfume['brand'].lower() or
                query_lower in perfume['factory'].lower() or
                query_lower in perfume['article'].lower()):
                matching.append(perfume)
        
        logger.info(f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∞–π–¥–µ–Ω–æ {len(matching)} –∞—Ä–æ–º–∞—Ç–æ–≤")
        return matching
    
    def is_api_cooldown_active(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –∫—É–ª–¥–∞—É–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.cooldowns:
            return False
        
        cooldown_end = self.cooldowns[user_id]
        return datetime.now() < cooldown_end
    
    def set_api_cooldown(self, user_id: int, seconds: int):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫—É–ª–¥–∞—É–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.cooldowns[user_id] = datetime.now() + timedelta(seconds=seconds)
        logger.info(f"‚è±Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫—É–ª–¥–∞—É–Ω {seconds}—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    def _format_text_for_telegram(self, text: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram"""
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –ª–∏–º–∏—Ç ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(text) > 4000:
            text = text[:3900] + "\n\nüìù *–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–æ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram*"
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
        text = self._escape_markdown_safely(text)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        text = re.sub(r'\n{3,}', '\n\n', text)
        
        return text
    
    def _escape_markdown_safely(self, text: str) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç Markdown —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ entities"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏
            text = text.replace('\\', '\\\\')
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–∞—Ä—É—à–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ Markdown
            markdown_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
            
            for char in markdown_chars:
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π Markdown —Ä–∞–∑–º–µ—Ç–∫–∏
                text = self._escape_char_safely(text, char)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ Markdown —Ç–µ–≥–∏
            text = self._fix_unclosed_markdown_tags(text)
            
            return text
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ Markdown: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            return re.sub(r'[*_`\[\]()~>#+\-=|{}.!]', '', text)
    
    def _escape_char_safely(self, text: str, char: str) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª"""
        if char in ['*', '_']:
            # –î–ª—è –∂–∏—Ä–Ω–æ–≥–æ/–∫—É—Ä—Å–∏–≤–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–Ω–æ—Å—Ç—å
            char_count = text.count(char)
            if char_count % 2 != 0:
                # –ï—Å–ª–∏ –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ
                text = text.replace(char, f'\\{char}')
        elif char in ['[', ']', '(', ')']:
            # –î–ª—è —Å–∫–æ–±–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            if char == '[':
                if text.count('[') != text.count(']'):
                    text = text.replace('[', '\\[')
            elif char == ']':
                if text.count('[') != text.count(']'):
                    text = text.replace(']', '\\]')
            elif char == '(':
                if text.count('(') != text.count(')'):
                    text = text.replace('(', '\\(')
            elif char == ')':
                if text.count('(') != text.count(')'):
                    text = text.replace(')', '\\)')
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–∞
            lines = text.split('\n')
            for i, line in enumerate(lines):
                if char in ['#', '+', '-', '*'] and line.strip().startswith(char):
                    continue  # –ù–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–æ–≤ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                lines[i] = line.replace(char, f'\\{char}')
            text = '\n'.join(lines)
        
        return text
    
    def _fix_unclosed_markdown_tags(self, text: str) -> str:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ Markdown —Ç–µ–≥–∏"""
        try:
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç (**)
            bold_count = text.count('**')
            if bold_count % 2 != 0:
                text += '**'
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–π –∫—É—Ä—Å–∏–≤ (*)  
            italic_count = text.count('*') - text.count('**') * 2
            if italic_count % 2 != 0:
                text += '*'
                
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–π –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π (_)
            underscore_count = text.count('_')
            if underscore_count % 2 != 0:
                text += '_'
                
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–π –∫–æ–¥ (`)
            code_count = text.count('`')
            if code_count % 2 != 0:
                text += '`'
            
            return text
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ Markdown —Ç–µ–≥–æ–≤: {e}")
            return text
    
    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç HTTP —Å–µ—Å—Å–∏—é"""
        if self.session and not self.session.closed:
            await self.session.close()
            logger.info("üîå HTTP —Å–µ—Å—Å–∏—è AIProcessor –∑–∞–∫—Ä—ã—Ç–∞")
    
    async def check_api_status(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ API –∫–ª—é—á–∞"""
        status = {
            'api_key_valid': False,
            'api_key_masked': self.api_key[:8] + "..." + self.api_key[-4:] if len(self.api_key) > 12 else "***",
            'model': self.model,
            'base_url': self.base_url,
            'last_check': datetime.now().isoformat(),
            'response_time': None,
            'error': None,
            'test_successful': False
        }
        
        try:
            start_time = datetime.now()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            session = await self._get_session()
            
            test_payload = {
                "model": self.model,
                "messages": [
                    {
                        "role": "user", 
                        "content": "–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Ä–∞–±–æ—Ç–∞–µ—Ç"
                    }
                ],
                "max_tokens": 10,
                "temperature": 0
            }
            
            async with session.post(f"{self.base_url}/chat/completions", json=test_payload) as response:
                response_time = (datetime.now() - start_time).total_seconds()
                status['response_time'] = round(response_time, 2)
                
                if response.status == 200:
                    data = await response.json()
                    if 'choices' in data and len(data['choices']) > 0:
                        test_response = data['choices'][0]['message']['content'].strip().lower()
                        status['api_key_valid'] = True
                        status['test_successful'] = '—Ä–∞–±–æ—Ç–∞' in test_response or '—Ä–∞–±–æ—Ç' in test_response
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
                        if 'usage' in data:
                            status['tokens_used'] = data['usage'].get('total_tokens', 0)
                        
                        if 'model' in data:
                            status['actual_model'] = data['model']
                    else:
                        status['error'] = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API"
                elif response.status == 401:
                    status['error'] = "–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á (401 Unauthorized)"
                elif response.status == 429:
                    status['error'] = "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (429 Too Many Requests)"
                elif response.status == 403:
                    status['error'] = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403 Forbidden)"
                else:
                    error_text = await response.text()
                    status['error'] = f"HTTP {response.status}: {error_text[:200]}"
                    
        except asyncio.TimeoutError:
            status['error'] = "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"
        except aiohttp.ClientError as e:
            status['error'] = f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"
        except Exception as e:
            status['error'] = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        
        return status

    async def process_message(self, message: str, user_id: int = None) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id and self.is_api_cooldown_active(user_id):
                return "‚è±Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ –ò–ò."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò
            response = await self.call_openrouter_api(message)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            if user_id:
                self.set_api_cooldown(user_id, 10)  # 10 —Å–µ–∫—É–Ω–¥ –∫—É–ª–¥–∞—É–Ω
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è Telegram
            formatted_response = self._format_text_for_telegram(response)
            
            return formatted_response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."

    def search_perfumes(self, query: str, perfumes_data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–ò—â–µ—Ç –ø–∞—Ä—Ñ—é–º—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        matching = []
        query_lower = query.lower()
        
        for perfume in perfumes_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏, –±—Ä–µ–Ω–¥–µ, —Ñ–∞–±—Ä–∏–∫–µ –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª–µ
            if (query_lower in perfume['name'].lower() or
                query_lower in perfume['brand'].lower() or
                query_lower in perfume['factory'].lower() or
                query_lower in perfume['article'].lower()):
                matching.append(perfume)
        
        logger.info(f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∞–π–¥–µ–Ω–æ {len(matching)} –∞—Ä–æ–º–∞—Ç–æ–≤")
        return matching

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä"""
        if hasattr(self, 'session') and self.session and not self.session.closed:
            asyncio.create_task(self.session.close())