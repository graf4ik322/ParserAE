#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import logging
import time
from typing import Dict, Optional, Any, List
from dataclasses import dataclass
import aiohttp
import json

logger = logging.getLogger(__name__)

@dataclass
class APIResponse:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API"""
    success: bool
    content: Optional[str] = None
    error: Optional[str] = None
    status_code: Optional[int] = None
    usage: Optional[Dict[str, Any]] = None

class OpenRouterClient:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenRouter API"""
    
    def __init__(self, api_key: str, base_url: str = "https://openrouter.ai/api/v1/chat/completions", 
                 model: str = "anthropic/claude-3-haiku"):
        self.api_key = api_key
        self.base_url = base_url
        self.model = model
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ retry
        self.max_retries = 3
        self.retry_delay = 1  # —Å–µ–∫—É–Ω–¥—ã
        self.backoff_factor = 2
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
        self.connect_timeout = 10
        self.total_timeout = 60
        
        # –ö—ç—à –¥–ª—è cooldown –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_last_api_call: Dict[int, float] = {}
        self.api_cooldown_seconds = 30
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        self.headers = {
            'Authorization': f'Bearer {api_key}',
            'Content-Type': 'application/json',
            'HTTP-Referer': 'https://perfume-bot.com',  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            'X-Title': 'Perfume Consultant Bot'
        }
        
        logger.info("‚úÖ OpenRouter –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _check_cooldown(self, user_id: Optional[int]) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç cooldown –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not user_id:
            return None
            
        current_time = time.time()
        last_call = self.user_last_api_call.get(user_id, 0)
        time_since_last = current_time - last_call
        
        if time_since_last < self.api_cooldown_seconds:
            remaining = self.api_cooldown_seconds - time_since_last
            return f"‚è±Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {remaining:.0f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º"
        
        return None
    
    def _update_cooldown(self, user_id: Optional[int]) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id:
            self.user_last_api_call[user_id] = time.time()
    
    async def _make_request_with_retry(self, payload: Dict[str, Any]) -> APIResponse:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º"""
        last_error = None
        
        for attempt in range(self.max_retries):
            try:
                timeout = aiohttp.ClientTimeout(
                    total=self.total_timeout, 
                    connect=self.connect_timeout
                )
                
                async with aiohttp.ClientSession(timeout=timeout) as session:
                    start_time = time.time()
                    
                    async with session.post(
                        self.base_url,
                        headers=self.headers,
                        json=payload
                    ) as response:
                        request_time = time.time() - start_time
                        response_text = await response.text()
                        
                        logger.info(f"üåê API –∑–∞–ø—Ä–æ—Å #{attempt + 1}: —Å—Ç–∞—Ç—É—Å={response.status}, –≤—Ä–µ–º—è={request_time:.2f}—Å")
                        
                        if response.status == 200:
                            try:
                                data = json.loads(response_text)
                                content = data['choices'][0]['message']['content']
                                usage = data.get('usage', {})
                                
                                logger.info(f"‚úÖ API —É—Å–ø–µ—à–Ω–æ: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–∫–µ–Ω—ã: {usage}")
                                
                                return APIResponse(
                                    success=True,
                                    content=content,
                                    status_code=response.status,
                                    usage=usage
                                )
                                
                            except (KeyError, json.JSONDecodeError) as e:
                                error_msg = f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ API: {e}"
                                logger.error(f"‚ùå {error_msg}")
                                return APIResponse(
                                    success=False,
                                    error=error_msg,
                                    status_code=response.status
                                )
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö HTTP –æ—à–∏–±–æ–∫
                        elif response.status == 429:  # Rate limiting
                            error_msg = "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                            logger.warning(f"‚ö†Ô∏è Rate limit: {response_text[:200]}")
                            
                            if attempt < self.max_retries - 1:
                                delay = self.retry_delay * (self.backoff_factor ** attempt) * 2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è rate limit
                                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay}—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                                await asyncio.sleep(delay)
                                continue
                                
                            return APIResponse(
                                success=False,
                                error=error_msg,
                                status_code=response.status
                            )
                        
                        elif response.status == 401:  # Unauthorized
                            error_msg = "üîë –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á."
                            logger.error(f"‚ùå Auth error: {response_text[:200]}")
                            return APIResponse(
                                success=False,
                                error=error_msg,
                                status_code=response.status
                            )
                        
                        elif response.status == 400:  # Bad Request
                            error_msg = "üìù –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å."
                            logger.error(f"‚ùå Bad request: {response_text[:200]}")
                            return APIResponse(
                                success=False,
                                error=error_msg,
                                status_code=response.status
                            )
                        
                        elif response.status == 500:  # Server Error
                            error_msg = "üîß –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ API."
                            logger.error(f"‚ùå Server error: {response_text[:200]}")
                            
                            if attempt < self.max_retries - 1:
                                delay = self.retry_delay * (self.backoff_factor ** attempt)
                                logger.info(f"‚è≥ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay}—Å...")
                                await asyncio.sleep(delay)
                                continue
                                
                            return APIResponse(
                                success=False,
                                error=error_msg,
                                status_code=response.status
                            )
                        
                        else:  # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
                            error_msg = f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API: {response.status}"
                            logger.error(f"‚ùå Unexpected error {response.status}: {response_text[:200]}")
                            
                            if attempt < self.max_retries - 1:
                                delay = self.retry_delay * (self.backoff_factor ** attempt)
                                await asyncio.sleep(delay)
                                continue
                                
                            return APIResponse(
                                success=False,
                                error=error_msg,
                                status_code=response.status
                            )
            
            except asyncio.TimeoutError:
                error_msg = "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ API"
                logger.error(f"‚ùå Timeout –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                last_error = error_msg
                
                if attempt < self.max_retries - 1:
                    delay = self.retry_delay * (self.backoff_factor ** attempt)
                    await asyncio.sleep(delay)
                    continue
            
            except aiohttp.ClientError as e:
                error_msg = f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"
                logger.error(f"‚ùå Network error –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
                last_error = error_msg
                
                if attempt < self.max_retries - 1:
                    delay = self.retry_delay * (self.backoff_factor ** attempt)
                    await asyncio.sleep(delay)
                    continue
            
            except Exception as e:
                error_msg = f"üî• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
                logger.error(f"‚ùå Unexpected error –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
                last_error = error_msg
                
                if attempt < self.max_retries - 1:
                    delay = self.retry_delay * (self.backoff_factor ** attempt)
                    await asyncio.sleep(delay)
                    continue
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        return APIResponse(
            success=False,
            error=last_error or "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫"
        )
    
    async def chat_completion(self, 
                            messages: List[Dict[str, str]], 
                            max_tokens: int = 1000,
                            temperature: float = 0.7,
                            user_id: Optional[int] = None) -> APIResponse:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
        cooldown_error = self._check_cooldown(user_id)
        if cooldown_error:
            return APIResponse(success=False, error=cooldown_error)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º payload
        payload = {
            "model": self.model,
            "messages": messages,
            "max_tokens": max_tokens,
            "temperature": temperature,
            "stream": False
        }
        
        logger.info(f"ü§ñ –ó–∞–ø—Ä–æ—Å –∫ {self.model}: {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π, max_tokens={max_tokens}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = await self._make_request_with_retry(payload)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º cooldown –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
        if response.success:
            self._update_cooldown(user_id)
        
        return response
    
    async def simple_completion(self, 
                              prompt: str, 
                              system_message: str = "", 
                              max_tokens: int = 1000,
                              temperature: float = 0.7,
                              user_id: Optional[int] = None) -> APIResponse:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        
        messages = []
        if system_message:
            messages.append({"role": "system", "content": system_message})
        messages.append({"role": "user", "content": prompt})
        
        return await self.chat_completion(
            messages=messages,
            max_tokens=max_tokens,
            temperature=temperature,
            user_id=user_id
        )
    
    async def check_api_key(self) -> APIResponse:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞"""
        try:
            balance_url = "https://openrouter.ai/api/v1/auth/key"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(balance_url, headers=self.headers) as response:
                    if response.status == 200:
                        data = await response.json()
                        return APIResponse(
                            success=True,
                            content="API –∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω",
                            usage=data
                        )
                    else:
                        return APIResponse(
                            success=False,
                            error="API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω",
                            status_code=response.status
                        )
        except Exception as e:
            return APIResponse(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –∫–ª—é—á–∞: {str(e)}"
            )