#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        # Telegram Bot
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN', '')
        if not self.bot_token or self.bot_token == 'your_telegram_bot_token_here':
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # OpenRouter API
        self.openrouter_api_key = os.getenv('OPENROUTER_API_KEY', '')
        if not self.openrouter_api_key or self.openrouter_api_key == 'your_openrouter_api_key_here':
            raise ValueError("OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –ê–¥–º–∏–Ω
        admin_user_id_str = os.getenv('ADMIN_USER_ID', '0')
        if admin_user_id_str == '0' or not admin_user_id_str:
            raise ValueError("ADMIN_USER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        try:
            self.admin_user_id = int(admin_user_id_str)
        except ValueError:
            raise ValueError("ADMIN_USER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        self.database_path = os.getenv('DATABASE_PATH', 'data/perfumes.db')
        
        # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.api_cooldown_seconds = int(os.getenv('API_COOLDOWN_SECONDS', '30'))
        self.max_tokens_per_request = int(os.getenv('MAX_TOKENS_PER_REQUEST', '8000'))
        
        # –ü–∞—Ä—Å–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.parse_interval_hours = int(os.getenv('PARSE_INTERVAL_HOURS', '6'))
        self.parser_max_workers = int(os.getenv('PARSER_MAX_WORKERS', '3'))
        
        # –†–µ–∂–∏–º –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤ (—Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é)
        self.use_all_perfumes = True
        self.no_limits_mode = True
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OpenRouter
        self.openrouter_model = os.getenv('OPENROUTER_MODEL', 'openai/gpt-4-turbo-preview')
        self.openrouter_base_url = 'https://openrouter.ai/api/v1'
        
        # –ü–∞—Ä—Å–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.aroma_euro_base_url = 'https://aroma-euro.ru'
        self.aroma_euro_catalog_url = 'https://aroma-euro.ru/perfume/'
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        self.cache_ttl_seconds = int(os.getenv('CACHE_TTL_SECONDS', '3600'))  # 1 —á–∞—Å
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.log_level = os.getenv('LOG_LEVEL', 'INFO')
        self.log_file = os.getenv('LOG_FILE', 'perfume_bot.log')
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.request_timeout = int(os.getenv('REQUEST_TIMEOUT', '30'))
        self.max_retries = int(os.getenv('MAX_RETRIES', '3'))
        
    def validate(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        errors = []
        
        if not self.bot_token:
            errors.append("TELEGRAM_BOT_TOKEN –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        if not self.openrouter_api_key:
            errors.append("OPENROUTER_API_KEY –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        if self.admin_user_id <= 0:
            errors.append("ADMIN_USER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        if self.api_cooldown_seconds < 0:
            errors.append("API_COOLDOWN_SECONDS –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
        
        if self.max_tokens_per_request <= 0:
            errors.append("MAX_TOKENS_PER_REQUEST –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        
        if errors:
            raise ValueError("–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n" + "\n".join(errors))
        
        return True
    
    def __str__(self):
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤)"""
        return f"""
üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Perfume Bot:
‚îú‚îÄ‚îÄ ü§ñ Bot Token: {'‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if self.bot_token else '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
‚îú‚îÄ‚îÄ üß† OpenRouter API: {'‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if self.openrouter_api_key else '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
‚îú‚îÄ‚îÄ üë§ Admin ID: {self.admin_user_id}
‚îú‚îÄ‚îÄ üóÑÔ∏è Database: {self.database_path}
‚îú‚îÄ‚îÄ ‚è±Ô∏è API Cooldown: {self.api_cooldown_seconds}s
‚îú‚îÄ‚îÄ üéØ Max Tokens: {self.max_tokens_per_request}
‚îú‚îÄ‚îÄ üîÑ Parse Interval: {self.parse_interval_hours}h
‚îú‚îÄ‚îÄ üöÄ No Limits Mode: {'‚úÖ –≤–∫–ª—é—á–µ–Ω' if self.no_limits_mode else '‚ùå –≤—ã–∫–ª—é—á–µ–Ω'}
‚îî‚îÄ‚îÄ üìù Log Level: {self.log_level}
        """.strip()