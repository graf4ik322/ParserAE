#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
from typing import Dict, List, Set
from collections import defaultdict

class PerfumeDataNormalizer:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ñ—é–º–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ LLM –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self, json_file_path: str):
        self.json_file_path = json_file_path
        self.perfumes_data = self.load_data()
        
    def load_data(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        with open(self.json_file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    
    def create_names_only_list(self) -> List[str]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–π –∞—Ä–æ–º–∞—Ç–æ–≤ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ)"""
        names = set()
        for perfume in self.perfumes_data['perfumes']:
            if perfume.get('name'):
                names.add(perfume['name'].strip())
        return sorted(list(names))
    
    def create_brand_name_list(self) -> List[str]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥ + –Ω–∞–∑–≤–∞–Ω–∏–µ"""
        items = set()
        for perfume in self.perfumes_data['perfumes']:
            brand = perfume.get('brand', '').strip()
            name = perfume.get('name', '').strip()
            if brand and name:
                items.add(f"{brand} - {name}")
        return sorted(list(items))
    
    def create_name_factory_list(self) -> List[str]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ + —Ñ–∞–±—Ä–∏–∫–∞"""
        items = set()
        for perfume in self.perfumes_data['perfumes']:
            name = perfume.get('name', '').strip()
            factory = perfume.get('factory', '').strip()
            if name:
                if factory:
                    items.add(f"{name} ({factory})")
                else:
                    items.add(f"{name} (—Ñ–∞–±—Ä–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞)")
        return sorted(list(items))
    
    def create_brand_name_factory_list(self) -> List[str]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥ + –Ω–∞–∑–≤–∞–Ω–∏–µ + —Ñ–∞–±—Ä–∏–∫–∞"""
        items = set()
        for perfume in self.perfumes_data['perfumes']:
            brand = perfume.get('brand', '').strip()
            name = perfume.get('name', '').strip()
            factory = perfume.get('factory', '').strip()
            if brand and name:
                if factory:
                    items.add(f"{brand} - {name} ({factory})")
                else:
                    items.add(f"{brand} - {name} (—Ñ–∞–±—Ä–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞)")
        return sorted(list(items))
    
    def create_full_data_compact(self) -> List[Dict]:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        compact_data = []
        for perfume in self.perfumes_data['perfumes']:
            details = perfume.get('details', {})
            item = {
                'brand': perfume.get('brand', ''),
                'name': perfume.get('name', ''),
                'factory': perfume.get('factory', ''),
                'price': perfume.get('price', ''),
                'gender': details.get('gender', ''),
                'fragrance_group': details.get('fragrance_group', ''),
                'quality': details.get('quality', '')
            }
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if item['brand'] and item['name']:
                compact_data.append(item)
        return compact_data
    
    def create_factory_analysis(self) -> Dict[str, Dict]:
        """–°–æ–∑–¥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ñ–∞–±—Ä–∏–∫ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"""
        factory_data = defaultdict(lambda: {
            'perfumes': [],
            'brands': set(),
            'avg_price': 0,
            'quality_levels': set(),
            'fragrance_groups': set()
        })
        
        for perfume in self.perfumes_data['perfumes']:
            factory = perfume.get('factory', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞').strip()
            if not factory:
                factory = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞'
                
            details = perfume.get('details', {})
            
            factory_data[factory]['perfumes'].append({
                'brand': perfume.get('brand', ''),
                'name': perfume.get('name', ''),
                'price': perfume.get('price', '')
            })
            
            if perfume.get('brand'):
                factory_data[factory]['brands'].add(perfume['brand'])
            
            if details.get('quality'):
                factory_data[factory]['quality_levels'].add(details['quality'])
                
            if details.get('fragrance_group'):
                factory_data[factory]['fragrance_groups'].add(details['fragrance_group'])
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º sets –≤ lists –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        result = {}
        for factory, data in factory_data.items():
            result[factory] = {
                'perfume_count': len(data['perfumes']),
                'brands': sorted(list(data['brands'])),
                'quality_levels': sorted(list(data['quality_levels'])),
                'fragrance_groups': sorted(list(data['fragrance_groups'])),
                'sample_perfumes': data['perfumes'][:5]  # –ü–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            }
        
        return result
    
    def create_quiz_reference_data(self) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–≤–∏–∑–∞"""
        return {
            'fragrance_groups': sorted(list(set(
                details.get('fragrance_group', '')
                for perfume in self.perfumes_data['perfumes']
                for details in [perfume.get('details', {})]
                if details.get('fragrance_group')
            ))),
            'genders': sorted(list(set(
                details.get('gender', '')
                for perfume in self.perfumes_data['perfumes']
                for details in [perfume.get('details', {})]
                if details.get('gender')
            ))),
            'qualities': sorted(list(set(
                details.get('quality', '')
                for perfume in self.perfumes_data['perfumes']
                for details in [perfume.get('details', {})]
                if details.get('quality')
            ))),
            'brands': sorted(list(set(
                perfume.get('brand', '')
                for perfume in self.perfumes_data['perfumes']
                if perfume.get('brand')
            ))),
            'factories': sorted(list(set(
                perfume.get('factory', '')
                for perfume in self.perfumes_data['perfumes']
                if perfume.get('factory')
            )))
        }
    
    def save_normalized_data(self, output_dir: str = '.'):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        
        # 1. –¢–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è
        names_only = self.create_names_only_list()
        with open(f'{output_dir}/names_only.json', 'w', encoding='utf-8') as f:
            json.dump(names_only, f, ensure_ascii=False, indent=2)
        
        # 2. –ë—Ä–µ–Ω–¥ + –Ω–∞–∑–≤–∞–Ω–∏–µ
        brand_name = self.create_brand_name_list()
        with open(f'{output_dir}/brand_name.json', 'w', encoding='utf-8') as f:
            json.dump(brand_name, f, ensure_ascii=False, indent=2)
        
        # 3. –ù–∞–∑–≤–∞–Ω–∏–µ + —Ñ–∞–±—Ä–∏–∫–∞
        name_factory = self.create_name_factory_list()
        with open(f'{output_dir}/name_factory.json', 'w', encoding='utf-8') as f:
            json.dump(name_factory, f, ensure_ascii=False, indent=2)
        
        # 4. –ë—Ä–µ–Ω–¥ + –Ω–∞–∑–≤–∞–Ω–∏–µ + —Ñ–∞–±—Ä–∏–∫–∞
        brand_name_factory = self.create_brand_name_factory_list()
        with open(f'{output_dir}/brand_name_factory.json', 'w', encoding='utf-8') as f:
            json.dump(brand_name_factory, f, ensure_ascii=False, indent=2)
        
        # 5. –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        full_compact = self.create_full_data_compact()
        with open(f'{output_dir}/full_data_compact.json', 'w', encoding='utf-8') as f:
            json.dump(full_compact, f, ensure_ascii=False, indent=2)
        
        # 6. –ê–Ω–∞–ª–∏–∑ —Ñ–∞–±—Ä–∏–∫
        factory_analysis = self.create_factory_analysis()
        with open(f'{output_dir}/factory_analysis.json', 'w', encoding='utf-8') as f:
            json.dump(factory_analysis, f, ensure_ascii=False, indent=2)
        
        # 7. –°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–≤–∏–∑–∞
        quiz_data = self.create_quiz_reference_data()
        with open(f'{output_dir}/quiz_reference.json', 'w', encoding='utf-8') as f:
            json.dump(quiz_data, f, ensure_ascii=False, indent=2)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {
            'total_perfumes': len(self.perfumes_data['perfumes']),
            'unique_names': len(names_only),
            'brand_name_combinations': len(brand_name),
            'name_factory_combinations': len(name_factory),
            'full_combinations': len(brand_name_factory),
            'compact_records': len(full_compact),
            'factories_analyzed': len(factory_analysis)
        }
        
        with open(f'{output_dir}/normalization_stats.json', 'w', encoding='utf-8') as f:
            json.dump(stats, f, ensure_ascii=False, indent=2)
        
        return stats

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    normalizer = PerfumeDataNormalizer('full_perfumes_catalog_complete.json')
    
    print("üîÑ –ù–∞—á–∏–Ω–∞—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ñ—é–º–æ–≤...")
    
    stats = normalizer.save_normalized_data()
    
    print("‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    for key, value in stats.items():
        print(f"  - {key}: {value}")
    
    print(f"\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    print(f"  - names_only.json - —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∞—Ä–æ–º–∞—Ç–æ–≤")
    print(f"  - brand_name.json - –±—Ä–µ–Ω–¥ + –Ω–∞–∑–≤–∞–Ω–∏–µ")
    print(f"  - name_factory.json - –Ω–∞–∑–≤–∞–Ω–∏–µ + —Ñ–∞–±—Ä–∏–∫–∞")
    print(f"  - brand_name_factory.json - –±—Ä–µ–Ω–¥ + –Ω–∞–∑–≤–∞–Ω–∏–µ + —Ñ–∞–±—Ä–∏–∫–∞")
    print(f"  - full_data_compact.json - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    print(f"  - factory_analysis.json - –∞–Ω–∞–ª–∏–∑ —Ñ–∞–±—Ä–∏–∫")
    print(f"  - quiz_reference.json - —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–≤–∏–∑–∞")
    print(f"  - normalization_stats.json - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏")

if __name__ == "__main__":
    main()