version: '3.8'

services:
  # Основное приложение - Perfume Bot v2.0
  perfume-bot:
    build:
      context: .
      dockerfile: Dockerfile.v2
    container_name: perfume-bot-v2
    restart: unless-stopped
    environment:
      # Telegram Bot
      - BOT_TOKEN=${BOT_TOKEN}
      - ADMIN_USER_ID=${ADMIN_USER_ID}
      
      # OpenRouter API
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - OPENROUTER_MODEL=${OPENROUTER_MODEL:-deepseek/deepseek-chat-v3-0324:free}
      - OPENROUTER_MAX_TOKENS=${OPENROUTER_MAX_TOKENS:-1500}
      - OPENROUTER_TEMPERATURE=${OPENROUTER_TEMPERATURE:-0.7}
      
      # API Settings
      - API_MAX_RETRIES=${API_MAX_RETRIES:-3}
      - API_RETRY_DELAY=${API_RETRY_DELAY:-1}
      - API_COOLDOWN_SECONDS=${API_COOLDOWN_SECONDS:-30}
      
      # Application Settings
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - UPDATE_INTERVAL_HOURS=${UPDATE_INTERVAL_HOURS:-24}
      - CACHE_EXPIRY_DAYS=${CACHE_EXPIRY_DAYS:-7}
      
      # Parser Settings
      - PARSER_MAX_CONCURRENT=${PARSER_MAX_CONCURRENT:-10}
      - PARSER_REQUEST_DELAY=${PARSER_REQUEST_DELAY:-1.0}
      - PARSER_TIMEOUT=${PARSER_TIMEOUT:-30}
      - PARSER_RETRY_ATTEMPTS=${PARSER_RETRY_ATTEMPTS:-3}
      
      # Data Settings
      - PERFUME_CATALOG_URL=${PERFUME_CATALOG_URL:-https://aroma-euro.ru/sitemap.xml}
      
    volumes:
      # Данные
      - ./perfume_bot/data:/app/perfume_bot/data
      - ./logs:/app/logs
      # Конфигурация (если нужно монтировать дополнительные файлы)
      - ./.env:/app/.env:ro
    
    ports:
      - "8080:8080"  # Для будущего веб-интерфейса
    
    networks:
      - perfume-network
    
    # Healthcheck для мониторинга
    healthcheck:
      test: ["CMD", "python", "-c", "from perfume_bot.core.config import config; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Ограничения ресурсов
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    
    # Логирование
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis для кэширования (опционально)
  redis:
    image: redis:7-alpine
    container_name: perfume-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - perfume-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
    profiles:
      - with-redis

  # PostgreSQL для хранения данных (опционально)
  postgres:
    image: postgres:15-alpine
    container_name: perfume-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-perfume_bot}
      - POSTGRES_USER=${POSTGRES_USER:-perfume_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-perfume_password}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - perfume-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.2'
    profiles:
      - with-postgres

  # Nginx для проксирования (опционально)
  nginx:
    image: nginx:alpine
    container_name: perfume-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - perfume-network
    depends_on:
      - perfume-bot
    profiles:
      - with-nginx

  # Мониторинг с Prometheus (опционально)
  prometheus:
    image: prom/prometheus:latest
    container_name: perfume-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - perfume-network
    profiles:
      - monitoring

  # Grafana для визуализации (опционально)
  grafana:
    image: grafana/grafana:latest
    container_name: perfume-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - perfume-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

# Сети
networks:
  perfume-network:
    driver: bridge

# Volumes для персистентного хранения
volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local