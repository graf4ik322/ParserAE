version: '3.8'

services:
  perfume-bot:
    build: .
    container_name: perfume-consultant-bot
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
      - TZ=Europe/Moscow
    volumes:
      # Монтируем логи для персистентности
      - ./logs:/app/logs
      # Монтируем данные для обновления без пересборки
      - ./full_perfumes_catalog_complete.json:/app/full_perfumes_catalog_complete.json:ro
      - ./full_basic_catalog.json:/app/full_basic_catalog.json:ro
      - ./names_only.json:/app/names_only.json:ro
      - ./brand_name.json:/app/brand_name.json:ro
      - ./name_factory.json:/app/name_factory.json:ro
      - ./brand_name_factory.json:/app/brand_name_factory.json:ro
      - ./full_data_compact.json:/app/full_data_compact.json:ro
      - ./factory_analysis.json:/app/factory_analysis.json:ro
      - ./quiz_reference.json:/app/quiz_reference.json:ro
    networks:
      - perfume-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "python3", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Автоматический парсер и нормализатор данных
  auto-parser:
    build: .
    container_name: perfume-auto-parser
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
      - TZ=Europe/Moscow
    volumes:
      # Монтируем данные для записи (НЕ read-only!)
      - ./full_perfumes_catalog_complete.json:/app/full_perfumes_catalog_complete.json
      - ./full_basic_catalog.json:/app/full_basic_catalog.json
      - ./names_only.json:/app/names_only.json
      - ./brand_name.json:/app/brand_name.json
      - ./name_factory.json:/app/name_factory.json
      - ./brand_name_factory.json:/app/brand_name_factory.json
      - ./full_data_compact.json:/app/full_data_compact.json
      - ./factory_analysis.json:/app/factory_analysis.json
      - ./quiz_reference.json:/app/quiz_reference.json
      - ./last_check.json:/app/last_check.json
      # Монтируем директорию логов для персистентности
      - ./logs:/app/logs
      # Монтируем Docker socket для перезапуска бота
      - /var/run/docker.sock:/var/run/docker.sock
    command: ["python3", "auto_parser_service.py"]
    networks:
      - perfume-network
    depends_on:
      - perfume-bot
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "python3", "-c", "import os; exit(0 if os.path.exists('/app/logs/auto_parser.log') else 1)"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Опциональный сервис для мониторинга логов
  log-viewer:
    image: amir20/dozzle:latest
    container_name: perfume-bot-logs
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - DOZZLE_LEVEL=info
      - DOZZLE_TAILSIZE=300
    networks:
      - perfume-network
    profiles:
      - monitoring

  # Опциональный сервис для мониторинга системы
  watchtower:
    image: containrrr/watchtower
    container_name: perfume-bot-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_POLL_INTERVAL=300
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=true
    command: perfume-consultant-bot
    networks:
      - perfume-network
    profiles:
      - auto-update

networks:
  perfume-network:
    driver: bridge

volumes:
  perfume-logs:
    driver: local