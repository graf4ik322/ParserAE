#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# –ö–æ–ø–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–µ—Ä, –Ω–æ —É–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
from complete_parser_with_details import CompleteParfumeParser
import json
import time
import logging
import concurrent.futures
from typing import List, Dict

logger = logging.getLogger(__name__)

class FullCatalogParser(CompleteParfumeParser):
    """–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤"""
    
    def parse_all_catalog(self) -> List[Dict[str, str]]:
        """–ü–∞—Ä—Å–∏—Ç –≤–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
        all_urls = self.get_all_pages_urls()
        all_perfumes = []
        unique_keys = set()
        
        # –≠—Ç–∞–ø 1: –°–±–æ—Ä –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞—Ç–∞–ª–æ–≥–∞
        logger.info("üîç –≠—Ç–∞–ø 1: –°–±–æ—Ä –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞—Ç–∞–ª–æ–≥–∞...")
        for i, url in enumerate(all_urls, 1):
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–∞–ª–æ–≥–∞ {i}/{len(all_urls)}: {url}")
            
            page_perfumes = self.parse_catalog_page(url)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (—Å —É—á–µ—Ç–æ–º —Ñ–∞–±—Ä–∏–∫–∏)
            for perfume in page_perfumes:
                unique_key = perfume['unique_key']
                if unique_key not in unique_keys:
                    unique_keys.add(unique_key)
                    all_perfumes.append(perfume)
                else:
                    logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç: {perfume['full_title']}")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if i < len(all_urls):
                time.sleep(1)
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(all_perfumes)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–π –∫–∞—Ç–∞–ª–æ–≥
        self.save_basic_catalog(all_perfumes)
        
        # –≠—Ç–∞–ø 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ - –¢–û–õ–¨–ö–û –¥–ª—è –ø–µ—Ä–≤—ã—Ö 200 —Ç–æ–≤–∞—Ä–æ–≤
        # (–¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
        logger.info("üîç –≠—Ç–∞–ø 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤...")
        logger.info(f"üìä –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑–≤–ª–µ–∫–∞—é –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 200 —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {len(all_perfumes)}")
        
        test_perfumes = all_perfumes[:200]  # –ü–µ—Ä–≤—ã–µ 200 –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        
        with concurrent.futures.ThreadPoolExecutor(max_workers=self.max_workers) as executor:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            future_to_perfume = {
                executor.submit(self.process_product_details, perfume): perfume 
                for perfume in test_perfumes
            }
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            completed_perfumes = []
            for i, future in enumerate(concurrent.futures.as_completed(future_to_perfume), 1):
                try:
                    perfume = future.result()
                    completed_perfumes.append(perfume)
                    
                    if i % 10 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10 —Ç–æ–≤–∞—Ä–æ–≤
                        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å –¥–µ—Ç–∞–ª—è–º–∏: {i}/{len(test_perfumes)}")
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞: {e}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(0.3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        for perfume in all_perfumes[200:]:
            perfume['details'] = {
                'article': '',
                'quality': '',
                'brand_detailed': '',
                'gender': '',
                'fragrance_group': '',
                'factory_detailed': ''
            }
            completed_perfumes.append(perfume)
        
        logger.info(f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(completed_perfumes)}")
        logger.info(f"–¢–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏: {len(test_perfumes)}")
        return completed_perfumes
    
    def save_basic_catalog(self, perfumes):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–∑–æ–≤—ã–π –∫–∞—Ç–∞–ª–æ–≥ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        basic_data = {
            'metadata': {
                'source': 'aroma-euro.ru',
                'catalog_url': f'{self.base_url}/perfume/',
                'parsing_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'total_count': len(perfumes),
                'parser_version': 'full-catalog-1.0',
                'description': '–ë–∞–∑–æ–≤—ã–π –∫–∞—Ç–∞–ª–æ–≥ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫'
            },
            'perfumes': perfumes
        }
        
        with open('full_basic_catalog.json', 'w', encoding='utf-8') as f:
            json.dump(basic_data, f, ensure_ascii=False, indent=2)
        
        logger.info(f"–ë–∞–∑–æ–≤—ã–π –∫–∞—Ç–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: full_basic_catalog.json")

def main():
    parser = FullCatalogParser(max_workers=5)  # 5 –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ü–û–õ–ù–û–ì–û –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞...")
    print("üìç –°–∞–π—Ç: https://aroma-euro.ru/perfume/")
    print("üéØ –¶–µ–ª—å: –í–°–ï —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π")
    print("‚ö†Ô∏è  –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 200 —Ç–æ–≤–∞—Ä–æ–≤")
    print("-" * 70)
    
    try:
        # –ü–∞—Ä—Å–∏–º –∫–∞—Ç–∞–ª–æ–≥
        parser.perfumes = parser.parse_all_catalog()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        parser.save_to_json('full_perfumes_catalog_complete.json')
        
        print("\n‚úÖ –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"  - –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(parser.perfumes)}")
        print(f"  - –ë–∞–∑–æ–≤—ã–π –∫–∞—Ç–∞–ª–æ–≥: full_basic_catalog.json")
        print(f"  - –ü–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥: full_perfumes_catalog_complete.json")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
    import time
    import logging
    from typing import List, Dict
    from datetime import datetime
    import concurrent.futures
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    logger = logging.getLogger(__name__)
    
    main()