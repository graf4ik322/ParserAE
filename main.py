#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import asyncio
import signal
import sys
import os
import fcntl
import re
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

from config import Config
from database.manager import DatabaseManager
from ai.processor import AIProcessor
from quiz.quiz_system import QuizSystem
from parsers.auto_parser import AutoParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('perfume_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class PerfumeBot:
    def __init__(self):
        self.config = Config()
        self.db = DatabaseManager(self.config.database_path)
        self.ai = AIProcessor(self.config.openrouter_api_key, self.config.openrouter_model)
        self.quiz = QuizSystem(self.db, self.ai)
        self.auto_parser = AutoParser(self.db)
        self.lock_file = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.application = Application.builder().token(self.config.bot_token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()
        
        logger.info("ü§ñ Perfume Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _acquire_lock(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª-–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
        lock_file_path = '/tmp/perfume_bot.lock'
        try:
            self.lock_file = open(lock_file_path, 'w')
            fcntl.flock(self.lock_file.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
            self.lock_file.write(str(os.getpid()))
            self.lock_file.flush()
            logger.info("üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
        except IOError:
            logger.error("‚ùå –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            if self.lock_file:
                self.lock_file.close()
            return False

    def _release_lock(self):
        """–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ñ–∞–π–ª-–±–ª–æ–∫–∏—Ä–æ–≤–∫—É"""
        if self.lock_file:
            try:
                fcntl.flock(self.lock_file.fileno(), fcntl.LOCK_UN)
                self.lock_file.close()
                os.unlink('/tmp/perfume_bot.lock')
                logger.info("üîì –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")

    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        def signal_handler(signum, frame):
            logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
            self._release_lock()
            sys.exit(0)
        
        signal.signal(signal.SIGTERM, signal_handler)
        signal.signal(signal.SIGINT, signal_handler)

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        self.application.add_handler(CommandHandler("test", self.test_command))
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("parse", self.parse_command))
        
        # –ù–æ–≤—ã–µ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("admin", self.admin_panel_command))
        self.application.add_handler(CommandHandler("admindb", self.admin_database_command))
        self.application.add_handler(CommandHandler("adminapi", self.admin_api_command))
        self.application.add_handler(CommandHandler("adminparser", self.admin_parser_command))
        self.application.add_handler(CommandHandler("adminforce", self.admin_force_parse_command))
        self.application.add_handler(CommandHandler("fixurls", self.fix_urls_command))
        
        # Callback-–∫–Ω–æ–ø–∫–∏
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    async def test_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
        user = update.effective_user
        logger.info(f"üß™ –¢–ï–°–¢: –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /test –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        await update.message.reply_text("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!")
        logger.info("üß™ –¢–ï–°–¢: –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        error_message = str(context.error)
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ callback –∑–∞–ø—Ä–æ—Å—ã - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–∏ –¥–æ–ª–≥–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –ò–ò
        if "Query is too old" in error_message or "response timeout expired" in error_message:
            logger.info(f"‚ÑπÔ∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π callback –∑–∞–ø—Ä–æ—Å: {error_message}")
            return
            
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {context.error}")
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø update –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
            if update and hasattr(update, 'callback_query') and update.callback_query:
                # –î–ª—è callback_query –æ—à–∏–±–æ–∫
                try:
                    await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                except Exception:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ callback_query —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
                
                try:
                    await update.callback_query.edit_message_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]])
                    )
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        await update.effective_chat.send_message(
                            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]])
                        )
                    except Exception:
                        pass
                        
            elif update and hasattr(update, 'message') and update.message:
                # –î–ª—è message –æ—à–∏–±–æ–∫
                try:
                    await update.message.reply_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]])
                    )
                except Exception:
                    pass
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ error_handler: {e}")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} (@{user.username})")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = self.db.get_or_create_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        self.db.reset_user_session(user.id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await self.show_main_menu(update, context)
        
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        user_id = update.effective_user.id
        
        help_text = """
üå∏ **–ü–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç-–ë–æ—Ç**

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
üéØ **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ø–∞—Ä—Ñ—é–º–∞–º** - –∑–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∞—Ä–æ–º–∞—Ç–∞—Ö
üìù **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–≤–∏–∑** - –æ–ø—Ä–µ–¥–µ–ª–∏–º –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
üîç **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä–æ–º–∞—Ç–∞—Ö** - –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–∞—Ä—Ñ—é–º–∞—Ö
üõí **–ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É** - —É–¥–æ–±–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–∞–≥–∞–∑–∏–Ω

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/stats - –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞
3. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ

–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–æ–ª–Ω—ã–º –∫–∞—Ç–∞–ª–æ–≥–æ–º –∏–∑ 1200+ –∞—Ä–æ–º–∞—Ç–æ–≤! üéâ
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if user_id == self.config.admin_user_id:
            help_text += """

üîß **–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**
/admin - –ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
/admindb - –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
/adminapi - –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
/adminparser - –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞
/adminforce - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
/parse - –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)

**–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤–∫–ª—é—á–∞–µ—Ç:**
üìä –ü–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ë–î
üîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenRouter API
üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞—Ä—Å–µ—Ä–∞
‚ö° –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
üìà –ü–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
            """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        user_id = update.effective_user.id
        
        if user_id != self.config.admin_user_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
        
        stats = self.db.get_admin_statistics()
        
        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['active_users_today']}

üå∏ **–ö–∞—Ç–∞–ª–æ–≥:**
‚Ä¢ –í—Å–µ–≥–æ –ø–∞—Ä—Ñ—é–º–æ–≤: {stats['total_perfumes']}

üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤ –æ –ø–∞—Ä—Ñ—é–º–∞—Ö: {stats['total_questions']}
‚Ä¢ –ö–≤–∏–∑–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {stats['total_quizzes']}
‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤ API —Å–µ–≥–æ–¥–Ω—è: {stats['api_usage_today']}

üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}
        """
        
        await update.message.reply_text(stats_text, parse_mode='Markdown')

    async def parse_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /parse (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        user_id = update.effective_user.id
        
        if user_id != self.config.admin_user_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞")
            return
        
        await update.message.reply_text("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞...")
        
        try:
            result = await self.auto_parser.force_parse_catalog(admin_user_id=user_id)
            if result.get('success', False):
                await update.message.reply_text("‚úÖ –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            else:
                await update.message.reply_text("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - –∫–∞—Ç–∞–ª–æ–≥ –∞–∫—Ç—É–∞–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")

    async def admin_panel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
        user_id = update.effective_user.id
        
        if user_id != self.config.admin_user_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
            return
        
        keyboard = [
            [InlineKeyboardButton("üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î", callback_data="admin_db")],
            [InlineKeyboardButton("üîë –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API", callback_data="admin_api")],
            [InlineKeyboardButton("üîÑ –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞", callback_data="admin_parser")],
            [InlineKeyboardButton("‚ö° –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", callback_data="admin_force_parse")],
            [InlineKeyboardButton("üìà –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_full_stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        admin_text = f"""
üîß **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å**

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
üìä **–°–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î** - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
üîë **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å API** - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenRouter API
üîÑ **–°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞** - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
‚ö° **–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥** - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞
üìà **–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}
        """
        
        await update.message.reply_text(
            admin_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def admin_database_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        user_id = update.effective_user.id
        
        if user_id != self.config.admin_user_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
            return
        
        try:
            db_info = self.db.get_detailed_database_info()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = f"üìä **–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö**\n\n"
            
            report += f"üìÅ **–§–∞–π–ª –ë–î:** `{db_info['database_path']}`\n"
            report += f"üíæ **–†–∞–∑–º–µ—Ä:** {db_info['database_size']}\n\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
            report += "üìã **–¢–∞–±–ª–∏—Ü—ã:**\n"
            for table, info in db_info['tables'].items():
                status = "‚úÖ" if info['exists'] else "‚ùå"
                report += f"{status} `{table}`: {info['count']} –∑–∞–ø–∏—Å–µ–π\n"
            
            # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            if db_info['top_users']:
                report += f"\nüë• **–¢–æ–ø-{len(db_info['top_users'])} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
                for user in db_info['top_users'][:5]:
                    username = user['username'] or user['first_name'] or f"ID{user['telegram_id']}"
                    report += f"‚Ä¢ {username}: {user['activity_count']} –¥–µ–π—Å—Ç–≤–∏–π\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Ñ—é–º–æ–≤
            if 'top_brands' in db_info['perfume_stats']:
                report += f"\nüå∏ **–¢–æ–ø-5 –±—Ä–µ–Ω–¥–æ–≤:**\n"
                for brand in db_info['perfume_stats']['top_brands'][:5]:
                    report += f"‚Ä¢ {brand['brand']}: {brand['count']} –∞—Ä–æ–º–∞—Ç–æ–≤\n"
            
            # API –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            if db_info['api_usage']:
                recent_api = db_info['api_usage'][0]
                report += f"\nüîë **API –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å:**\n"
                report += f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: {recent_api['requests']}\n"
                report += f"‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤: {recent_api['total_tokens']}\n"
            
            # –û—à–∏–±–∫–∏
            if db_info['errors']:
                report += f"\n‚ö†Ô∏è **–û—à–∏–±–∫–∏:**\n"
                for error in db_info['errors'][:3]:
                    report += f"‚Ä¢ {error}\n"
            
            await update.message.reply_text(
                report,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]])
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_database_command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–î: {e}")

    async def admin_api_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
        user_id = update.effective_user.id
        
        if user_id != self.config.admin_user_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
            return
        
        checking_msg = await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ API...")
        
        try:
            api_status = await self.ai.check_api_status()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            status_icon = "‚úÖ" if api_status['api_key_valid'] else "‚ùå"
            report = f"üîë **–°–æ—Å—Ç–æ—è–Ω–∏–µ OpenRouter API** {status_icon}\n\n"
            
            report += f"üîê **API Key:** `{api_status['api_key_masked']}`\n"
            report += f"ü§ñ **–ú–æ–¥–µ–ª—å:** `{api_status['model']}`\n"
            report += f"üåê **URL:** `{api_status['base_url']}`\n"
            report += f"‚è∞ **–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:** {datetime.fromisoformat(api_status['last_check']).strftime('%H:%M:%S')}\n"
            
            if api_status['response_time']:
                report += f"‚ö° **–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** {api_status['response_time']}—Å\n"
            
            if api_status['api_key_valid']:
                report += f"‚úÖ **–°—Ç–∞—Ç—É—Å:** API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n"
                if api_status.get('tokens_used'):
                    report += f"üéØ **–¢–æ–∫–µ–Ω–æ–≤ –≤ —Ç–µ—Å—Ç–µ:** {api_status['tokens_used']}\n"
                if api_status.get('actual_model'):
                    report += f"üîß **–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å:** `{api_status['actual_model']}`\n"
            else:
                report += f"‚ùå **–û—à–∏–±–∫–∞:** {api_status.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n"
            
            await checking_msg.delete()
            await update.message.reply_text(
                report,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]])
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_api_command: {e}")
            await checking_msg.delete()
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API: {e}")

    async def admin_parser_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞"""
        user_id = update.effective_user.id
        
        if user_id != self.config.admin_user_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
            return
        
        try:
            parser_status = self.auto_parser.get_parser_status()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            status_icon = "üîÑ" if parser_status['is_running'] else "‚è∏Ô∏è"
            report = f"üîÑ **–°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞** {status_icon}\n\n"
            
            # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            report += f"üìä **–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**\n"
            report += f"‚Ä¢ –ó–∞–ø—É—â–µ–Ω: {'‚úÖ –î–∞' if parser_status['running_since_start'] else '‚ùå –ù–µ—Ç'}\n"
            report += f"‚Ä¢ –ê–∫—Ç–∏–≤–µ–Ω: {'‚úÖ –î–∞' if parser_status['is_running'] else '‚ùå –ù–µ—Ç'}\n"
            
            if parser_status['current_operation']:
                report += f"‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏—è: {parser_status['current_operation']}\n"
            
            if parser_status['last_operation_time']:
                last_op = datetime.fromisoformat(parser_status['last_operation_time'])
                report += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è: {last_op.strftime('%H:%M:%S %d.%m')}\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = parser_status['statistics']
            report += f"\nüìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            report += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤: {stats['total_runs']}\n"
            report += f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful_runs']}\n"
            report += f"‚Ä¢ –û—à–∏–±–æ–∫: {stats['failed_runs']}\n"
            report += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: +{stats['last_items_added']}, ~{stats['last_items_updated']}\n"
            
            # –ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
            report += f"\nüìÅ **–ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã:**\n"
            for filename, file_info in parser_status['source_files'].items():
                status = "‚úÖ" if file_info['exists'] else "‚ùå"
                size = f" ({file_info['size']} –±–∞–π—Ç)" if file_info['exists'] else ""
                report += f"{status} `{filename}`{size}\n"
            
            # –ë–î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if 'database_statistics' in parser_status and not parser_status['database_statistics'].get('error'):
                db_stats = parser_status['database_statistics']
                if db_stats['last_parse_time']:
                    last_parse = datetime.fromisoformat(db_stats['last_parse_time'])
                    report += f"\nüïê **–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥:** {last_parse.strftime('%H:%M:%S %d.%m.%Y')}\n"
            
            await update.message.reply_text(
                report,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ö° –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", callback_data="admin_force_parse")],
                    [InlineKeyboardButton("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
                ])
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_parser_command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")

    async def admin_force_parse_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        user_id = update.effective_user.id
        
        if user_id != self.config.admin_user_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø–∞—Ä—Å–µ—Ä
        parser_status = self.auto_parser.get_parser_status()
        if parser_status['is_running']:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞", callback_data="admin_parser")]])
            )
            return
        
        processing_msg = await update.message.reply_text("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–∞–ª–æ–≥–∞...")
        
        try:
            result = await self.auto_parser.force_parse_catalog(admin_user_id=user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            status_icon = "‚úÖ" if result['success'] else "‚ùå"
            report = f"üîÑ **–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞** {status_icon}\n\n"
            
            report += f"‚è∞ **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {result['execution_time']}—Å\n"
            report += f"üë§ **–ó–∞–ø—É—â–µ–Ω –∞–¥–º–∏–Ω–æ–º:** ID{result['started_by']}\n"
            report += f"üïê **–í—Ä–µ–º—è:** {datetime.fromisoformat(result['start_time']).strftime('%H:%M:%S %d.%m.%Y')}\n\n"
            
            if result['success']:
                report += f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n"
                report += f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {result.get('total_items_in_source', 'N/A')}\n"
                report += f"‚Ä¢ –ë—ã–ª–æ –≤ –ë–î: {result.get('items_before', 'N/A')}\n"
                report += f"‚Ä¢ –°—Ç–∞–ª–æ –≤ –ë–î: {result.get('items_after', 'N/A')}\n"
                report += f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ: {result['items_added']}\n"
                report += f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {result['items_updated']}\n"
            else:
                report += f"‚ùå **–û—à–∏–±–∫–∏:**\n"
                for error in result['errors'][:3]:
                    report += f"‚Ä¢ {error}\n"
            
            # –°—Ç–∞—Ç—É—Å –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if 'source_files_status' in result:
                report += f"\nüìÅ **–ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã:**\n"
                for filename, file_info in result['source_files_status'].items():
                    status = "‚úÖ" if file_info['exists'] else "‚ùå"
                    report += f"{status} {filename}\n"
            
            await processing_msg.delete()
            await update.message.reply_text(
                report,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞", callback_data="admin_parser")],
                    [InlineKeyboardButton("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
                ])
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_force_parse_command: {e}")
            await processing_msg.delete()
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")

    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user_id = update.effective_user.id
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        keyboard = [
            [InlineKeyboardButton("üéØ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –ø–∞—Ä—Ñ—é–º–∞—Ö", callback_data="perfume_question")],
            [InlineKeyboardButton("üìù –ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="start_quiz")],
            [InlineKeyboardButton("üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä–æ–º–∞—Ç–µ", callback_data="fragrance_info")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if user_id == self.config.admin_user_id:
            keyboard.append([InlineKeyboardButton("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = """
üå∏ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–∞—Ä—Ñ—é–º–µ—Ä–Ω–æ–≥–æ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞!**

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π –∞—Ä–æ–º–∞—Ç –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ 1200+ –ø–∞—Ä—Ñ—é–º–æ–≤.

**–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:**
        """
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=welcome_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                text=welcome_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db.update_session_state(user_id, "MAIN_MENU")

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        
        if query.data == "perfume_question":
            await self.start_perfume_question(update, context)
        elif query.data == "start_quiz":
            await self.quiz.start_quiz(update, context)
        elif query.data == "fragrance_info":
            await self.start_fragrance_info(update, context)
        elif query.data == "help":
            await self.help_command(update, context)
        elif query.data == "back_to_menu":
            await self.show_main_menu(update, context)
        elif query.data.startswith("quiz_"):
            await self.quiz.handle_quiz_callback(update, context)
        # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å callbacks
        elif query.data == "admin_panel":
            await self._handle_admin_panel_callback(update, context)
        elif query.data == "admin_db":
            await self._handle_admin_db_callback(update, context)
        elif query.data == "admin_api":
            await self._handle_admin_api_callback(update, context)
        elif query.data == "admin_parser":
            await self._handle_admin_parser_callback(update, context)
        elif query.data == "admin_force_parse":
            await self._handle_admin_force_parse_callback(update, context)
        elif query.data == "admin_full_stats":
            await self._handle_admin_full_stats_callback(update, context)
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback'–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ä–µ–∫—É—Ä—Å–∏–∏
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {query.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ï—Å–ª–∏ back_to_menu —Ç–æ–∂–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º /start –±–µ–∑ –∫–Ω–æ–ø–æ–∫
            if query.data == "back_to_menu":
                try:
                    await query.edit_message_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
                    )
                except Exception as e:
                    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ callback: {e}")
                    await update.effective_chat.send_message(
                        "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
                    )
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback'–æ–≤ - –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
                try:
                    await query.edit_message_text(
                        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]])
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ callback: {e}")
                    # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await update.effective_chat.send_message(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]])
                    )

    async def start_perfume_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –ø–∞—Ä—Ñ—é–º–∞—Ö"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        if self.ai.is_api_cooldown_active(user_id):
            await update.callback_query.edit_message_text(
                "‚è±Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
            )
            return
        
        question_text = """
üéØ **–†–µ–∂–∏–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ø–∞—Ä—Ñ—é–º–∞–º**

–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –ø–∞—Ä—Ñ—é–º–∞—Ö:
‚Ä¢ "–ü–æ—Å–æ–≤–µ—Ç—É–π—Ç–µ –∞—Ä–æ–º–∞—Ç –¥–ª—è –æ—Ñ–∏—Å–∞"
‚Ä¢ "–ß—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è?"
‚Ä¢ "–ò—â—É —á—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ Chanel ‚Ññ5"
‚Ä¢ "–ü–∞—Ä—Ñ—é–º –¥–æ 3000 —Ä—É–±–ª–µ–π –¥–ª—è –º—É–∂—á–∏–Ω—ã"

–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–¥–±–µ—Ä—É –∏–¥–µ–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞!
        """
        
        await update.callback_query.edit_message_text(
            text=question_text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]),
            parse_mode='Markdown'
        )
        
        self.db.update_session_state(user_id, "PERFUME_QUESTION")

    async def start_fragrance_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–∂–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä–æ–º–∞—Ç–µ"""
        user_id = update.effective_user.id
        
        info_text = """
üîç **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä–æ–º–∞—Ç–µ**

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—Ñ—é–º–∞, –±—Ä–µ–Ω–¥ –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª:
‚Ä¢ "Tom Ford Black Orchid"
‚Ä¢ "Chanel"
‚Ä¢ "TF001"

–Ø –Ω–∞–π–¥—É –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä–æ–º–∞—Ç–µ –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞!
        """
        
        await update.callback_query.edit_message_text(
            text=info_text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]),
            parse_mode='Markdown'
        )
        
        self.db.update_session_state(user_id, "FRAGRANCE_INFO")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        message_text = update.message.text
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
        session = self.db.get_user_session(user_id)
        
        if not session or not session.get('current_state'):
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await self.show_main_menu(update, context)
            return
        
        current_state = session['current_state']
        
        if current_state == "PERFUME_QUESTION":
            await self.handle_perfume_question(update, context, message_text)
        elif current_state == "QUIZ_IN_PROGRESS":
            await self.quiz.handle_quiz_answer(update, context, message_text)
        elif current_state == "FRAGRANCE_INFO":
            await self.handle_fragrance_info(update, context, message_text)
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await self.show_main_menu(update, context)

    async def handle_perfume_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –æ –ø–∞—Ä—Ñ—é–º–∞—Ö"""
        user_id = update.effective_user.id
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not message_text or not message_text.strip():
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ –ø–∞—Ä—Ñ—é–º–∞—Ö.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]])
            )
            return
        
        message_text = message_text.strip()
        
        if len(message_text) < 2:
            await update.message.reply_text(
                "‚ùå –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]])
            )
            return
        
        if len(message_text) > 1000:
            await update.message.reply_text(
                "‚ùå –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]])
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        processing_msg = await update.message.reply_text("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–¥–±–∏—Ä–∞—é –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä—Ñ—é–º—ã –∏–∑ –ë–î (–±–µ–∑ –ª–∏–º–∏—Ç–æ–≤!)
            perfumes_data = self.db.get_all_perfumes_from_database()
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò
            prompt = self.ai.create_perfume_question_prompt(message_text, perfumes_data)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
            ai_response = await self.ai.process_message(prompt, user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –æ –∫—É–ª–¥–∞—É–Ω–µ
            if "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ" in ai_response:
                await processing_msg.delete()
                await update.message.reply_text(ai_response)
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏
            processed_response = self.ai.process_ai_response_with_links(ai_response, self.db)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await processing_msg.delete()
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                await update.message.reply_text(
                    processed_response,
                    parse_mode='Markdown',
                    disable_web_page_preview=True,
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]])
                )
            except Exception as format_error:
                logger.warning(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ –ø–∞—Ä—Ñ—é–º–∞—Ö: {format_error}")
                # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ç–µ–∫—Å—Ç—É –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                plain_response = re.sub(r'[*_`\[\]()~>#+\-=|{}.!]', '', processed_response)[:4000]
                await update.message.reply_text(
                    plain_response,
                    disable_web_page_preview=True,
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]])
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.db.save_usage_stat(user_id, "perfume_question", None, message_text, len(processed_response))
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            self.db.update_session_state(user_id, "MAIN_MENU")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            await processing_msg.delete()
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]])
            )

    async def handle_fragrance_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä–æ–º–∞—Ç–µ"""
        user_id = update.effective_user.id
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not message_text or not message_text.strip():
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä–æ–º–∞—Ç–∞ –∏–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]])
            )
            return
        
        message_text = message_text.strip()
        
        if len(message_text) < 2:
            await update.message.reply_text(
                "‚ùå –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]])
            )
            return
        
        if len(message_text) > 1000:
            await update.message.reply_text(
                "‚ùå –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]])
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        searching_msg = await update.message.reply_text("üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä–æ–º–∞—Ç–µ...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä–æ–º–∞—Ç–∞—Ö
            from ai.prompts import PromptTemplates
            prompt = PromptTemplates.create_fragrance_info_prompt(message_text)

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
            ai_response_raw = await self.ai.process_message(prompt, user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –æ –∫—É–ª–¥–∞—É–Ω–µ
            if "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ" in ai_response_raw:
                await searching_msg.delete()
                await update.message.reply_text(ai_response_raw)
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
            ai_response = self.ai.process_ai_response_with_links(ai_response_raw, self.db)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
            await searching_msg.delete()
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                # –ù–ï —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —É–∂–µ —Å–¥–µ–ª–∞–Ω–æ –≤ process_message()
                await update.message.reply_text(
                    ai_response,
                    parse_mode='Markdown',
                    disable_web_page_preview=True,
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]])
                )
            except Exception as format_error:
                logger.warning(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ–± –∞—Ä–æ–º–∞—Ç–µ: {format_error}")
                # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ç–µ–∫—Å—Ç—É –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                plain_response = re.sub(r'[*_`\[\]()~>#+\-=|{}.!]', '', ai_response)[:4000]
                await update.message.reply_text(
                    plain_response,
                    disable_web_page_preview=True,
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]])
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.db.save_usage_stat(user_id, "fragrance_info", None, message_text, len(ai_response))
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            self.db.update_session_state(user_id, "MAIN_MENU")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            await searching_msg.delete()
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]])
            )

    async def _handle_admin_panel_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –≥–ª–∞–≤–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        user_id = update.effective_user.id
        
        if user_id != self.config.admin_user_id:
            await update.callback_query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
            return
        
        keyboard = [
            [InlineKeyboardButton("üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î", callback_data="admin_db")],
            [InlineKeyboardButton("üîë –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API", callback_data="admin_api")],
            [InlineKeyboardButton("üîÑ –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞", callback_data="admin_parser")],
            [InlineKeyboardButton("‚ö° –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", callback_data="admin_force_parse")],
            [InlineKeyboardButton("üìà –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_full_stats")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        admin_text = f"""
üîß **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å**

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
üìä **–°–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î** - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
üîë **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å API** - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenRouter API
üîÑ **–°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞** - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
‚ö° **–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥** - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞
üìà **–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}
        """
        
        await update.callback_query.edit_message_text(
            admin_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def _handle_admin_db_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–î"""
        user_id = update.effective_user.id
        
        if user_id != self.config.admin_user_id:
            await update.callback_query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
            return
        
        await update.callback_query.edit_message_text("üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            db_info = self.db.get_detailed_database_info()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç (—É–∫–æ—Ä–æ—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è callback)
            report = f"üìä **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö**\n\n"
            report += f"üíæ **–†–∞–∑–º–µ—Ä:** {db_info['database_size']}\n\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
            report += "üìã **–¢–∞–±–ª–∏—Ü—ã:**\n"
            for table, info in db_info['tables'].items():
                status = "‚úÖ" if info['exists'] else "‚ùå"
                report += f"{status} `{table}`: {info['count']}\n"
            
            # –¢–æ–ø –±—Ä–µ–Ω–¥–æ–≤
            if 'top_brands' in db_info['perfume_stats']:
                report += f"\nüå∏ **–¢–æ–ø-3 –±—Ä–µ–Ω–¥–∞:**\n"
                for brand in db_info['perfume_stats']['top_brands'][:3]:
                    report += f"‚Ä¢ {brand['brand']}: {brand['count']}\n"
            
            await update.callback_query.edit_message_text(
                report,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]])
            )
            
        except Exception as e:
            await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def _handle_admin_api_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API"""
        user_id = update.effective_user.id
        
        if user_id != self.config.admin_user_id:
            await update.callback_query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
            return
        
        await update.callback_query.edit_message_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ API...")
        
        try:
            api_status = await self.ai.check_api_status()
            
            status_icon = "‚úÖ" if api_status['api_key_valid'] else "‚ùå"
            report = f"üîë **API Status** {status_icon}\n\n"
            
            report += f"üîê **Key:** `{api_status['api_key_masked']}`\n"
            report += f"ü§ñ **Model:** `{api_status['model']}`\n"
            
            if api_status['response_time']:
                report += f"‚ö° **Response:** {api_status['response_time']}s\n"
            
            if api_status['api_key_valid']:
                report += f"‚úÖ **Status:** Working\n"
            else:
                report += f"‚ùå **Error:** {api_status.get('error', 'Unknown')[:50]}...\n"
            
            await update.callback_query.edit_message_text(
                report,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]])
            )
            
        except Exception as e:
            await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def _handle_admin_parser_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
        user_id = update.effective_user.id
        
        if user_id != self.config.admin_user_id:
            await update.callback_query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
            return
        
        await update.callback_query.edit_message_text("üîç –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞...")
        
        try:
            parser_status = self.auto_parser.get_parser_status()
            
            status_icon = "üîÑ" if parser_status['is_running'] else "‚è∏Ô∏è"
            report = f"üîÑ **Parser Status** {status_icon}\n\n"
            
            report += f"‚Ä¢ Running: {'‚úÖ' if parser_status['running_since_start'] else '‚ùå'}\n"
            report += f"‚Ä¢ Active: {'‚úÖ' if parser_status['is_running'] else '‚ùå'}\n"
            
            stats = parser_status['statistics']
            report += f"\nüìà **Stats:**\n"
            report += f"‚Ä¢ Total: {stats['total_runs']}\n"
            report += f"‚Ä¢ Success: {stats['successful_runs']}\n"
            report += f"‚Ä¢ Errors: {stats['failed_runs']}\n"
            
            await update.callback_query.edit_message_text(
                report,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ö° Run Parser", callback_data="admin_force_parse")],
                    [InlineKeyboardButton("üîß Admin Panel", callback_data="admin_panel")]
                ])
            )
            
        except Exception as e:
            await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def _handle_admin_force_parse_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        user_id = update.effective_user.id
        
        if user_id != self.config.admin_user_id:
            await update.callback_query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞
        parser_status = self.auto_parser.get_parser_status()
        if parser_status['is_running']:
            await update.callback_query.edit_message_text(
                "‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ –°—Ç–∞—Ç—É—Å", callback_data="admin_parser")]])
            )
            return
        
        await update.callback_query.edit_message_text("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥...")
        
        try:
            result = await self.auto_parser.force_parse_catalog(admin_user_id=user_id)
            
            status_icon = "‚úÖ" if result['success'] else "‚ùå"
            report = f"üîÑ **Parse Result** {status_icon}\n\n"
            report += f"‚è∞ **Time:** {result['execution_time']}s\n"
            
            if result['success']:
                report += f"‚Ä¢ Added: {result['items_added']}\n"
                report += f"‚Ä¢ Updated: {result['items_updated']}\n"
            else:
                report += f"‚ùå **Errors:**\n"
                for error in result['errors'][:2]:
                    report += f"‚Ä¢ {error[:50]}...\n"
            
            await update.callback_query.edit_message_text(
                report,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]])
            )
            
        except Exception as e:
            await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def _handle_admin_full_stats_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        user_id = update.effective_user.id
        
        if user_id != self.config.admin_user_id:
            await update.callback_query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
            return
        
        await update.callback_query.edit_message_text("üìä –°–æ–±–∏—Ä–∞—é –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            basic_stats = self.db.get_admin_statistics()
            db_info = self.db.get_detailed_database_info()
            parser_status = self.auto_parser.get_parser_status()
            
            report = f"üìà **–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n"
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–∏—Ñ—Ä—ã
            report += f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:** {basic_stats['total_users']} (–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {basic_stats['active_users_today']})\n"
            report += f"üå∏ **–ü–∞—Ä—Ñ—é–º—ã:** {basic_stats['total_perfumes']}\n"
            report += f"‚ùì **–í–æ–ø—Ä–æ—Å–æ–≤:** {basic_stats['total_questions']}\n"
            report += f"üìù **–ö–≤–∏–∑–æ–≤:** {basic_stats['total_quizzes']}\n"
            report += f"üîë **API —Ç–æ–∫–µ–Ω–æ–≤ —Å–µ–≥–æ–¥–Ω—è:** {basic_stats['api_usage_today']}\n\n"
            
            # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º
            report += f"üíæ **–ë–î —Ä–∞–∑–º–µ—Ä:** {db_info['database_size']}\n"
            parser_icon = "üîÑ" if parser_status['is_running'] else "‚è∏Ô∏è"
            report += f"üîÑ **–ü–∞—Ä—Å–µ—Ä:** {parser_icon} ({parser_status['statistics']['total_runs']} –∑–∞–ø—É—Å–∫–æ–≤)\n\n"
            
            # –¢–æ–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if db_info['top_users']:
                report += f"üèÜ **–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {db_info['top_users'][0]['activity_count']} –¥–µ–π—Å—Ç–≤–∏–π\n"
            
            if 'top_brands' in db_info['perfume_stats']:
                top_brand = db_info['perfume_stats']['top_brands'][0]
                report += f"üåü **–¢–æ–ø –±—Ä–µ–Ω–¥:** {top_brand['brand']} ({top_brand['count']} –∞—Ä–æ–º–∞—Ç–æ–≤)\n"
            
            await update.callback_query.edit_message_text(
                report,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]])
            )
            
        except Exception as e:
            await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def _post_init_callback(self, application):
        """Callback –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–∞—Ä—Å–µ—Ä–∞...")
            await self.auto_parser.start_scheduler()
            logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–∞—Ä—Å–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            # –ü–∞—Ä—Å–µ—Ä –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            if not self._acquire_lock():
                logger.error("‚ùå –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.")
                sys.exit(1)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            self._setup_signal_handlers()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º post_init callback –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
            self.application.post_init = self._post_init_callback
            
            logger.info("üöÄ Perfume Bot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            logger.info("üì° –ó–∞–ø—É—Å–∫–∞–µ–º polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
            self.application.run_polling(drop_pending_updates=True)
            
        except KeyboardInterrupt:
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise
        finally:
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –ª—é–±–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            self._release_lock()

    async def fix_urls_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è URL —Å /product/ –Ω–∞ /parfume/ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        user_id = update.effective_user.id
        
        if user_id != self.config.admin_user_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è URL")
            return
        
        try:
            await update.message.reply_text("üîß –ò—Å–ø—Ä–∞–≤–ª—è—é URL –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º URL –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            fixed_count = self.db.fix_product_urls_to_parfume()
            
            await update.message.reply_text(
                f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ URL –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
                f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {fixed_count}\n"
                f"üîó –í—Å–µ —Å—Å—ã–ª–∫–∏ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç /parfume/ –≤–º–µ—Å—Ç–æ /product/"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ URL: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ URL: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = None
    try:
        bot = PerfumeBot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except SystemExit:
        # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
        pass
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if bot:
            bot._release_lock()

if __name__ == "__main__":
    main()