#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import json
import asyncio
import hashlib
import re
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from enum import Enum

import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    MessageHandler, filters, ContextTypes, ConversationHandler
)

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from config import BOT_TOKEN, OPENROUTER_API_KEY, OPENROUTER_CONFIG, DATA_FILES, LLM_LIMITS, ADMIN_USER_ID, TEXT_FORMATTING
from quiz_system import UniversalPerfumeQuizSystem, create_quiz_system
from ai_prompts import AIPrompts, PromptLimits

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('perfume_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
class BotState(Enum):
    MAIN_MENU = 0
    PERFUME_QUESTION = 1
    QUIZ_IN_PROGRESS = 2
    FRAGRANCE_INFO = 3
    WAITING_USER_INPUT = 4

@dataclass
class UserSession:
    """–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏"""
    current_state: BotState = BotState.MAIN_MENU
    quiz_answers: Dict[str, Any] = None
    quiz_step: int = 0
    last_message_id: Optional[int] = None
    context_data: Dict[str, Any] = None
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è callback –¥–∞–Ω–Ω—ã—Ö
    callback_mapping: Dict[str, str] = None
    
    def __post_init__(self):
        if self.quiz_answers is None:
            self.quiz_answers = {}
        if self.context_data is None:
            self.context_data = {}
        if self.callback_mapping is None:
            self.callback_mapping = {}

class PerfumeConsultantBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø–∞—Ä—Ñ—é–º–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
    
    def __init__(self, bot_token: str, openrouter_api_key: str):
        self.bot_token = bot_token
        self.openrouter_api_key = openrouter_api_key
        self.user_sessions: Dict[int, UserSession] = {}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.normalized_data = self._load_normalized_data()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∫–≤–∏–∑–∞
        self.quiz_system = create_quiz_system()
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenRouter
        self.openrouter_config = {
            'base_url': OPENROUTER_CONFIG['base_url'],
            'model': OPENROUTER_CONFIG['model'],
            'headers': {
                'Authorization': f'Bearer {openrouter_api_key}',
                'Content-Type': 'application/json'
            }
        }
        
        logger.info("‚úÖ –ü–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _load_normalized_data(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        data = {}
        
        for key, filename in DATA_FILES.items():
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    data[key] = json.load(f)
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {filename}")
            except FileNotFoundError:
                logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
                data[key] = [] if 'json' in filename else {}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL
        try:
            with open('full_perfumes_catalog_complete.json', 'r', encoding='utf-8') as f:
                full_catalog = json.load(f)
                data['full_catalog'] = full_catalog
                logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —Å URL")
        except FileNotFoundError:
            logger.error("‚ùå –ü–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            data['full_catalog'] = {'perfumes': []}
        
        return data
    
    def _format_text_for_telegram(self, text: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –≤ Telegram"""
        
        # –ß–∏—Å—Ç–∏–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        text = self._clean_markdown_formatting(text)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        text = self._apply_telegram_formatting(text)
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –±–ª–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞
        text = self._structure_text_blocks(text)
        
        return text.strip()
    
    def _clean_markdown_formatting(self, text: str) -> str:
        """–£–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–µ–µ markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
        
        # –£–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏
        text = re.sub(r'\*([^*\n]+?)\*', r'\1', text)
        
        # –£–±–∏—Ä–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∫—Ä–æ–º–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤
        text = re.sub(r'\[(?!–ê—Ä—Ç–∏–∫—É–ª:)([^\]]+?)\]', r'\1', text)
        
        # –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        text = re.sub(r'_{2,}', '', text)  # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        text = re.sub(r'-{3,}', '‚Äî‚Äî‚Äî', text)  # –ó–∞–º–µ–Ω—è–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Ç–∏—Ä–µ –Ω–∞ –∫—Ä–∞—Å–∏–≤—ã–µ
        
        return text
    
    def _apply_telegram_formatting(self, text: str) -> str:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram"""
        lines = text.split('\n')
        formatted_lines = []
        
        for line in lines:
            line = line.strip()
            if not line:
                formatted_lines.append(line)
                continue
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (—Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫–∏)
            if re.match(r'^\d+\.\s*<b>', line):
                line = f"üåü {line}"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏—è (—Å—Ç—Ä–æ–∫–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∞—Ä–æ–º–∞—Ç–æ–≤)
            elif '‚Ä¢' in line or line.startswith('‚Äî'):
                line = f"   {line}"  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
            elif '–ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä' in line:
                line = f"   {line}"
                
            formatted_lines.append(line)
        
        return '\n'.join(formatted_lines)
    
    def _structure_text_blocks(self, text: str) -> str:
        """–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –±–ª–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏"""
        lines = text.split('\n')
        result = []
        prev_was_perfume = False
        
        for i, line in enumerate(lines):
            line = line.strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –º–µ–∂–¥—É –∞—Ä–æ–º–∞—Ç–∞–º–∏
            is_perfume_title = re.match(r'^üåü\s*\d+\.', line)
            if is_perfume_title and prev_was_perfume:
                result.append('')  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∞—Ä–æ–º–∞—Ç–∞–º–∏
                
            result.append(line)
            prev_was_perfume = is_perfume_title
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        final_result = []
        prev_empty = False
        for line in result:
            if line == '':
                if not prev_empty:
                    final_result.append(line)
                prev_empty = True
            else:
                final_result.append(line)
                prev_empty = False
        
        return '\n'.join(final_result)

    def _create_perfume_url_mapping(self) -> Dict[str, str]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∞—Ä–æ–º–∞—Ç–æ–≤ —Å URL"""
        url_mapping = {}
        
        if 'full_catalog' in self.normalized_data:
            perfumes = self.normalized_data['full_catalog'].get('perfumes', [])
            
            for perfume in perfumes:
                # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
                brand = perfume.get('brand', '').strip()
                name = perfume.get('name', '').strip()
                url = perfume.get('url', '')
                
                if brand and name and url:
                    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á: "–ë—Ä–µ–Ω–¥ –ù–∞–∑–≤–∞–Ω–∏–µ"
                    main_key = f"{brand} {name}".lower()
                    url_mapping[main_key] = url
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á: —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    name_key = name.lower()
                    if name_key not in url_mapping:
                        url_mapping[name_key] = url
                    
                    # –ö–ª—é—á —Å –ø–æ–ª–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                    full_title = perfume.get('full_title', '').strip()
                    if full_title:
                        full_key = full_title.lower().replace('(–º–æ—Ç–∏–≤)', '').replace(',', '').strip()
                        url_mapping[full_key] = url
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–ª–æ–≤–∞—Ä—å URL –¥–ª—è {len(url_mapping)} –∞—Ä–æ–º–∞—Ç–æ–≤")
        return url_mapping
    
    def _create_enhanced_perfume_list(self) -> List[str]:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ñ—é–º–æ–≤ —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ –¥–ª—è –ò–ò"""
        enhanced_list = []
        
        if 'full_catalog' in self.normalized_data:
            perfumes = self.normalized_data['full_catalog'].get('perfumes', [])
            
            for perfume in perfumes:
                brand = perfume.get('brand', '').strip()
                name = perfume.get('name', '').strip()
                factory = perfume.get('factory', '').strip()
                article = perfume.get('article', '').strip()
                
                if brand and name:
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
                    if article:
                        enhanced_name = f"{brand} {name} ({factory}) [–ê—Ä—Ç–∏–∫—É–ª: {article}]"
                    else:
                        enhanced_name = f"{brand} {name} ({factory})"
                    
                    enhanced_list.append(enhanced_name)
        
        # –ï—Å–ª–∏ –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
        if not enhanced_list:
            enhanced_list = self.normalized_data.get('brand_name_factory', [])
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ò–ò: {len(enhanced_list)} –ø–æ–∑–∏—Ü–∏–π")
        return enhanced_list

    def _find_perfume_url(self, perfume_name: str) -> Optional[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç URL –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Ä–æ–º–∞—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É"""
        if 'full_catalog' not in self.normalized_data:
            return None
            
        perfumes = self.normalized_data['full_catalog'].get('perfumes', [])
        
        # –°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        article_match = re.search(r'\[–ê—Ä—Ç–∏–∫—É–ª:\s*([^\]]+)\]', perfume_name)
        target_article = article_match.group(1).strip() if article_match else None
        
        # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –∞—Ä—Ç–∏–∫—É–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        clean_name = re.sub(r'\[–ê—Ä—Ç–∏–∫—É–ª:[^\]]+\]', '', perfume_name).strip()
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–∏—Å–∫
        normalized_search = clean_name.lower().strip()
        normalized_search = re.sub(r'[^\w\s]', ' ', normalized_search)
        normalized_search = ' '.join(normalized_search.split())
        
        logger.info(f"üîç –ò—â–µ–º URL –¥–ª—è: '{perfume_name}' -> '{normalized_search}'" + 
                   (f" [–ê—Ä—Ç–∏–∫—É–ª: {target_article}]" if target_article else ""))
        
        # 1. –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –ø–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
        if target_article:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞—Ä—Ç–∏–∫—É–ª–∞
            article_variants = [
                target_article,  # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                target_article.replace('-', ''),  # –ë–µ–∑ –¥–µ—Ñ–∏—Å–æ–≤
                target_article.upper(),  # –í –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
                target_article.lower(),  # –í –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
            ]
            
            for perfume in perfumes:
                perfume_article = perfume.get('article', '').strip()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ç–∏–∫—É–ª –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ–ª–µ
                if perfume_article and perfume_article in article_variants:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É (–æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ) {perfume_article}: {perfume.get('url')}")
                    return perfume.get('url')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ç–∏–∫—É–ª –≤ details, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
                details_article = perfume.get('details', {}).get('article', '').strip()
                if details_article and details_article in article_variants:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É (details) {details_article}: {perfume.get('url')}")
                    return perfume.get('url')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ –≤ URL (–¥–ª—è —Å–ª—É—á–∞–µ–≤ —Ç–∏–ø–∞ 343713-T)
                url = perfume.get('url', '')
                if target_article in url:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –≤ URL {target_article}: {url}")
                    return url
        
        # 2. –ü–æ–∏—Å–∫ –ø–æ exact –±—Ä–µ–Ω–¥ + –Ω–∞–∑–≤–∞–Ω–∏–µ
        search_parts = normalized_search.split()
        if len(search_parts) >= 2:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–±–∏–≤–∫–∏ –Ω–∞ –±—Ä–µ–Ω–¥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
            for split_pos in range(1, min(len(search_parts), 4)):  # –ú–∞–∫—Å–∏–º—É–º 3 —Å–ª–æ–≤–∞ –¥–ª—è –±—Ä–µ–Ω–¥–∞
                possible_brand = ' '.join(search_parts[:split_pos])
                possible_name = ' '.join(search_parts[split_pos:])
                
                for perfume in perfumes:
                    brand = perfume.get('brand', '').lower().strip()
                    name = perfume.get('name', '').lower().strip()
                    
                    # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                    if brand == possible_brand and name == possible_name:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±—Ä–µ–Ω–¥+–Ω–∞–∑–≤–∞–Ω–∏–µ: {perfume.get('url')}")
                        return perfume.get('url')
                    
                    # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–±—Ä–µ–Ω–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è, –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è)
                    if (possible_brand in brand or brand in possible_brand) and \
                       (possible_name in name or name in possible_name):
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±—Ä–µ–Ω–¥+–Ω–∞–∑–≤–∞–Ω–∏–µ: {perfume.get('url')}")
                        return perfume.get('url')
        
        # 3. –ü–æ–∏—Å–∫ –ø–æ unique_key (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π)
        for perfume in perfumes:
            unique_key = perfume.get('unique_key', '').lower().strip()
            if unique_key:
                key_parts = unique_key.split('|')
                search_words = normalized_search.split()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω—ã –≤ unique_key
                found_words = 0
                for search_word in search_words:
                    if len(search_word) > 2:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
                        for key_part in key_parts:
                            if search_word in key_part:
                                found_words += 1
                                break
                
                # –¢—Ä–µ–±—É–µ–º –≤—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                if found_words >= len([w for w in search_words if len(w) > 2]) * 0.7:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ unique_key ({found_words} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π): {perfume.get('url')}")
                    return perfume.get('url')
        
        # 4. –ü–æ–∏—Å–∫ –ø–æ full_title (—Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º)
        for perfume in perfumes:
            full_title = perfume.get('full_title', '').lower().strip()
            if full_title:
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º full_title
                normalized_title = re.sub(r'[^\w\s]', ' ', full_title)
                normalized_title = ' '.join(normalized_title.split())
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                search_words = [w for w in normalized_search.split() if len(w) > 2]
                matches = 0
                for search_word in search_words:
                    if search_word in normalized_title:
                        matches += 1
                
                # –¢—Ä–µ–±—É–µ–º –±–æ–ª—å—à–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è full_title –ø–æ–∏—Å–∫–∞
                if matches >= len(search_words) * 0.8:  # 80% —Å–ª–æ–≤ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ full_title ({matches}/{len(search_words)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π): {perfume.get('url')}")
                    return perfume.get('url')
        
        logger.warning(f"‚ùå URL –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è: '{perfume_name}'")
        return None

    def _process_ai_response_with_urls(self, ai_response: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ò–ò –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã"""
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∞—Ä–æ–º–∞—Ç–æ–≤
        patterns = [
            # 1. Abdul Samad - Al Qurashi Safari Extreme (SELUZ) [–ê—Ä—Ç–∏–∫—É–ª: XXX]
            r'^\d+\.\s*([^(]+?)\s*\([^)]+\)(?:\s*\[–ê—Ä—Ç–∏–∫—É–ª:[^\]]+\])?',
            # **–ù–∞–∑–≤–∞–Ω–∏–µ** (–§–∞–±—Ä–∏–∫–∞) [–ê—Ä—Ç–∏–∫—É–ª: XXX]
            r'\*\*([^*]+)\*\*\s*\([^)]+\)(?:\s*\[–ê—Ä—Ç–∏–∫—É–ª:[^\]]+\])?',
            # <b>–ù–∞–∑–≤–∞–Ω–∏–µ</b> (–§–∞–±—Ä–∏–∫–∞) [–ê—Ä—Ç–∏–∫—É–ª: XXX]
            r'<b>([^<]+)</b>\s*\([^)]+\)(?:\s*\[–ê—Ä—Ç–∏–∫—É–ª:[^\]]+\])?',
            # –ù–∞–∑–≤–∞–Ω–∏–µ (–§–∞–±—Ä–∏–∫–∞) –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
            r'^([^(]+?)\s*\([^)]+\)(?:\s*\[–ê—Ä—Ç–∏–∫—É–ª:[^\]]+\])?',
        ]
        
        lines = ai_response.split('\n')
        processed_lines = []
        current_perfume_url = None
        current_perfume_name = None
        
        for line in lines:
            processed_line = line
            
            # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä–æ–º–∞—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–µ
            perfume_name = None
            for pattern in patterns:
                match = re.search(pattern, line.strip())
                if match:
                    perfume_name = match.group(1).strip()
                    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
                    perfume_name = re.sub(r'^\d+\.\s*', '', perfume_name)  # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä
                    perfume_name = re.sub(r'\s*-\s*', ' ', perfume_name)   # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–∏—Ä–µ
                    perfume_name = re.sub(r'<[^>]+>', '', perfume_name)    # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä–æ–º–∞—Ç–∞: '{perfume_name}'")
                    break
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä–æ–º–∞—Ç–∞, –∏—â–µ–º –¥–ª—è –Ω–µ–≥–æ URL –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º
            if perfume_name:
                current_perfume_url = self._find_perfume_url(perfume_name)
                current_perfume_name = perfume_name
                if current_perfume_url:
                    logger.info(f"–ù–∞–π–¥–µ–Ω URL –¥–ª—è '{perfume_name}': {current_perfume_url}")
                else:
                    logger.warning(f"URL –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è '{perfume_name}'")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏ (—Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
            link_patterns = [
                'üõí [–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä]',
                'üõí [–ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä]',
                'üõí [–ó–∞–∫–∞–∑–∞—Ç—å]',
                'üõí –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä',
                '[–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä]'
            ]
            
            for link_pattern in link_patterns:
                if link_pattern in processed_line:
                    if current_perfume_url:
                        processed_line = processed_line.replace(
                            link_pattern, 
                            f'üõí [–ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä]({current_perfume_url})'
                        )
                        logger.info(f"–ó–∞–º–µ–Ω–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è '{current_perfume_name}'")
                        current_perfume_url = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                        current_perfume_name = None
                    else:
                        processed_line = processed_line.replace(link_pattern, '')
                        logger.warning(f"–£–¥–∞–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –±–µ–∑ URL")
                    break
            
            processed_lines.append(processed_line)
        
        # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –∞—Ä–æ–º–∞—Ç –∏ URL, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –∫–æ–Ω–µ—Ü
        if current_perfume_url and current_perfume_name:
            processed_lines.append(f'üõí [–ö—É–ø–∏—Ç—å {current_perfume_name}]({current_perfume_url})')
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        formatted_response = self._format_text_for_telegram('\n'.join(processed_lines))
        return formatted_response

    def _extract_perfume_names_from_response(self, response: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∞—Ä–æ–º–∞—Ç–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò"""
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∞—Ä–æ–º–∞—Ç–æ–≤
        patterns = [
            r'\*\*([^*]+)\*\*\s*\([^)]+\)',  # **–ù–∞–∑–≤–∞–Ω–∏–µ** (–§–∞–±—Ä–∏–∫–∞)
            r'^\d+\.\s*\*\*([^*]+)\*\*',     # 1. **–ù–∞–∑–≤–∞–Ω–∏–µ**
            r'^\d+\.\s*([^(]+)\s*\(',        # 1. –ù–∞–∑–≤–∞–Ω–∏–µ (
        ]
        
        perfume_names = []
        lines = response.split('\n')
        
        for line in lines:
            for pattern in patterns:
                match = re.search(pattern, line.strip())
                if match:
                    name = match.group(1).strip()
                    if name and name not in perfume_names:
                        perfume_names.append(name)
                    break
        
        return perfume_names

    def _is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        return user_id == ADMIN_USER_ID and ADMIN_USER_ID != 0

    def _get_admin_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–¥–º–∏–Ω—Å–∫–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
        keyboard = [
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
                InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å API", callback_data="admin_balance")
            ],
            [
                InlineKeyboardButton("üè≠ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–±—Ä–∏–∫", callback_data="admin_factory_analysis"),
                InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)

    async def _show_admin_menu(self, query_or_update) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é"""
        text = (
            "üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å!\n\n"
            "üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            "‚Ä¢ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ <b>–ë–∞–ª–∞–Ω—Å API</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ OpenRouter\n"
            "‚Ä¢ <b>–ê–Ω–∞–ª–∏–∑ —Ñ–∞–±—Ä–∏–∫</b> - –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π\n"
            "‚Ä¢ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:"
        )
        
        keyboard = self._get_admin_keyboard()
        
        if hasattr(query_or_update, 'edit_message_text'):
            await query_or_update.edit_message_text(
                text=text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        else:
            await query_or_update.message.reply_text(
                text=text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
    
    def get_user_session(self, user_id: int) -> UserSession:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = UserSession()
        return self.user_sessions[user_id]
    
    async def send_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user_id = update.effective_user.id
        is_admin = self._is_admin(user_id)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        keyboard = [
            [InlineKeyboardButton("ü§î –ü–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="perfume_question")],
            [InlineKeyboardButton("üéØ –ü–æ–¥–±–æ—Ä –ø–∞—Ä—Ñ—é–º–∞", callback_data="perfume_quiz")],
            [InlineKeyboardButton("üìñ –ß—Ç–æ –∑–∞ –∞—Ä–æ–º–∞—Ç?", callback_data="fragrance_info")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
        if is_admin:
            keyboard.append([
                InlineKeyboardButton("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu")
            ])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        stats = self._get_database_stats()
        
        user_id = update.effective_user.id
        is_admin = self._is_admin(user_id)
        
        base_text = (
            "üåü <b>–ü–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç</b>\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏.\n\n"
            "üéØ <b>–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏\n"
            "‚Ä¢ –ü–æ–¥–±–∏—Ä–∞—é –∏–¥–µ–∞–ª—å–Ω—ã–µ –∞—Ä–æ–º–∞—Ç—ã –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º\n"
            "‚Ä¢ –î–∞—é –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä–æ–º–∞—Ç–∞—Ö\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª—è—é –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞\n\n"
        )
        
        text = base_text + "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:"
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=text, 
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        else:
            message = await update.message.reply_text(
                text=text, 
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            user_session = self.get_user_session(update.effective_user.id)
            user_session.last_message_id = message.message_id
        
        return BotState.MAIN_MENU.value
    
    def _get_database_stats(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        return {
            'total_perfumes': len(self.normalized_data.get('full_data_compact', [])),
            'total_brands': len(self.normalized_data.get('quiz_reference', {}).get('brands', [])),
            'total_factories': len(self.normalized_data.get('factory_analysis', {}))
        }
    
    async def handle_perfume_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        user_session = self.get_user_session(update.effective_user.id)
        user_session.current_state = BotState.PERFUME_QUESTION
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "ü§î <b>–ü–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π –≤–æ–ø—Ä–æ—Å</b>\n\n"
            "–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏, –∏ —è –ø–æ–¥–±–µ—Ä—É –∏–¥–µ–∞–ª—å–Ω—ã–µ –∞—Ä–æ–º–∞—Ç—ã –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã!\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:</b>\n"
            "‚Ä¢ <i>–ö–∞–∫–æ–π –∞—Ä–æ–º–∞—Ç –ø–æ–¥–æ–π–¥–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥–µ–ª—å –¥–ª—è —Å—Ç–∏—Ä–∫–∏?</i>\n"
            "‚Ä¢ <i>–ß—Ç–æ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Å–≤–µ–∂–∏—Ç–µ–ª—è –≤–æ–∑–¥—É—Ö–∞?</i>\n"
            "‚Ä¢ <i>–ö–∞–∫–∏–µ –∞—Ä–æ–º–∞—Ç—ã –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –º—ã–ª–æ–≤–∞—Ä–µ–Ω–∏—è?</i>\n"
            "‚Ä¢ <i>–ü–æ—Å–æ–≤–µ—Ç—É–π —á—Ç–æ-—Ç–æ —Å–≤–µ–∂–µ–µ –∏ —Ü–∏—Ç—Ä—É—Å–æ–≤–æ–µ –¥–ª—è –ª–µ—Ç–∞</i>\n"
            "‚Ä¢ <i>–ù—É–∂–µ–Ω —Å—Ç–æ–π–∫–∏–π –º—É–∂—Å–∫–æ–π –∞—Ä–æ–º–∞—Ç –¥–ª—è –≤–µ—á–µ—Ä–∞</i>\n\n"
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:"
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        return BotState.WAITING_USER_INPUT.value
    
    async def process_perfume_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ò–ò"""
        user_question = update.message.text
        user_id = update.effective_user.id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        processing_msg = await update.message.reply_text("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –ø–æ–¥–±–∏—Ä–∞—é –∏–¥–µ–∞–ª—å–Ω—ã–µ –∞—Ä–æ–º–∞—Ç—ã...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏
            name_factory_list = self._create_enhanced_perfume_list()
            factory_analysis = self.normalized_data.get('factory_analysis', {})
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –º–æ–¥—É–ª—è
            prompt = AIPrompts.create_perfume_question_prompt(
                user_question=user_question,
                perfume_list=name_factory_list,
                factory_analysis=factory_analysis,
                limit_perfumes=LLM_LIMITS['question_list_limit'],
                limit_factories=LLM_LIMITS['factory_summary_limit']
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter
            ai_response = await self._call_openrouter_api(
                prompt, 
                max_tokens=PromptLimits.MAX_TOKENS_QUESTION,
                temperature=PromptLimits.TEMP_BALANCED
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏
            processed_response = self._process_ai_response_with_urls(ai_response)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await processing_msg.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            keyboard = [
                [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å", callback_data="perfume_question")],
                [InlineKeyboardButton("üéØ –ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑", callback_data="perfume_quiz")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            response_text = f"ü§î <b>–û—Ç–≤–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞:</b>\n\n{processed_response}"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if len(response_text) > 4000:
                parts = self._split_message(response_text, 4000)
                for i, part in enumerate(parts):
                    if i == len(parts) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
                        await update.message.reply_text(
                            text=part,
                            reply_markup=reply_markup,
                            parse_mode='HTML'
                        )
                    else:
                        await update.message.reply_text(text=part, parse_mode='HTML')
            else:
                await update.message.reply_text(
                    text=response_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            
        except Exception as e:
            await processing_msg.delete()
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
            error_prompt = AIPrompts.create_error_handling_prompt(
                error_context=str(e),
                user_input=user_question
            )
            
            try:
                error_response = await self._call_openrouter_api(
                    error_prompt, 
                    max_tokens=PromptLimits.MAX_TOKENS_ERROR
                )
                error_text = f"‚ö†Ô∏è {error_response}"
            except:
                error_text = (
                    "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
                    "‚Ä¢ –ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∞—Ä–æ–º–∞—Ç–æ–≤\n"
                    "‚Ä¢ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
                )
            
            await update.message.reply_text(
                text=error_text,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]]),
                parse_mode='HTML'
            )
        
        return BotState.MAIN_MENU.value
    
    def _split_message(self, text: str, max_length: int) -> List[str]:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏"""
        if len(text) <= max_length:
            return [text]
        
        parts = []
        current_part = ""
        
        for line in text.split('\n'):
            if len(current_part + line + '\n') <= max_length:
                current_part += line + '\n'
            else:
                if current_part:
                    parts.append(current_part.strip())
                current_part = line + '\n'
        
        if current_part:
            parts.append(current_part.strip())
        
        return parts
    
    async def start_perfume_quiz(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–≤–∏–∑ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä—Ñ—é–º–∞"""
        query = update.callback_query
        await query.answer()
        
        user_session = self.get_user_session(update.effective_user.id)
        user_session.current_state = BotState.QUIZ_IN_PROGRESS
        user_session.quiz_step = 0
        user_session.quiz_answers = {}
        
        # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞
        await self._send_quiz_question(query, user_session)
        
        return BotState.QUIZ_IN_PROGRESS.value
    
    async def _send_quiz_question(self, query_or_update, user_session: UserSession) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞"""
        logger.info(f"Requesting question for step {user_session.quiz_step}, answers: {user_session.quiz_answers}")
        current_question = self.quiz_system.get_next_question(
            user_session.quiz_answers, 
            user_session.quiz_step
        )
        
        if current_question:
            logger.info(f"Got question: {current_question.id} - {current_question.text}")
        else:
            logger.info("No more questions available - quiz should end")
        
        if current_question is None:
            # –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await self._show_quiz_results(query_or_update, user_session)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
        keyboard = []
        for i, option in enumerate(current_question.options):
            # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π callback_data –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–µ–∫—Å–∞
            callback_data = f"quiz_{current_question.key}_{i}"
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –∏–Ω–¥–µ–∫—Å–æ–º –∏ –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            user_session.callback_mapping[callback_data] = option
            keyboard.append([InlineKeyboardButton(option, callback_data=callback_data)])
        
        keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        total_questions = self.quiz_system.get_total_questions()
        progress = f"({user_session.quiz_step + 1}/{total_questions})"
        
        text = f"üéØ <b>–ü–æ–¥–±–æ—Ä –ø–∞—Ä—Ñ—é–º–∞</b> {progress}\n\n{current_question.text}"
        
        if hasattr(query_or_update, 'edit_message_text'):
            await query_or_update.edit_message_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        else:
            await query_or_update.message.reply_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
    
    async def _show_quiz_results(self, query_or_update, user_session: UserSession) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∏–∑–∞"""
        processing_text = "ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –ø–æ–¥–±–∏—Ä–∞—é –∏–¥–µ–∞–ª—å–Ω—ã–µ –∞—Ä–æ–º–∞—Ç—ã...\n\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
        
        if hasattr(query_or_update, 'edit_message_text'):
            await query_or_update.edit_message_text(text=processing_text)
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –∫–≤–∏–∑–∞
            user_profile = self.quiz_system.analyze_answers(user_session.quiz_answers)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏
            brand_name_factory_list = self._create_enhanced_perfume_list()
            factory_analysis = self.normalized_data.get('factory_analysis', {})
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            prompt = self.quiz_system.create_recommendation_prompt(
                profile=user_profile,
                available_perfumes=brand_name_factory_list,
                factory_analysis=factory_analysis
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò
            ai_response = await self._call_openrouter_api(
                prompt, 
                max_tokens=PromptLimits.MAX_TOKENS_QUIZ,
                temperature=PromptLimits.TEMP_CREATIVE
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏
            processed_response = self._process_ai_response_with_urls(ai_response)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–≤–∏–∑–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            user_session.current_state = BotState.MAIN_MENU
            user_session.quiz_step = 0
            user_session.quiz_answers = {}
            user_session.callback_mapping = {}
            
            keyboard = [
                [InlineKeyboardButton("üéØ –ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑ —Å–Ω–æ–≤–∞", callback_data="perfume_quiz")],
                [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="perfume_question")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            result_text = f"üéØ <b>–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n\n{processed_response}"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if len(result_text) > 4000:
                parts = self._split_message(result_text, 4000)
                for i, part in enumerate(parts):
                    if i == 0 and hasattr(query_or_update, 'edit_message_text'):
                        await query_or_update.edit_message_text(
                            text=part,
                            parse_mode='HTML'
                        )
                    elif i == len(parts) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
                        await query_or_update.message.reply_text(
                            text=part,
                            reply_markup=reply_markup,
                            parse_mode='HTML'
                        )
                    else:
                        await query_or_update.message.reply_text(text=part, parse_mode='HTML')
            else:
                if hasattr(query_or_update, 'edit_message_text'):
                    await query_or_update.edit_message_text(
                        text=result_text,
                        reply_markup=reply_markup,
                        parse_mode='HTML'
                    )
        
        except Exception as e:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –∞—Ä–æ–º–∞—Ç–æ–≤: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ –∫–≤–∏–∑ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é."
            keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            
            if hasattr(query_or_update, 'edit_message_text'):
                await query_or_update.edit_message_text(
                    text=error_text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
    
    async def handle_fragrance_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä–æ–º–∞—Ç–µ"""
        query = update.callback_query
        await query.answer()
        
        user_session = self.get_user_session(update.effective_user.id)
        user_session.current_state = BotState.FRAGRANCE_INFO
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "üìñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä–æ–º–∞—Ç–µ</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä–æ–º–∞—Ç–∞ –∏ –±—Ä–µ–Ω–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</b>\n"
            "‚Ä¢ <i>Tom Ford Lost Cherry</i>\n"
            "‚Ä¢ <i>Chanel Coco Mademoiselle</i>\n"
            "‚Ä¢ <i>Dior Sauvage</i>\n"
            "‚Ä¢ <i>Creed Aventus</i>\n\n"
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä–æ–º–∞—Ç–∞:"
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        return BotState.WAITING_USER_INPUT.value
    
    async def process_fragrance_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä–æ–º–∞—Ç–µ"""
        fragrance_query = update.message.text
        
        processing_msg = await update.message.reply_text("üîç –ò—â—É –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä–æ–º–∞—Ç–µ...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä–æ–º–∞—Ç–µ
            prompt = AIPrompts.create_fragrance_info_prompt(fragrance_query)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
            ai_response = await self._call_openrouter_api(
                prompt, 
                max_tokens=PromptLimits.MAX_TOKENS_INFO,
                temperature=PromptLimits.TEMP_FACTUAL
            )
            
            await processing_msg.delete()
            
            keyboard = [
                [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –µ—â–µ –∞—Ä–æ–º–∞—Ç", callback_data="fragrance_info")],
                [InlineKeyboardButton("üéØ –ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑", callback_data="perfume_quiz")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫
            formatted_response = self._format_text_for_telegram(ai_response)
            response_text = f"üìñ <b>–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n{formatted_response}"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if len(response_text) > 4000:
                parts = self._split_message(response_text, 4000)
                for i, part in enumerate(parts):
                    if i == len(parts) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
                        await update.message.reply_text(
                            text=part,
                            reply_markup=reply_markup,
                            parse_mode='HTML'
                        )
                    else:
                        await update.message.reply_text(text=part, parse_mode='HTML')
            else:
                await update.message.reply_text(
                    text=response_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            
        except Exception as e:
            await processing_msg.delete()
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]]),
                parse_mode='HTML'
            )
        
        return BotState.MAIN_MENU.value
    
    async def _call_openrouter_api(self, prompt: str, max_tokens: int = 1000, temperature: float = 0.7) -> str:
        """–í—ã–∑—ã–≤–∞–µ—Ç OpenRouter API"""
        payload = {
            "model": self.openrouter_config['model'],
            "messages": [
                {
                    "role": "system",
                    "content": AIPrompts.create_system_message()
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            "max_tokens": max_tokens,
            "temperature": temperature
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                self.openrouter_config['base_url'],
                headers=self.openrouter_config['headers'],
                json=payload
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    return data['choices'][0]['message']['content']
                else:
                    error_text = await response.text()
                    raise Exception(f"OpenRouter API error: {response.status} - {error_text}")
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        data = query.data
        user_id = update.effective_user.id
        user_session = self.get_user_session(user_id)
        
        if data == "main_menu":
            await self.send_main_menu(update, context)
            return BotState.MAIN_MENU.value
        
        elif data == "perfume_question":
            return await self.handle_perfume_question(update, context)
        
        elif data == "perfume_quiz":
            return await self.start_perfume_quiz(update, context)
        
        elif data == "fragrance_info":
            return await self.handle_fragrance_info(update, context)
        
        elif data.startswith("quiz_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∫–≤–∏–∑–∞
            parts = data.split("_", 2)
            if len(parts) >= 3:
                key = parts[1]
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
                full_answer = user_session.callback_mapping.get(data)
                if full_answer:
                    user_session.quiz_answers[key] = full_answer
                    user_session.quiz_step += 1
                    logger.info(f"Quiz step {user_session.quiz_step}/{self.quiz_system.get_total_questions()}: {key} = {full_answer}")
                    await self._send_quiz_question(query, user_session)
                else:
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è callback_data: {data}")
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å –µ—Å–ª–∏ –Ω–µ—Ç –º–∞–ø–ø–∏–Ω–≥–∞
                    user_session.quiz_step += 1
                    await self._send_quiz_question(query, user_session)
            return BotState.QUIZ_IN_PROGRESS.value
        
        elif data == "help":
            await self._show_help(query)
            return BotState.MAIN_MENU.value
        
        elif data == "admin_menu":
            if self._is_admin(update.effective_user.id):
                await self._show_admin_menu(query)
            else:
                await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return BotState.MAIN_MENU.value
        
        elif data == "admin_stats":
            if self._is_admin(update.effective_user.id):
                await self._show_statistics(query)
            else:
                await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return BotState.MAIN_MENU.value
        
        elif data == "admin_balance":
            if self._is_admin(update.effective_user.id):
                await self._show_api_balance(query)
            else:
                await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return BotState.MAIN_MENU.value
        
        elif data == "admin_factory_analysis":
            if self._is_admin(update.effective_user.id):
                await self._show_factory_analysis(query)
            else:
                await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return BotState.MAIN_MENU.value
        
        elif data == "admin_users":
            if self._is_admin(update.effective_user.id):
                await self._show_user_statistics(query)
            else:
                await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return BotState.MAIN_MENU.value
        
        return BotState.MAIN_MENU.value
    
    async def _show_statistics(self, query) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        stats_data = self.normalized_data
        
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            f"üß™ –í—Å–µ–≥–æ –∞—Ä–æ–º–∞—Ç–æ–≤: <b>{len(stats_data.get('full_data_compact', []))}</b>\n"
            f"üè∑Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π: <b>{len(stats_data.get('names_only', []))}</b>\n"
            f"üè≠ –§–∞–±—Ä–∏–∫: <b>{len(stats_data.get('factory_analysis', {}))}</b>\n"
            f"üéØ –ë—Ä–µ–Ω–¥–æ–≤: <b>{len(stats_data.get('quiz_reference', {}).get('brands', []))}</b>\n\n"
            f"<b>üèÜ –¢–æ–ø-5 —Ñ–∞–±—Ä–∏–∫ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞—Ä–æ–º–∞—Ç–æ–≤:</b>\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø —Ñ–∞–±—Ä–∏–∫
        factory_analysis = stats_data.get('factory_analysis', {})
        sorted_factories = sorted(factory_analysis.items(), key=lambda x: x[1]['perfume_count'], reverse=True)
        
        for i, (factory, data) in enumerate(sorted_factories[:5], 1):
            text += f"{i}. <b>{factory}</b>: {data['perfume_count']} –∞—Ä–æ–º–∞—Ç–æ–≤\n"
        
        text += f"\nüí° <i>–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π!</i>"
        
        keyboard = [[InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    async def _show_factory_analysis(self, query) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ñ–∞–±—Ä–∏–∫"""
        factory_analysis = self.normalized_data.get('factory_analysis', {})
        
        text = "üè≠ <b>–ê–Ω–∞–ª–∏–∑ —Ñ–∞–±—Ä–∏–∫-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π</b>\n\n"
        
        sorted_factories = sorted(factory_analysis.items(), key=lambda x: x[1]['perfume_count'], reverse=True)
        
        for factory, data in sorted_factories[:10]:
            text += f"<b>üè≠ {factory}</b>\n"
            text += f"  ‚Ä¢ –ê—Ä–æ–º–∞—Ç–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: <b>{data['perfume_count']}</b>\n"
            text += f"  ‚Ä¢ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤: <b>{len(data['brands'])}</b>\n"
            if data['quality_levels']:
                text += f"  ‚Ä¢ –£—Ä–æ–≤–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–∞: <i>{', '.join(data['quality_levels'][:3])}</i>\n"
            text += "\n"
        
        text += "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞—Ä–æ–º–∞—Ç–æ–≤!</i>"
        
        keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    async def _show_help(self, query) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
        text = (
            "‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø–∞—Ä—Ñ—é–º–µ—Ä–Ω–æ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É</b>\n\n"
            
            "<b>ü§î –ü–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π –≤–æ–ø—Ä–æ—Å</b>\n"
            "–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏. –ò–ò-—ç–∫—Å–ø–µ—Ä—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à—É –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –∏ –ø–æ–¥–±–µ—Ä–µ—Ç "
            "–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞—Ä–æ–º–∞—Ç—ã –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã —Å —É—á–µ—Ç–æ–º —Ñ–∞–±—Ä–∏–∫-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π.\n\n"
            
            "<b>üéØ –ü–æ–¥–±–æ—Ä –ø–∞—Ä—Ñ—é–º–∞</b>\n"
            "–ü—Ä–æ–π–¥–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∫–≤–∏–∑ –∏–∑ 12 –≤–æ–ø—Ä–æ—Å–æ–≤. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞—Å—Ç "
            "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–±–æ—Ä–∫—É –∏–∑ 5-7 –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∞—Ä–æ–º–∞—Ç–æ–≤.\n\n"
            
            "<b>üìñ –ß—Ç–æ –∑–∞ –∞—Ä–æ–º–∞—Ç?</b>\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª—é–±–æ–≥–æ –∞—Ä–æ–º–∞—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: –æ–ø–∏—Å–∞–Ω–∏–µ, "
            "–Ω–æ—Ç—ã, –∏—Å—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∏—è, —Å–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.\n\n"
            
            "üí° <i>–í—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞ aroma-euro.ru</i>"
        )
        
        keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    async def _show_api_balance(self, query) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± API OpenRouter"""
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
            balance_url = "https://openrouter.ai/api/v1/auth/key"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    balance_url,
                    headers=self.openrouter_config['headers']
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        balance_text = f"üí∞ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API OpenRouter:</b>\n\n"
                        balance_text += f"üîë <b>–ö–ª—é—á API:</b> –ê–∫—Ç–∏–≤–µ–Ω\n"
                        balance_text += f"ü§ñ <b>–ú–æ–¥–µ–ª—å:</b> {self.openrouter_config['model']}\n"
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ª–∏–º–∏—Ç–∞—Ö
                        if 'data' in data:
                            key_data = data['data']
                            if 'usage' in key_data:
                                usage = key_data['usage']
                                balance_text += f"üí∏ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> ${usage.get('total_cost', 'N/A')}\n"
                                balance_text += f"üìä <b>–ó–∞–ø—Ä–æ—Å–æ–≤:</b> {usage.get('requests', 'N/A')}\n"
                            
                            if 'limit' in key_data:
                                limit = key_data['limit']
                                balance_text += f"üí≥ <b>–õ–∏–º–∏—Ç:</b> ${limit.get('amount', 'N/A')}\n"
                        
                        balance_text += f"\nüìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n"
                        balance_text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞: ~$0.001-0.002\n"
                        balance_text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–≤–∏–∑–∞: ~$0.002-0.003\n"
                        balance_text += f"‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç: $5-15\n\n"
                        balance_text += f"üåê <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n"
                        balance_text += f"[OpenRouter Dashboard](https://openrouter.ai/keys)\n\n"
                        balance_text += "üí° <i>–î–ª—è —Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è OpenRouter</i>"
                        
                    else:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        balance_text = f"üí∞ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API OpenRouter:</b>\n\n"
                        balance_text += f"üîë <b>–°—Ç–∞—Ç—É—Å –∫–ª—é—á–∞:</b> –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è...\n"
                        balance_text += f"ü§ñ <b>–ú–æ–¥–µ–ª—å:</b> {self.openrouter_config['model']}\n\n"
                        balance_text += f"üìà <b>–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b>\n"
                        balance_text += f"‚Ä¢ –í–æ–ø—Ä–æ—Å: ~$0.001-0.002\n"
                        balance_text += f"‚Ä¢ –ö–≤–∏–∑: ~$0.002-0.003\n"
                        balance_text += f"‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä–æ–º–∞—Ç–µ: ~$0.001-0.002\n\n"
                        balance_text += f"üåê <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å:</b>\n"
                        balance_text += f"[OpenRouter Dashboard](https://openrouter.ai/keys)\n\n"
                        balance_text += "üí° <i>–î–ª—è —Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è OpenRouter</i>"
            
            keyboard = [[InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text=balance_text,
                reply_markup=reply_markup,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± API: {e}")
            error_text = (
                "üí∞ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API OpenRouter:</b>\n\n"
                f"ü§ñ <b>–ú–æ–¥–µ–ª—å:</b> {self.openrouter_config['model']}\n\n"
                f"üìà <b>–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b>\n"
                f"‚Ä¢ –ü–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π –≤–æ–ø—Ä–æ—Å: ~$0.001-0.002\n"
                f"‚Ä¢ –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–≤–∏–∑–∞: ~$0.002-0.003\n"
                f"‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä–æ–º–∞—Ç–µ: ~$0.001-0.002\n\n"
                f"üåê <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b>\n"
                f"[OpenRouter Dashboard](https://openrouter.ai/keys)\n\n"
                f"üí° <i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç: $5-15</i>\n\n"
                f"‚ö†Ô∏è <i>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.</i>"
            )
            keyboard = [[InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                text=error_text,
                reply_markup=reply_markup,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
    
    async def _show_user_statistics(self, query) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        try:
            total_users = len(self.user_sessions)
            active_sessions = sum(1 for session in self.user_sessions.values() 
                                if session.current_state != BotState.MAIN_MENU)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
            state_stats = {}
            for session in self.user_sessions.values():
                state = session.current_state.name if hasattr(session.current_state, 'name') else str(session.current_state)
                state_stats[state] = state_stats.get(state, 0) + 1
            
            stats_text = f"üë• <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
            stats_text += f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
            stats_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: <b>{active_sessions}</b>\n\n"
            
            if state_stats:
                stats_text += f"üìà <b>–ü–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º:</b>\n"
                for state, count in state_stats.items():
                    stats_text += f"‚Ä¢ {state}: <b>{count}</b>\n"
            
            stats_text += f"\nüí° <i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</i>"
            
            keyboard = [[InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text=stats_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            error_text = (
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            keyboard = [[InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                text=error_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
    
    def create_application(self) -> Application:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram –±–æ—Ç–∞"""
        application = Application.builder().token(self.bot_token).build()
        
        # Conversation handler –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", self.send_main_menu)],
            states={
                BotState.MAIN_MENU.value: [
                    CallbackQueryHandler(self.handle_callback_query)
                ],
                BotState.WAITING_USER_INPUT.value: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.process_user_input),
                    CallbackQueryHandler(self.handle_callback_query)
                ],
                BotState.QUIZ_IN_PROGRESS.value: [
                    CallbackQueryHandler(self.handle_callback_query)
                ],
            },
            fallbacks=[
                CommandHandler("start", self.send_main_menu),
                CallbackQueryHandler(self.handle_callback_query)
            ],
            per_message=False,
        )
        
        application.add_handler(conv_handler)
        return application
    
    async def process_user_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        user_session = self.get_user_session(update.effective_user.id)
        
        if user_session.current_state == BotState.PERFUME_QUESTION:
            return await self.process_perfume_question(update, context)
        elif user_session.current_state == BotState.FRAGRANCE_INFO:
            return await self.process_fragrance_info(update, context)
        
        return BotState.MAIN_MENU.value

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE" or OPENROUTER_API_KEY == "YOUR_OPENROUTER_API_KEY_HERE":
        logger.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ .env")
        logger.error("üìù –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ —Ç–æ–∫–µ–Ω—ã")
        return
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Ñ—é–º–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞...")
    logger.info("üìö –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        bot = PerfumeConsultantBot(BOT_TOKEN, OPENROUTER_API_KEY)
        application = bot.create_application()
        
        logger.info("‚úÖ –ü–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞—Ä–æ–º–∞—Ç–æ–≤: {len(bot.normalized_data.get('full_data_compact', []))}")
        logger.info(f"üè≠ –§–∞–±—Ä–∏–∫ –≤ –±–∞–∑–µ: {len(bot.normalized_data.get('factory_analysis', {}))}")
        logger.info("ü§ñ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        logger.info("üí¨ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()