#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import json
import asyncio
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from enum import Enum

import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    MessageHandler, filters, ContextTypes, ConversationHandler
)

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from config import BOT_TOKEN, OPENROUTER_API_KEY, OPENROUTER_CONFIG, DATA_FILES, LLM_LIMITS
from quiz_system import PerfumeQuizSystem, create_quiz_system
from ai_prompts import AIPrompts, PromptLimits

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('perfume_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
class BotState(Enum):
    MAIN_MENU = 0
    PERFUME_QUESTION = 1
    QUIZ_IN_PROGRESS = 2
    FRAGRANCE_INFO = 3
    WAITING_USER_INPUT = 4

@dataclass
class UserSession:
    """–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏"""
    current_state: BotState = BotState.MAIN_MENU
    quiz_answers: Dict[str, Any] = None
    quiz_step: int = 0
    last_message_id: Optional[int] = None
    context_data: Dict[str, Any] = None
    
    def __post_init__(self):
        if self.quiz_answers is None:
            self.quiz_answers = {}
        if self.context_data is None:
            self.context_data = {}

class PerfumeConsultantBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø–∞—Ä—Ñ—é–º–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
    
    def __init__(self, bot_token: str, openrouter_api_key: str):
        self.bot_token = bot_token
        self.openrouter_api_key = openrouter_api_key
        self.user_sessions: Dict[int, UserSession] = {}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.normalized_data = self._load_normalized_data()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∫–≤–∏–∑–∞
        self.quiz_system = create_quiz_system()
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenRouter
        self.openrouter_config = {
            'base_url': OPENROUTER_CONFIG['base_url'],
            'model': OPENROUTER_CONFIG['model'],
            'headers': {
                'Authorization': f'Bearer {openrouter_api_key}',
                'Content-Type': 'application/json'
            }
        }
        
        logger.info("‚úÖ –ü–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _load_normalized_data(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        data = {}
        
        for key, filename in DATA_FILES.items():
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    data[key] = json.load(f)
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {filename}")
            except FileNotFoundError:
                logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
                data[key] = [] if 'json' in filename else {}
        
        return data
    
    def get_user_session(self, user_id: int) -> UserSession:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = UserSession()
        return self.user_sessions[user_id]
    
    async def send_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [
                InlineKeyboardButton("ü§î –ü–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="perfume_question"),
                InlineKeyboardButton("üéØ –ü–æ–¥–±–æ—Ä –ø–∞—Ä—Ñ—é–º–∞", callback_data="perfume_quiz")
            ],
            [
                InlineKeyboardButton("üìñ –ß—Ç–æ –∑–∞ –∞—Ä–æ–º–∞—Ç?", callback_data="fragrance_info"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
            ],
            [
                InlineKeyboardButton("üè≠ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–±—Ä–∏–∫", callback_data="factory_analysis"),
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        stats = self._get_database_stats()
        
        text = (
            "üåü <b>–ü–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç</b>\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏.\n\n"
            "üéØ <b>–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏\n"
            "‚Ä¢ –ü–æ–¥–±–∏—Ä–∞—é –∏–¥–µ–∞–ª—å–Ω—ã–µ –∞—Ä–æ–º–∞—Ç—ã –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º\n"
            "‚Ä¢ –î–∞—é –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä–æ–º–∞—Ç–∞—Ö\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–±—Ä–∏–∫–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏\n\n"
            f"üìö <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b>\n"
            f"‚Ä¢ –ê—Ä–æ–º–∞—Ç–æ–≤: <b>{stats['total_perfumes']}</b>\n"
            f"‚Ä¢ –ë—Ä–µ–Ω–¥–æ–≤: <b>{stats['total_brands']}</b>\n"
            f"‚Ä¢ –§–∞–±—Ä–∏–∫: <b>{stats['total_factories']}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:"
        )
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=text, 
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        else:
            message = await update.message.reply_text(
                text=text, 
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            user_session = self.get_user_session(update.effective_user.id)
            user_session.last_message_id = message.message_id
        
        return BotState.MAIN_MENU.value
    
    def _get_database_stats(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        return {
            'total_perfumes': len(self.normalized_data.get('full_data_compact', [])),
            'total_brands': len(self.normalized_data.get('quiz_reference', {}).get('brands', [])),
            'total_factories': len(self.normalized_data.get('factory_analysis', {}))
        }
    
    async def handle_perfume_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        user_session = self.get_user_session(update.effective_user.id)
        user_session.current_state = BotState.PERFUME_QUESTION
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "ü§î <b>–ü–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π –≤–æ–ø—Ä–æ—Å</b>\n\n"
            "–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏, –∏ —è –ø–æ–¥–±–µ—Ä—É –∏–¥–µ–∞–ª—å–Ω—ã–µ –∞—Ä–æ–º–∞—Ç—ã –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã!\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:</b>\n"
            "‚Ä¢ <i>–ö–∞–∫–æ–π –∞—Ä–æ–º–∞—Ç –ø–æ–¥–æ–π–¥–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥–µ–ª—å –¥–ª—è —Å—Ç–∏—Ä–∫–∏?</i>\n"
            "‚Ä¢ <i>–ß—Ç–æ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Å–≤–µ–∂–∏—Ç–µ–ª—è –≤–æ–∑–¥—É—Ö–∞?</i>\n"
            "‚Ä¢ <i>–ö–∞–∫–∏–µ –∞—Ä–æ–º–∞—Ç—ã –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –º—ã–ª–æ–≤–∞—Ä–µ–Ω–∏—è?</i>\n"
            "‚Ä¢ <i>–ü–æ—Å–æ–≤–µ—Ç—É–π —á—Ç–æ-—Ç–æ —Å–≤–µ–∂–µ–µ –∏ —Ü–∏—Ç—Ä—É—Å–æ–≤–æ–µ –¥–ª—è –ª–µ—Ç–∞</i>\n"
            "‚Ä¢ <i>–ù—É–∂–µ–Ω —Å—Ç–æ–π–∫–∏–π –º—É–∂—Å–∫–æ–π –∞—Ä–æ–º–∞—Ç –¥–ª—è –≤–µ—á–µ—Ä–∞</i>\n\n"
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:"
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        return BotState.WAITING_USER_INPUT.value
    
    async def process_perfume_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ò–ò"""
        user_question = update.message.text
        user_id = update.effective_user.id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        processing_msg = await update.message.reply_text("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –ø–æ–¥–±–∏—Ä–∞—é –∏–¥–µ–∞–ª—å–Ω—ã–µ –∞—Ä–æ–º–∞—Ç—ã...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
            name_factory_list = self.normalized_data.get('name_factory', [])
            factory_analysis = self.normalized_data.get('factory_analysis', {})
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –º–æ–¥—É–ª—è
            prompt = AIPrompts.create_perfume_question_prompt(
                user_question=user_question,
                perfume_list=name_factory_list,
                factory_analysis=factory_analysis,
                limit_perfumes=LLM_LIMITS['question_list_limit'],
                limit_factories=LLM_LIMITS['factory_summary_limit']
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter
            ai_response = await self._call_openrouter_api(
                prompt, 
                max_tokens=PromptLimits.MAX_TOKENS_QUESTION,
                temperature=PromptLimits.TEMP_BALANCED
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await processing_msg.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            keyboard = [
                [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å", callback_data="perfume_question")],
                [InlineKeyboardButton("üéØ –ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑", callback_data="perfume_quiz")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            response_text = f"ü§î <b>–û—Ç–≤–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞:</b>\n\n{ai_response}"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if len(response_text) > 4000:
                parts = self._split_message(response_text, 4000)
                for i, part in enumerate(parts):
                    if i == len(parts) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
                        await update.message.reply_text(
                            text=part,
                            reply_markup=reply_markup,
                            parse_mode='HTML'
                        )
                    else:
                        await update.message.reply_text(text=part, parse_mode='HTML')
            else:
                await update.message.reply_text(
                    text=response_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            
        except Exception as e:
            await processing_msg.delete()
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
            error_prompt = AIPrompts.create_error_handling_prompt(
                error_context=str(e),
                user_input=user_question
            )
            
            try:
                error_response = await self._call_openrouter_api(
                    error_prompt, 
                    max_tokens=PromptLimits.MAX_TOKENS_ERROR
                )
                error_text = f"‚ö†Ô∏è {error_response}"
            except:
                error_text = (
                    "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
                    "‚Ä¢ –ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∞—Ä–æ–º–∞—Ç–æ–≤\n"
                    "‚Ä¢ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
                )
            
            await update.message.reply_text(
                text=error_text,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]]),
                parse_mode='HTML'
            )
        
        return BotState.MAIN_MENU.value
    
    def _split_message(self, text: str, max_length: int) -> List[str]:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏"""
        if len(text) <= max_length:
            return [text]
        
        parts = []
        current_part = ""
        
        for line in text.split('\n'):
            if len(current_part + line + '\n') <= max_length:
                current_part += line + '\n'
            else:
                if current_part:
                    parts.append(current_part.strip())
                current_part = line + '\n'
        
        if current_part:
            parts.append(current_part.strip())
        
        return parts
    
    async def start_perfume_quiz(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–≤–∏–∑ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä—Ñ—é–º–∞"""
        query = update.callback_query
        await query.answer()
        
        user_session = self.get_user_session(update.effective_user.id)
        user_session.current_state = BotState.QUIZ_IN_PROGRESS
        user_session.quiz_step = 0
        user_session.quiz_answers = {}
        
        # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞
        await self._send_quiz_question(query, user_session)
        
        return BotState.QUIZ_IN_PROGRESS.value
    
    async def _send_quiz_question(self, query_or_update, user_session: UserSession) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞"""
        current_question = self.quiz_system.get_next_question(
            user_session.quiz_answers, 
            user_session.quiz_step
        )
        
        if current_question is None:
            # –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await self._show_quiz_results(query_or_update, user_session)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
        keyboard = []
        for option in current_question.options:
            callback_data = f"quiz_{current_question.key}_{option}"
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É callback_data
            if len(callback_data) > 64:
                callback_data = callback_data[:64]
            keyboard.append([InlineKeyboardButton(option, callback_data=callback_data)])
        
        keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        total_questions = self.quiz_system.get_total_questions()
        progress = f"({user_session.quiz_step + 1}/{total_questions})"
        
        text = f"üéØ <b>–ü–æ–¥–±–æ—Ä –ø–∞—Ä—Ñ—é–º–∞</b> {progress}\n\n{current_question.text}"
        
        if hasattr(query_or_update, 'edit_message_text'):
            await query_or_update.edit_message_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        else:
            await query_or_update.message.reply_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
    
    async def _show_quiz_results(self, query_or_update, user_session: UserSession) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∏–∑–∞"""
        processing_text = "ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –ø–æ–¥–±–∏—Ä–∞—é –∏–¥–µ–∞–ª—å–Ω—ã–µ –∞—Ä–æ–º–∞—Ç—ã...\n\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
        
        if hasattr(query_or_update, 'edit_message_text'):
            await query_or_update.edit_message_text(text=processing_text)
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –∫–≤–∏–∑–∞
            user_profile = self.quiz_system.analyze_answers(user_session.quiz_answers)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            brand_name_factory_list = self.normalized_data.get('brand_name_factory', [])
            factory_analysis = self.normalized_data.get('factory_analysis', {})
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            prompt = self.quiz_system.create_recommendation_prompt(
                profile=user_profile,
                available_perfumes=brand_name_factory_list,
                factory_analysis=factory_analysis
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò
            ai_response = await self._call_openrouter_api(
                prompt, 
                max_tokens=PromptLimits.MAX_TOKENS_QUIZ,
                temperature=PromptLimits.TEMP_CREATIVE
            )
            
            keyboard = [
                [InlineKeyboardButton("üéØ –ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑ —Å–Ω–æ–≤–∞", callback_data="perfume_quiz")],
                [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="perfume_question")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            result_text = f"üéØ <b>–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n\n{ai_response}"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if len(result_text) > 4000:
                parts = self._split_message(result_text, 4000)
                for i, part in enumerate(parts):
                    if i == 0 and hasattr(query_or_update, 'edit_message_text'):
                        await query_or_update.edit_message_text(
                            text=part,
                            parse_mode='HTML'
                        )
                    elif i == len(parts) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
                        await query_or_update.message.reply_text(
                            text=part,
                            reply_markup=reply_markup,
                            parse_mode='HTML'
                        )
                    else:
                        await query_or_update.message.reply_text(text=part, parse_mode='HTML')
            else:
                if hasattr(query_or_update, 'edit_message_text'):
                    await query_or_update.edit_message_text(
                        text=result_text,
                        reply_markup=reply_markup,
                        parse_mode='HTML'
                    )
        
        except Exception as e:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –∞—Ä–æ–º–∞—Ç–æ–≤: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ –∫–≤–∏–∑ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é."
            keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            
            if hasattr(query_or_update, 'edit_message_text'):
                await query_or_update.edit_message_text(
                    text=error_text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
    
    async def handle_fragrance_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä–æ–º–∞—Ç–µ"""
        query = update.callback_query
        await query.answer()
        
        user_session = self.get_user_session(update.effective_user.id)
        user_session.current_state = BotState.FRAGRANCE_INFO
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "üìñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä–æ–º–∞—Ç–µ</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä–æ–º–∞—Ç–∞ –∏ –±—Ä–µ–Ω–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</b>\n"
            "‚Ä¢ <i>Tom Ford Lost Cherry</i>\n"
            "‚Ä¢ <i>Chanel Coco Mademoiselle</i>\n"
            "‚Ä¢ <i>Dior Sauvage</i>\n"
            "‚Ä¢ <i>Creed Aventus</i>\n\n"
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä–æ–º–∞—Ç–∞:"
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        return BotState.WAITING_USER_INPUT.value
    
    async def process_fragrance_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä–æ–º–∞—Ç–µ"""
        fragrance_query = update.message.text
        
        processing_msg = await update.message.reply_text("üîç –ò—â—É –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä–æ–º–∞—Ç–µ...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä–æ–º–∞—Ç–µ
            prompt = AIPrompts.create_fragrance_info_prompt(fragrance_query)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
            ai_response = await self._call_openrouter_api(
                prompt, 
                max_tokens=PromptLimits.MAX_TOKENS_INFO,
                temperature=PromptLimits.TEMP_FACTUAL
            )
            
            await processing_msg.delete()
            
            keyboard = [
                [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –µ—â–µ –∞—Ä–æ–º–∞—Ç", callback_data="fragrance_info")],
                [InlineKeyboardButton("üéØ –ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑", callback_data="perfume_quiz")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            response_text = f"üìñ <b>–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n{ai_response}"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if len(response_text) > 4000:
                parts = self._split_message(response_text, 4000)
                for i, part in enumerate(parts):
                    if i == len(parts) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
                        await update.message.reply_text(
                            text=part,
                            reply_markup=reply_markup,
                            parse_mode='HTML'
                        )
                    else:
                        await update.message.reply_text(text=part, parse_mode='HTML')
            else:
                await update.message.reply_text(
                    text=response_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            
        except Exception as e:
            await processing_msg.delete()
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]]),
                parse_mode='HTML'
            )
        
        return BotState.MAIN_MENU.value
    
    async def _call_openrouter_api(self, prompt: str, max_tokens: int = 1000, temperature: float = 0.7) -> str:
        """–í—ã–∑—ã–≤–∞–µ—Ç OpenRouter API"""
        payload = {
            "model": self.openrouter_config['model'],
            "messages": [
                {
                    "role": "system",
                    "content": AIPrompts.create_system_message()
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            "max_tokens": max_tokens,
            "temperature": temperature
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                self.openrouter_config['base_url'],
                headers=self.openrouter_config['headers'],
                json=payload
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    return data['choices'][0]['message']['content']
                else:
                    error_text = await response.text()
                    raise Exception(f"OpenRouter API error: {response.status} - {error_text}")
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        data = query.data
        user_id = update.effective_user.id
        user_session = self.get_user_session(user_id)
        
        if data == "main_menu":
            await self.send_main_menu(update, context)
            return BotState.MAIN_MENU.value
        
        elif data == "perfume_question":
            return await self.handle_perfume_question(update, context)
        
        elif data == "perfume_quiz":
            return await self.start_perfume_quiz(update, context)
        
        elif data == "fragrance_info":
            return await self.handle_fragrance_info(update, context)
        
        elif data.startswith("quiz_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∫–≤–∏–∑–∞
            parts = data.split("_", 2)
            if len(parts) >= 3:
                key = parts[1]
                value = parts[2]
                user_session.quiz_answers[key] = value
                user_session.quiz_step += 1
                await self._send_quiz_question(query, user_session)
            return BotState.QUIZ_IN_PROGRESS.value
        
        elif data == "stats":
            await self._show_statistics(query)
            return BotState.MAIN_MENU.value
        
        elif data == "factory_analysis":
            await self._show_factory_analysis(query)
            return BotState.MAIN_MENU.value
        
        elif data == "help":
            await self._show_help(query)
            return BotState.MAIN_MENU.value
        
        return BotState.MAIN_MENU.value
    
    async def _show_statistics(self, query) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        stats_data = self.normalized_data
        
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            f"üß™ –í—Å–µ–≥–æ –∞—Ä–æ–º–∞—Ç–æ–≤: <b>{len(stats_data.get('full_data_compact', []))}</b>\n"
            f"üè∑Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π: <b>{len(stats_data.get('names_only', []))}</b>\n"
            f"üè≠ –§–∞–±—Ä–∏–∫: <b>{len(stats_data.get('factory_analysis', {}))}</b>\n"
            f"üéØ –ë—Ä–µ–Ω–¥–æ–≤: <b>{len(stats_data.get('quiz_reference', {}).get('brands', []))}</b>\n\n"
            f"<b>üèÜ –¢–æ–ø-5 —Ñ–∞–±—Ä–∏–∫ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞—Ä–æ–º–∞—Ç–æ–≤:</b>\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø —Ñ–∞–±—Ä–∏–∫
        factory_analysis = stats_data.get('factory_analysis', {})
        sorted_factories = sorted(factory_analysis.items(), key=lambda x: x[1]['perfume_count'], reverse=True)
        
        for i, (factory, data) in enumerate(sorted_factories[:5], 1):
            text += f"{i}. <b>{factory}</b>: {data['perfume_count']} –∞—Ä–æ–º–∞—Ç–æ–≤\n"
        
        text += f"\nüí° <i>–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π!</i>"
        
        keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    async def _show_factory_analysis(self, query) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ñ–∞–±—Ä–∏–∫"""
        factory_analysis = self.normalized_data.get('factory_analysis', {})
        
        text = "üè≠ <b>–ê–Ω–∞–ª–∏–∑ —Ñ–∞–±—Ä–∏–∫-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π</b>\n\n"
        
        sorted_factories = sorted(factory_analysis.items(), key=lambda x: x[1]['perfume_count'], reverse=True)
        
        for factory, data in sorted_factories[:10]:
            text += f"<b>üè≠ {factory}</b>\n"
            text += f"  ‚Ä¢ –ê—Ä–æ–º–∞—Ç–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: <b>{data['perfume_count']}</b>\n"
            text += f"  ‚Ä¢ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤: <b>{len(data['brands'])}</b>\n"
            if data['quality_levels']:
                text += f"  ‚Ä¢ –£—Ä–æ–≤–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–∞: <i>{', '.join(data['quality_levels'][:3])}</i>\n"
            text += "\n"
        
        text += "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞—Ä–æ–º–∞—Ç–æ–≤!</i>"
        
        keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    async def _show_help(self, query) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
        text = (
            "‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø–∞—Ä—Ñ—é–º–µ—Ä–Ω–æ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É</b>\n\n"
            
            "<b>ü§î –ü–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π –≤–æ–ø—Ä–æ—Å</b>\n"
            "–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏. –ò–ò-—ç–∫—Å–ø–µ—Ä—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à—É –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –∏ –ø–æ–¥–±–µ—Ä–µ—Ç "
            "–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞—Ä–æ–º–∞—Ç—ã –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã —Å —É—á–µ—Ç–æ–º —Ñ–∞–±—Ä–∏–∫-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π.\n\n"
            
            "<b>üéØ –ü–æ–¥–±–æ—Ä –ø–∞—Ä—Ñ—é–º–∞</b>\n"
            "–ü—Ä–æ–π–¥–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∫–≤–∏–∑ –∏–∑ 12 –≤–æ–ø—Ä–æ—Å–æ–≤. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞—Å—Ç "
            "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–±–æ—Ä–∫—É –∏–∑ 5-7 –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∞—Ä–æ–º–∞—Ç–æ–≤.\n\n"
            
            "<b>üìñ –ß—Ç–æ –∑–∞ –∞—Ä–æ–º–∞—Ç?</b>\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª—é–±–æ–≥–æ –∞—Ä–æ–º–∞—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: –æ–ø–∏—Å–∞–Ω–∏–µ, "
            "–Ω–æ—Ç—ã, –∏—Å—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∏—è, —Å–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.\n\n"
            
            "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
            "–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–æ–º–∞—Ç–æ–≤, –±—Ä–µ–Ω–¥–æ–≤, —Ñ–∞–±—Ä–∏–∫.\n\n"
            
            "<b>üè≠ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–±—Ä–∏–∫</b>\n"
            "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–±—Ä–∏–∫–∞—Ö-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è—Ö –ø–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã—Ö –∫–æ–º–ø–æ–∑–∏—Ü–∏–π.\n\n"
            
            "<b>ü§ñ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>\n"
            "‚Ä¢ –ë–∞–∑–∞: 1200+ –∞—Ä–æ–º–∞—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π\n"
            "‚Ä¢ –ò–ò: Claude 3 Haiku —á–µ—Ä–µ–∑ OpenRouter\n"
            "‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤\n\n"
            
            "üí° <i>–í—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞ aroma-euro.ru</i>"
        )
        
        keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    def create_application(self) -> Application:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram –±–æ—Ç–∞"""
        application = Application.builder().token(self.bot_token).build()
        
        # Conversation handler –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", self.send_main_menu)],
            states={
                BotState.MAIN_MENU.value: [
                    CallbackQueryHandler(self.handle_callback_query)
                ],
                BotState.WAITING_USER_INPUT.value: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.process_user_input),
                    CallbackQueryHandler(self.handle_callback_query)
                ],
                BotState.QUIZ_IN_PROGRESS.value: [
                    CallbackQueryHandler(self.handle_callback_query)
                ],
            },
            fallbacks=[
                CommandHandler("start", self.send_main_menu),
                CallbackQueryHandler(self.handle_callback_query)
            ],
        )
        
        application.add_handler(conv_handler)
        return application
    
    async def process_user_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        user_session = self.get_user_session(update.effective_user.id)
        
        if user_session.current_state == BotState.PERFUME_QUESTION:
            return await self.process_perfume_question(update, context)
        elif user_session.current_state == BotState.FRAGRANCE_INFO:
            return await self.process_fragrance_info(update, context)
        
        return BotState.MAIN_MENU.value

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE" or OPENROUTER_API_KEY == "YOUR_OPENROUTER_API_KEY_HERE":
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ .env")
        print("üìù –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ —Ç–æ–∫–µ–Ω—ã")
        return
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Ñ—é–º–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞...")
    print("üìö –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        bot = PerfumeConsultantBot(BOT_TOKEN, OPENROUTER_API_KEY)
        application = bot.create_application()
        
        print("‚úÖ –ü–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞—Ä–æ–º–∞—Ç–æ–≤: {len(bot.normalized_data.get('full_data_compact', []))}")
        print(f"üè≠ –§–∞–±—Ä–∏–∫ –≤ –±–∞–∑–µ: {len(bot.normalized_data.get('factory_analysis', {}))}")
        print("ü§ñ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        print("üí¨ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()