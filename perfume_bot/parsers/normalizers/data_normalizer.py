#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import re
from typing import Dict, List, Set, Any, Optional
from collections import defaultdict, Counter
from dataclasses import dataclass
from datetime import datetime
from pathlib import Path

from ...core.config import config
from ...core.logger import get_logger

logger = get_logger("perfume_bot.data")

@dataclass
class NormalizedPerfume:
    """–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞—Ä—Ñ—é–º–∞"""
    name: str
    brand: str
    factory: str
    url: str
    article: Optional[str] = None
    price: Optional[float] = None
    volume: Optional[str] = None
    description: Optional[str] = None
    category: Optional[str] = None
    gender: Optional[str] = None
    notes: List[str] = None
    availability: bool = True
    image_url: Optional[str] = None
    rating: Optional[float] = None
    reviews_count: Optional[int] = None
    
    def __post_init__(self):
        if self.notes is None:
            self.notes = []

class PerfumeDataNormalizer:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ñ—é–º–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ LLM –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self):
        self.raw_data = None
        self.normalized_perfumes = []
        self.factory_stats = {}
        self.brand_stats = {}
        
    def load_raw_data(self, filepath: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        with open(filepath, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        self.raw_data = data
        logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(data.get('perfumes', []))} –ø–∞—Ä—Ñ—é–º–æ–≤")
        return data
    
    def normalize_all_data(self) -> Dict[str, Any]:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
        if not self.raw_data:
            raise ValueError("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        logger.info("üîß –ù–∞—á–∏–Ω–∞—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–∞—Ä—Ñ—é–º—ã
        self.normalized_perfumes = self._normalize_perfumes()
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.factory_stats = self._create_factory_stats()
        self.brand_stats = self._create_brand_stats()
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è LLM
        normalized_data = {
            "metadata": {
                "timestamp": datetime.now().isoformat(),
                "total_perfumes": len(self.normalized_perfumes),
                "total_brands": len(self.brand_stats),
                "total_factories": len(self.factory_stats),
                "normalizer_version": "2.0.0"
            },
            "perfumes": [self._perfume_to_dict(p) for p in self.normalized_perfumes],
            "factory_analysis": self.factory_stats,
            "brand_analysis": self.brand_stats,
            
            # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è LLM –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            "names_only": self._create_names_only_list(),
            "brand_name": self._create_brand_name_list(),
            "name_factory": self._create_name_factory_list(),
            "brand_name_factory": self._create_brand_name_factory_list(),
            "full_data_compact": self._create_compact_data(),
            "quiz_reference": self._create_quiz_reference()
        }
        
        logger.info("‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return normalized_data
    
    def _normalize_perfumes(self) -> List[NormalizedPerfume]:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ñ—é–º–æ–≤"""
        normalized = []
        seen_combinations = set()
        
        for perfume_data in self.raw_data.get('perfumes', []):
            try:
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
                normalized_perfume = self._normalize_single_perfume(perfume_data)
                
                if normalized_perfume:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å (–±—Ä–µ–Ω–¥ + –Ω–∞–∑–≤–∞–Ω–∏–µ)
                    combination = f"{normalized_perfume.brand}|{normalized_perfume.name}"
                    if combination not in seen_combinations:
                        normalized.append(normalized_perfume)
                        seen_combinations.add(combination)
                    else:
                        logger.debug(f"‚ö†Ô∏è –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –ø–∞—Ä—Ñ—é–º: {combination}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Ñ—é–º–∞: {e}")
                continue
        
        logger.info(f"‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ {len(normalized)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä—Ñ—é–º–æ–≤")
        return normalized
    
    def _normalize_single_perfume(self, data: Dict[str, Any]) -> Optional[NormalizedPerfume]:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä—Ñ—é–º–∞"""
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        name = self._clean_text(data.get('name', ''))
        brand = self._clean_text(data.get('brand', ''))
        url = data.get('url', '')
        
        if not name or not brand or not url:
            return None
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É
        factory = self._normalize_factory(data.get('factory', 'Unknown Factory'))
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        article = self._clean_text(data.get('article'))
        price = self._normalize_price(data.get('price'))
        volume = self._normalize_volume(data.get('volume'))
        description = self._clean_description(data.get('description'))
        category = self._normalize_category(data.get('category'))
        gender = self._normalize_gender(data.get('gender'), name)
        notes = self._normalize_notes(data.get('notes', []))
        availability = bool(data.get('availability', True))
        image_url = data.get('image_url')
        rating = self._normalize_rating(data.get('rating'))
        reviews_count = self._normalize_reviews_count(data.get('reviews_count'))
        
        return NormalizedPerfume(
            name=name,
            brand=brand,
            factory=factory,
            url=url,
            article=article,
            price=price,
            volume=volume,
            description=description,
            category=category,
            gender=gender,
            notes=notes,
            availability=availability,
            image_url=image_url,
            rating=rating,
            reviews_count=reviews_count
        )
    
    def _clean_text(self, text: Any) -> str:
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        if not text:
            return ""
        
        text = str(text).strip()
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r'\s+', ' ', text)
        # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
        text = re.sub(r'<[^>]+>', '', text)
        # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        text = text.strip('.,;:!?-_+=[]{}()')
        
        return text
    
    def _normalize_factory(self, factory: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏"""
        if not factory or factory.lower() in ['unknown', 'unknown factory', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ']:
            return 'Unknown Factory'
        
        factory = self._clean_text(factory)
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–±—Ä–∏–∫
        factory_mapping = {
            '—Å–µ–ª—É–∑': 'SELUZ',
            'seluz': 'SELUZ',
            '–ø–∞—Ä—Ñ—é–º –ª–∏–¥–µ—Ä': '–ü–∞—Ä—Ñ—é–º –õ–∏–¥–µ—Ä',
            'perfume leader': '–ü–∞—Ä—Ñ—é–º –õ–∏–¥–µ—Ä',
            '–ø–∞—Ä—Ñ—é–º–µ—Ä': '–ü–∞—Ä—Ñ—é–º–µ—Ä',
            'parfumer': '–ü–∞—Ä—Ñ—é–º–µ—Ä',
            '—Ä—Ñ': '–†–§',
            'rf': '–†–§',
            '—Ä–æ—Å—Å–∏—è': '–†–æ—Å—Å–∏—è',
            'russia': '–†–æ—Å—Å–∏—è'
        }
        
        factory_lower = factory.lower()
        for key, value in factory_mapping.items():
            if key in factory_lower:
                return value
        
        return factory.title()
    
    def _normalize_price(self, price: Any) -> Optional[float]:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ü–µ–Ω—É"""
        if price is None:
            return None
        
        try:
            if isinstance(price, str):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                price_match = re.search(r'(\d+(?:\.\d+)?)', price.replace(',', '.'))
                if price_match:
                    price = float(price_match.group(1))
                else:
                    return None
            
            price = float(price)
            return price if price > 0 else None
            
        except (ValueError, TypeError):
            return None
    
    def _normalize_volume(self, volume: Any) -> Optional[str]:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –æ–±—ä–µ–º"""
        if not volume:
            return None
        
        volume_str = str(volume).lower()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
        volume_match = re.search(r'(\d+)\s*(ml|–º–ª)', volume_str)
        if volume_match:
            number = volume_match.group(1)
            return f"{number} –º–ª"
        
        return None
    
    def _clean_description(self, description: Any) -> Optional[str]:
        """–û—á–∏—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ"""
        if not description:
            return None
        
        description = self._clean_text(description)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(description) > 300:
            description = description[:297] + "..."
        
        return description if len(description) > 10 else None
    
    def _normalize_category(self, category: Any) -> Optional[str]:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
        if not category:
            return None
        
        category = self._clean_text(category)
        
        # –°–ª–æ–≤–∞—Ä—å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_mapping = {
            '–ø–∞—Ä—Ñ—é–º': '–ü–∞—Ä—Ñ—é–º',
            'perfume': '–ü–∞—Ä—Ñ—é–º',
            '—Ç—É–∞–ª–µ—Ç–Ω–∞—è –≤–æ–¥–∞': '–¢—É–∞–ª–µ—Ç–Ω–∞—è –≤–æ–¥–∞',
            'eau de toilette': '–¢—É–∞–ª–µ—Ç–Ω–∞—è –≤–æ–¥–∞',
            '–ø–∞—Ä—Ñ—é–º–µ—Ä–Ω–∞—è –≤–æ–¥–∞': '–ü–∞—Ä—Ñ—é–º–µ—Ä–Ω–∞—è –≤–æ–¥–∞',
            'eau de parfum': '–ü–∞—Ä—Ñ—é–º–µ—Ä–Ω–∞—è –≤–æ–¥–∞',
            '–æ–¥–µ–∫–æ–ª–æ–Ω': '–û–¥–µ–∫–æ–ª–æ–Ω',
            'cologne': '–û–¥–µ–∫–æ–ª–æ–Ω'
        }
        
        category_lower = category.lower()
        for key, value in category_mapping.items():
            if key in category_lower:
                return value
        
        return category.title()
    
    def _normalize_gender(self, gender: Any, name: str) -> Optional[str]:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø–æ–ª –ø–∞—Ä—Ñ—é–º–∞"""
        if gender:
            gender_str = str(gender).lower()
            if 'male' in gender_str or '–º—É–∂—Å–∫' in gender_str:
                return 'male'
            elif 'female' in gender_str or '–∂–µ–Ω—Å–∫' in gender_str:
                return 'female'
            elif 'unisex' in gender_str or '—É–Ω–∏—Å–µ–∫—Å' in gender_str:
                return 'unisex'
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        name_lower = name.lower()
        if any(word in name_lower for word in ['–º—É–∂—Å–∫–æ–π', 'for men', 'homme', 'male']):
            return 'male'
        elif any(word in name_lower for word in ['–∂–µ–Ω—Å–∫–∏–π', 'for women', 'femme', 'female']):
            return 'female'
        elif any(word in name_lower for word in ['—É–Ω–∏—Å–µ–∫—Å', 'unisex']):
            return 'unisex'
        
        return None
    
    def _normalize_notes(self, notes: List[str]) -> List[str]:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–æ—Ç—ã –ø–∞—Ä—Ñ—é–º–∞"""
        if not notes:
            return []
        
        normalized_notes = []
        for note in notes:
            if note and isinstance(note, str):
                clean_note = self._clean_text(note)
                if clean_note and len(clean_note) > 2:
                    normalized_notes.append(clean_note.title())
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        return list(dict.fromkeys(normalized_notes))[:8]
    
    def _normalize_rating(self, rating: Any) -> Optional[float]:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥"""
        if rating is None:
            return None
        
        try:
            rating = float(rating)
            return rating if 0 <= rating <= 5 else None
        except (ValueError, TypeError):
            return None
    
    def _normalize_reviews_count(self, count: Any) -> Optional[int]:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤"""
        if count is None:
            return None
        
        try:
            count = int(count)
            return count if count >= 0 else None
        except (ValueError, TypeError):
            return None
    
    def _perfume_to_dict(self, perfume: NormalizedPerfume) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Ñ—é–º –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'name': perfume.name,
            'brand': perfume.brand,
            'factory': perfume.factory,
            'url': perfume.url,
            'article': perfume.article,
            'price': perfume.price,
            'volume': perfume.volume,
            'description': perfume.description,
            'category': perfume.category,
            'gender': perfume.gender,
            'notes': perfume.notes,
            'availability': perfume.availability,
            'image_url': perfume.image_url,
            'rating': perfume.rating,
            'reviews_count': perfume.reviews_count
        }
    
    def _create_factory_stats(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–∞–±—Ä–∏–∫–∞–º"""
        factory_stats = defaultdict(lambda: {
            'perfume_count': 0,
            'brands': set(),
            'avg_price': 0,
            'price_range': {'min': float('inf'), 'max': 0},
            'quality_levels': set(),
            'perfumes': []
        })
        
        for perfume in self.normalized_perfumes:
            factory = perfume.factory
            stats = factory_stats[factory]
            
            stats['perfume_count'] += 1
            stats['brands'].add(perfume.brand)
            stats['perfumes'].append({
                'name': perfume.name,
                'brand': perfume.brand,
                'price': perfume.price,
                'url': perfume.url
            })
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω
            if perfume.price:
                if perfume.price < stats['price_range']['min']:
                    stats['price_range']['min'] = perfume.price
                if perfume.price > stats['price_range']['max']:
                    stats['price_range']['max'] = perfume.price
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ —Ü–µ–Ω–µ
            if perfume.price:
                if perfume.price < 1000:
                    stats['quality_levels'].add('—ç–∫–æ–Ω–æ–º')
                elif perfume.price < 3000:
                    stats['quality_levels'].add('—Å—Ç–∞–Ω–¥–∞—Ä—Ç')
                elif perfume.price < 6000:
                    stats['quality_levels'].add('–ø—Ä–µ–º–∏—É–º')
                else:
                    stats['quality_levels'].add('–ª—é–∫—Å')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º sets –≤ lists –¥–ª—è JSON
        result = {}
        for factory, stats in factory_stats.items():
            prices = [p['price'] for p in stats['perfumes'] if p['price']]
            avg_price = sum(prices) / len(prices) if prices else 0
            
            result[factory] = {
                'perfume_count': stats['perfume_count'],
                'brands': sorted(list(stats['brands'])),
                'avg_price': round(avg_price, 2),
                'price_range': {
                    'min': stats['price_range']['min'] if stats['price_range']['min'] != float('inf') else 0,
                    'max': stats['price_range']['max']
                },
                'quality_levels': sorted(list(stats['quality_levels'])),
                'top_perfumes': sorted(stats['perfumes'], key=lambda x: x['price'] or 0, reverse=True)[:5]
            }
        
        return result
    
    def _create_brand_stats(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±—Ä–µ–Ω–¥–∞–º"""
        brand_stats = defaultdict(lambda: {
            'perfume_count': 0,
            'factories': set(),
            'avg_price': 0,
            'perfumes': []
        })
        
        for perfume in self.normalized_perfumes:
            brand = perfume.brand
            stats = brand_stats[brand]
            
            stats['perfume_count'] += 1
            stats['factories'].add(perfume.factory)
            stats['perfumes'].append({
                'name': perfume.name,
                'factory': perfume.factory,
                'price': perfume.price,
                'url': perfume.url
            })
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        result = {}
        for brand, stats in brand_stats.items():
            prices = [p['price'] for p in stats['perfumes'] if p['price']]
            avg_price = sum(prices) / len(prices) if prices else 0
            
            result[brand] = {
                'perfume_count': stats['perfume_count'],
                'factories': sorted(list(stats['factories'])),
                'avg_price': round(avg_price, 2),
                'top_perfumes': sorted(stats['perfumes'], key=lambda x: x['price'] or 0, reverse=True)[:3]
            }
        
        return result
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è LLM
    
    def _create_names_only_list(self) -> List[str]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–π –∞—Ä–æ–º–∞—Ç–æ–≤ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ)"""
        names = set()
        for perfume in self.normalized_perfumes:
            names.add(perfume.name)
        return sorted(list(names))
    
    def _create_brand_name_list(self) -> List[str]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥ + –Ω–∞–∑–≤–∞–Ω–∏–µ"""
        items = set()
        for perfume in self.normalized_perfumes:
            items.add(f"{perfume.brand} - {perfume.name}")
        return sorted(list(items))
    
    def _create_name_factory_list(self) -> List[str]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ + —Ñ–∞–±—Ä–∏–∫–∞"""
        items = set()
        for perfume in self.normalized_perfumes:
            items.add(f"{perfume.name} ({perfume.factory})")
        return sorted(list(items))
    
    def _create_brand_name_factory_list(self) -> List[str]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥ + –Ω–∞–∑–≤–∞–Ω–∏–µ + —Ñ–∞–±—Ä–∏–∫–∞"""
        items = set()
        for perfume in self.normalized_perfumes:
            if perfume.article:
                items.add(f"{perfume.brand} {perfume.name} ({perfume.factory}) [–ê—Ä—Ç–∏–∫—É–ª: {perfume.article}]")
            else:
                items.add(f"{perfume.brand} {perfume.name} ({perfume.factory})")
        return sorted(list(items))
    
    def _create_compact_data(self) -> List[Dict[str, Any]]:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        compact = []
        for perfume in self.normalized_perfumes:
            compact.append({
                'name': perfume.name,
                'brand': perfume.brand,
                'factory': perfume.factory,
                'url': perfume.url,
                'article': perfume.article,
                'price': perfume.price,
                'volume': perfume.volume,
                'gender': perfume.gender,
                'availability': perfume.availability
            })
        return compact
    
    def _create_quiz_reference(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –¥–ª—è –∫–≤–∏–∑–∞"""
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—É
        by_gender = defaultdict(list)
        by_price = defaultdict(list)
        by_factory = defaultdict(list)
        
        for perfume in self.normalized_perfumes:
            # –ü–æ –ø–æ–ª—É
            gender = perfume.gender or 'unisex'
            by_gender[gender].append(perfume.name)
            
            # –ü–æ —Ü–µ–Ω–µ
            if perfume.price:
                if perfume.price < 1500:
                    by_price['budget'].append(perfume.name)
                elif perfume.price < 4000:
                    by_price['medium'].append(perfume.name)
                else:
                    by_price['premium'].append(perfume.name)
            
            # –ü–æ —Ñ–∞–±—Ä–∏–∫–µ
            by_factory[perfume.factory].append(perfume.name)
        
        return {
            'by_gender': dict(by_gender),
            'by_price': dict(by_price),
            'by_factory': dict(by_factory),
            'total_perfumes': len(self.normalized_perfumes)
        }
    
    def save_normalized_data(self, data: Dict[str, Any], filename: str = None) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"perfumes_normalized_{timestamp}.json"
        
        filepath = config.get_data_file_path(filename, processed=True)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üíæ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filepath}")
        return str(filepath)
    
    def save_separate_files(self, data: Dict[str, Any]) -> Dict[str, str]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö"""
        saved_files = {}
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        lists_to_save = [
            'names_only',
            'brand_name', 
            'name_factory',
            'brand_name_factory',
            'full_data_compact',
            'factory_analysis',
            'quiz_reference'
        ]
        
        for list_name in lists_to_save:
            if list_name in data:
                filename = f"{list_name}.json"
                filepath = config.get_data_file_path(filename, processed=True)
                
                with open(filepath, 'w', encoding='utf-8') as f:
                    json.dump(data[list_name], f, ensure_ascii=False, indent=2)
                
                saved_files[list_name] = str(filepath)
                logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª: {filename}")
        
        return saved_files