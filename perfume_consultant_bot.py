#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import json
import asyncio
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from enum import Enum

import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    MessageHandler, filters, ContextTypes, ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
class BotState(Enum):
    MAIN_MENU = 0
    PERFUME_QUESTION = 1
    QUIZ_IN_PROGRESS = 2
    FRAGRANCE_INFO = 3
    WAITING_USER_INPUT = 4

@dataclass
class UserSession:
    """–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏"""
    current_state: BotState = BotState.MAIN_MENU
    quiz_answers: Dict[str, Any] = None
    quiz_step: int = 0
    last_message_id: Optional[int] = None
    context_data: Dict[str, Any] = None
    
    def __post_init__(self):
        if self.quiz_answers is None:
            self.quiz_answers = {}
        if self.context_data is None:
            self.context_data = {}

class PerfumeConsultantBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø–∞—Ä—Ñ—é–º–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
    
    def __init__(self, bot_token: str, openrouter_api_key: str):
        self.bot_token = bot_token
        self.openrouter_api_key = openrouter_api_key
        self.user_sessions: Dict[int, UserSession] = {}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.normalized_data = self._load_normalized_data()
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenRouter
        self.openrouter_config = {
            'base_url': 'https://openrouter.ai/api/v1/chat/completions',
            'model': 'anthropic/claude-3-haiku',  # –≠–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å
            'headers': {
                'Authorization': f'Bearer {openrouter_api_key}',
                'Content-Type': 'application/json'
            }
        }
    
    def _load_normalized_data(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        data = {}
        files_to_load = [
            'names_only.json',
            'brand_name.json', 
            'name_factory.json',
            'brand_name_factory.json',
            'full_data_compact.json',
            'factory_analysis.json',
            'quiz_reference.json'
        ]
        
        for filename in files_to_load:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    key = filename.replace('.json', '')
                    data[key] = json.load(f)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {filename}")
            except FileNotFoundError:
                logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
                data[filename.replace('.json', '')] = []
        
        return data
    
    def get_user_session(self, user_id: int) -> UserSession:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = UserSession()
        return self.user_sessions[user_id]
    
    async def send_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [
                InlineKeyboardButton("ü§î –ü–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="perfume_question"),
                InlineKeyboardButton("üéØ –ü–æ–¥–±–æ—Ä –ø–∞—Ä—Ñ—é–º–∞", callback_data="perfume_quiz")
            ],
            [
                InlineKeyboardButton("üìñ –ß—Ç–æ –∑–∞ –∞—Ä–æ–º–∞—Ç?", callback_data="fragrance_info"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
            ],
            [
                InlineKeyboardButton("üè≠ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–±—Ä–∏–∫", callback_data="factory_analysis"),
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "üåü <b>–ü–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç</b>\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏\n"
            "‚Ä¢ –ü–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –∞—Ä–æ–º–∞—Ç\n"
            "‚Ä¢ –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ–± –∞—Ä–æ–º–∞—Ç–∞—Ö\n"
            "‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–±—Ä–∏–∫–∏ –∏ –±—Ä–µ–Ω–¥—ã\n\n"
            f"üìö –í –º–æ–µ–π –±–∞–∑–µ: <b>{len(self.normalized_data.get('full_data_compact', []))}</b> –∞—Ä–æ–º–∞—Ç–æ–≤\n"
            f"üè∑Ô∏è –ë—Ä–µ–Ω–¥–æ–≤: <b>{len(self.normalized_data.get('quiz_reference', {}).get('brands', []))}</b>\n"
            f"üè≠ –§–∞–±—Ä–∏–∫: <b>{len(self.normalized_data.get('factory_analysis', {}))}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:"
        )
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=text, 
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        else:
            message = await update.message.reply_text(
                text=text, 
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            user_session = self.get_user_session(update.effective_user.id)
            user_session.last_message_id = message.message_id
    
    async def handle_perfume_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        user_session = self.get_user_session(update.effective_user.id)
        user_session.current_state = BotState.PERFUME_QUESTION
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "ü§î <b>–ü–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π –≤–æ–ø—Ä–æ—Å</b>\n\n"
            "–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏!\n\n"
            "<i>–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:</i>\n"
            "‚Ä¢ –ö–∞–∫–æ–π –∞—Ä–æ–º–∞—Ç –ø–æ–¥–æ–π–¥–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥–µ–ª—å –¥–ª—è —Å—Ç–∏—Ä–∫–∏?\n"
            "‚Ä¢ –ß—Ç–æ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Å–≤–µ–∂–∏—Ç–µ–ª—è –≤–æ–∑–¥—É—Ö–∞?\n"
            "‚Ä¢ –ö–∞–∫–∏–µ –∞—Ä–æ–º–∞—Ç—ã –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –º—ã–ª–æ–≤–∞—Ä–µ–Ω–∏—è?\n"
            "‚Ä¢ –ü–æ—Å–æ–≤–µ—Ç—É–π —á—Ç–æ-—Ç–æ —Å–≤–µ–∂–µ–µ –∏ —Ü–∏—Ç—Ä—É—Å–æ–≤–æ–µ\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:"
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        return BotState.WAITING_USER_INPUT.value
    
    async def process_perfume_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ò–ò"""
        user_question = update.message.text
        user_id = update.effective_user.id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        processing_msg = await update.message.reply_text("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò
            name_factory_list = self.normalized_data.get('name_factory', [])
            factory_analysis = self.normalized_data.get('factory_analysis', {})
            
            prompt = self._create_question_prompt(user_question, name_factory_list, factory_analysis)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter
            ai_response = await self._call_openrouter_api(prompt)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await processing_msg.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            keyboard = [
                [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å", callback_data="perfume_question")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            response_text = f"ü§î <b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:</b>\n\n{ai_response}"
            
            await update.message.reply_text(
                text=response_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
        except Exception as e:
            await processing_msg.delete()
            await update.message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
        
        return BotState.MAIN_MENU.value
    
    def _create_question_prompt(self, user_question: str, name_factory_list: List[str], 
                               factory_analysis: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ (–ø–µ—Ä–≤—ã–µ 200 –ø–æ–∑–∏—Ü–∏–π)
        limited_list = name_factory_list[:200]
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ —Ñ–∞–±—Ä–∏–∫–∞–º
        factory_summary = []
        for factory, data in list(factory_analysis.items())[:10]:  # –¢–æ–ø-10 —Ñ–∞–±—Ä–∏–∫
            factory_summary.append(
                f"- {factory}: {data['perfume_count']} –∞—Ä–æ–º–∞—Ç–æ–≤, "
                f"–∫–∞—á–µ—Å—Ç–≤–æ: {', '.join(data['quality_levels'][:3])}"
            )
        
        prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç-–ø–∞—Ä—Ñ—é–º–µ—Ä –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∞—Ä–æ–º–∞—Ç–∞–º. 

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: "{user_question}"

–ò–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∞—Ä–æ–º–∞—Ç–æ–≤ –≤—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

–î–û–°–¢–£–ü–ù–´–ï –ê–†–û–ú–ê–¢–´ (–Ω–∞–∑–≤–∞–Ω–∏–µ + —Ñ–∞–±—Ä–∏–∫–∞):
{chr(10).join(limited_list)}

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –§–ê–ë–†–ò–ö–ê–•:
{chr(10).join(factory_summary)}

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–±–µ—Ä–∏ 3-5 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞—Ä–æ–º–∞—Ç–æ–≤
2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞—Ä–æ–º–∞—Ç–∞ —É–∫–∞–∂–∏ —Ñ–∞–±—Ä–∏–∫—É-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
3. –û–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ –∞—Ä–æ–º–∞—Ç—ã –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
4. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ñ–∞–±—Ä–∏–∫–∞–º - –∫–∞–∫–∞—è –ª—É—á—à–µ –ø–µ—Ä–µ–¥–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∞—Ä–æ–º–∞—Ç–∞
5. –î–æ–±–∞–≤—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º."""

        return prompt
    
    async def start_perfume_quiz(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–≤–∏–∑ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä—Ñ—é–º–∞"""
        query = update.callback_query
        await query.answer()
        
        user_session = self.get_user_session(update.effective_user.id)
        user_session.current_state = BotState.QUIZ_IN_PROGRESS
        user_session.quiz_step = 0
        user_session.quiz_answers = {}
        
        # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞
        await self._send_quiz_question(query, user_session)
        
        return BotState.QUIZ_IN_PROGRESS.value
    
    async def handle_fragrance_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä–æ–º–∞—Ç–µ"""
        query = update.callback_query
        await query.answer()
        
        user_session = self.get_user_session(update.effective_user.id)
        user_session.current_state = BotState.FRAGRANCE_INFO
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "üìñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä–æ–º–∞—Ç–µ</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä–æ–º–∞—Ç–∞ –∏ –±—Ä–µ–Ω–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n"
            "<i>–ü—Ä–∏–º–µ—Ä—ã:</i>\n"
            "‚Ä¢ Tom Ford Lost Cherry\n"
            "‚Ä¢ Chanel Coco Mademoiselle\n"
            "‚Ä¢ Dior Sauvage\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        return BotState.WAITING_USER_INPUT.value
    
    async def process_fragrance_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä–æ–º–∞—Ç–µ"""
        fragrance_query = update.message.text
        
        processing_msg = await update.message.reply_text("üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä–æ–º–∞—Ç–µ...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä–æ–º–∞—Ç–µ
            prompt = self._create_fragrance_info_prompt(fragrance_query)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
            ai_response = await self._call_openrouter_api(prompt)
            
            await processing_msg.delete()
            
            keyboard = [
                [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –µ—â–µ –∞—Ä–æ–º–∞—Ç", callback_data="fragrance_info")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            response_text = f"üìñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä–æ–º–∞—Ç–µ:</b>\n\n{ai_response}"
            
            await update.message.reply_text(
                text=response_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
        except Exception as e:
            await processing_msg.delete()
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
        
        return BotState.MAIN_MENU.value
    
    def _create_fragrance_info_prompt(self, fragrance_query: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä–æ–º–∞—Ç–µ"""
        return f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç-–ø–∞—Ä—Ñ—é–º–µ—Ä —Å —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—á–µ—Å–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –æ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–± –∞—Ä–æ–º–∞—Ç–µ: "{fragrance_query}"

–ó–ê–î–ê–ß–ê:
1. –ò—Å–ø—Ä–∞–≤—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∞—Ä–æ–º–∞—Ç–∞ –∏ –±—Ä–µ–Ω–¥–∞
2. –î–∞–π –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞—Ä–æ–º–∞—Ç–∞ –∫–∞–∫ –Ω–∞ —Å–∞–π—Ç–µ Fragrantica
3. –û–ø–∏—à–∏ –ø–∏—Ä–∞–º–∏–¥—É –∞—Ä–æ–º–∞—Ç–æ–≤ (–≤–µ—Ä—Ö–Ω–∏–µ, —Å—Ä–µ–¥–Ω–∏–µ, –±–∞–∑–æ–≤—ã–µ –Ω–æ—Ç—ã)
4. –†–∞—Å—Å–∫–∞–∂–∏ –≤ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ, —á–µ–º –ø–∞—Ö–Ω–µ—Ç –∞—Ä–æ–º–∞—Ç
5. –£–∫–∞–∂–∏, –∫–æ–≥–¥–∞ –ª—É—á—à–µ –Ω–æ—Å–∏—Ç—å (—Å–µ–∑–æ–Ω, –≤—Ä–µ–º—è —Å—É—Ç–æ–∫, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)
6. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
7. –£–∫–∞–∂–∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é (–ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç)

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–º, –Ω–æ —á–∏—Ç–∞–µ–º—ã–º, —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏."""
    
    async def _send_quiz_question(self, query_or_update, user_session: UserSession) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∫–≤–∏–∑–∞ - –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
        questions = [
            {
                'text': 'üë§ –î–ª—è –∫–æ–≥–æ –ø–æ–¥–±–∏—Ä–∞–µ–º –∞—Ä–æ–º–∞—Ç?',
                'options': ['–î–ª—è —Å–µ–±—è (–º—É–∂—á–∏–Ω–∞)', '–î–ª—è —Å–µ–±—è (–∂–µ–Ω—â–∏–Ω–∞)', '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π', '–í –ø–æ–¥–∞—Ä–æ–∫'],
                'key': 'target_gender'
            },
            {
                'text': 'üå°Ô∏è –ö–∞–∫–æ–π —Å–µ–∑–æ–Ω –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?',
                'options': ['–í–µ—Å–Ω–∞', '–õ–µ—Ç–æ', '–û—Å–µ–Ω—å', '–ó–∏–º–∞', '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π'],
                'key': 'season'
            },
            {
                'text': '‚è∞ –í—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è?',
                'options': ['–£—Ç—Ä–æ/–î–µ–Ω—å', '–í–µ—á–µ—Ä/–ù–æ—á—å', '–û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏', '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ'],
                'key': 'time_of_day'
            }
        ]
        
        if user_session.quiz_step < len(questions):
            question = questions[user_session.quiz_step]
            keyboard = []
            
            for option in question['options']:
                keyboard.append([InlineKeyboardButton(option, callback_data=f"quiz_{question['key']}_{option}")])
            
            keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            text = f"üéØ <b>–ü–æ–¥–±–æ—Ä –ø–∞—Ä—Ñ—é–º–∞</b> ({user_session.quiz_step + 1}/{len(questions)})\n\n{question['text']}"
            
            if hasattr(query_or_update, 'edit_message_text'):
                await query_or_update.edit_message_text(
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            else:
                await query_or_update.message.reply_text(
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
        else:
            # –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await self._show_quiz_results(query_or_update, user_session)
    
    async def _show_quiz_results(self, query_or_update, user_session: UserSession) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∏–∑–∞"""
        processing_text = "ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –ø–æ–¥–±–∏—Ä–∞—é –∏–¥–µ–∞–ª—å–Ω—ã–µ –∞—Ä–æ–º–∞—Ç—ã..."
        
        if hasattr(query_or_update, 'edit_message_text'):
            await query_or_update.edit_message_text(text=processing_text)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∞—Ä–æ–º–∞—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –∫–≤–∏–∑–∞
            brand_name_factory_list = self.normalized_data.get('brand_name_factory', [])
            factory_analysis = self.normalized_data.get('factory_analysis', {})
            
            prompt = self._create_quiz_results_prompt(user_session.quiz_answers, brand_name_factory_list, factory_analysis)
            
            ai_response = await self._call_openrouter_api(prompt)
            
            keyboard = [
                [InlineKeyboardButton("üéØ –ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑ —Å–Ω–æ–≤–∞", callback_data="perfume_quiz")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            result_text = f"üéØ <b>–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n\n{ai_response}"
            
            if hasattr(query_or_update, 'edit_message_text'):
                await query_or_update.edit_message_text(
                    text=result_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
        
        except Exception as e:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –∞—Ä–æ–º–∞—Ç–æ–≤: {str(e)}"
            keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            
            if hasattr(query_or_update, 'edit_message_text'):
                await query_or_update.edit_message_text(
                    text=error_text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
    
    def _create_quiz_results_prompt(self, quiz_answers: Dict[str, str], 
                                   brand_name_factory_list: List[str], 
                                   factory_analysis: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–≤–∏–∑–∞"""
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—Ä–æ–º–∞—Ç–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
        limited_list = brand_name_factory_list[:300]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        preferences_text = []
        for key, value in quiz_answers.items():
            preferences_text.append(f"- {key}: {value}")
        
        # –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–ø —Ñ–∞–±—Ä–∏–∫–∞—Ö
        top_factories = []
        for factory, data in list(factory_analysis.items())[:8]:
            top_factories.append(f"- {factory}: {data['perfume_count']} –∞—Ä–æ–º–∞—Ç–æ–≤")
        
        prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç-–ø–∞—Ä—Ñ—é–º–µ—Ä –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∞—Ä–æ–º–∞—Ç–∞–º.

–ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
{chr(10).join(preferences_text)}

–ó–ê–î–ê–ß–ê: –ü–æ–¥–æ–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ 5-7 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–æ–º–ø–æ–∑–∏—Ü–∏–π –ø–æ–¥ —ç—Ç–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.

–î–û–°–¢–£–ü–ù–´–ï –ê–†–û–ú–ê–¢–´ (–±—Ä–µ–Ω–¥ - –Ω–∞–∑–≤–∞–Ω–∏–µ + —Ñ–∞–±—Ä–∏–∫–∞):
{chr(10).join(limited_list)}

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –§–ê–ë–†–ò–ö–ê–•:
{chr(10).join(top_factories)}

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –í—ã–±–µ—Ä–∏ 5-7 –∞—Ä–æ–º–∞—Ç–æ–≤, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º
2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Ä–æ–º–∞—Ç–∞ —É–∫–∞–∂–∏, –ø–æ—á–µ–º—É –æ–Ω –ø–æ–¥—Ö–æ–¥–∏—Ç
3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–∞–±—Ä–∏–∫–∏ –∏ —É–∫–∞–∂–∏, –∫–∞–∫–∏–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª–Ω—è—é—Ç —ç—Ç–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
4. –î–∞–π –∫—Ä–∞—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞—Ä–æ–º–∞—Ç–æ–≤
5. –†–∞—Å–ø–æ–ª–æ–∂–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–æ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ)

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º."""

        return prompt
    
    async def _call_openrouter_api(self, prompt: str, max_tokens: int = 1000) -> str:
        """–í—ã–∑—ã–≤–∞–µ—Ç OpenRouter API"""
        payload = {
            "model": self.openrouter_config['model'],
            "messages": [
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            "max_tokens": max_tokens,
            "temperature": 0.7
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                self.openrouter_config['base_url'],
                headers=self.openrouter_config['headers'],
                json=payload
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    return data['choices'][0]['message']['content']
                else:
                    error_text = await response.text()
                    raise Exception(f"OpenRouter API error: {response.status} - {error_text}")
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        data = query.data
        user_id = update.effective_user.id
        user_session = self.get_user_session(user_id)
        
        if data == "main_menu":
            await self.send_main_menu(update, context)
            return BotState.MAIN_MENU.value
        
        elif data == "perfume_question":
            return await self.handle_perfume_question(update, context)
        
        elif data == "perfume_quiz":
            return await self.start_perfume_quiz(update, context)
        
        elif data == "fragrance_info":
            return await self.handle_fragrance_info(update, context)
        
        elif data.startswith("quiz_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∫–≤–∏–∑–∞
            parts = data.split("_", 2)
            if len(parts) >= 3:
                key = parts[1]
                value = parts[2]
                user_session.quiz_answers[key] = value
                user_session.quiz_step += 1
                await self._send_quiz_question(query, user_session)
            return BotState.QUIZ_IN_PROGRESS.value
        
        elif data == "stats":
            await self._show_statistics(query)
            return BotState.MAIN_MENU.value
        
        elif data == "factory_analysis":
            await self._show_factory_analysis(query)
            return BotState.MAIN_MENU.value
        
        elif data == "help":
            await self._show_help(query)
            return BotState.MAIN_MENU.value
        
        return BotState.MAIN_MENU.value
    
    async def _show_statistics(self, query) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        stats_data = self.normalized_data
        
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            f"üß™ –í—Å–µ–≥–æ –∞—Ä–æ–º–∞—Ç–æ–≤: <b>{len(stats_data.get('full_data_compact', []))}</b>\n"
            f"üè∑Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π: <b>{len(stats_data.get('names_only', []))}</b>\n"
            f"üè≠ –§–∞–±—Ä–∏–∫: <b>{len(stats_data.get('factory_analysis', {}))}</b>\n"
            f"üéØ –ë—Ä–µ–Ω–¥–æ–≤: <b>{len(stats_data.get('quiz_reference', {}).get('brands', []))}</b>\n\n"
            f"<b>–¢–æ–ø-5 —Ñ–∞–±—Ä–∏–∫ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞—Ä–æ–º–∞—Ç–æ–≤:</b>\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø —Ñ–∞–±—Ä–∏–∫
        factory_analysis = stats_data.get('factory_analysis', {})
        sorted_factories = sorted(factory_analysis.items(), key=lambda x: x[1]['perfume_count'], reverse=True)
        
        for i, (factory, data) in enumerate(sorted_factories[:5], 1):
            text += f"{i}. {factory}: {data['perfume_count']} –∞—Ä–æ–º–∞—Ç–æ–≤\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    async def _show_factory_analysis(self, query) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ñ–∞–±—Ä–∏–∫"""
        factory_analysis = self.normalized_data.get('factory_analysis', {})
        
        text = "üè≠ <b>–ê–Ω–∞–ª–∏–∑ —Ñ–∞–±—Ä–∏–∫</b>\n\n"
        
        sorted_factories = sorted(factory_analysis.items(), key=lambda x: x[1]['perfume_count'], reverse=True)
        
        for factory, data in sorted_factories[:10]:
            text += f"<b>{factory}</b>\n"
            text += f"  ‚Ä¢ –ê—Ä–æ–º–∞—Ç–æ–≤: {data['perfume_count']}\n"
            text += f"  ‚Ä¢ –ë—Ä–µ–Ω–¥–æ–≤: {len(data['brands'])}\n"
            if data['quality_levels']:
                text += f"  ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: {', '.join(data['quality_levels'][:3])}\n"
            text += "\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    async def _show_help(self, query) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
        text = (
            "‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
            "<b>ü§î –ü–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π –≤–æ–ø—Ä–æ—Å</b>\n"
            "–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏, –∏ –ò–ò –ø–æ–¥–±–µ—Ä–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞—Ä–æ–º–∞—Ç—ã –∏–∑ –±–∞–∑—ã.\n\n"
            "<b>üéØ –ü–æ–¥–±–æ—Ä –ø–∞—Ä—Ñ—é–º–∞</b>\n"
            "–ü—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–≤–∏–∑, –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
            "<b>üìñ –ß—Ç–æ –∑–∞ –∞—Ä–æ–º–∞—Ç?</b>\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä–æ–º–∞—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n"
            "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
            "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∞—Ä–æ–º–∞—Ç–æ–≤.\n\n"
            "<b>üè≠ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–±—Ä–∏–∫</b>\n"
            "–ò–∑—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–±—Ä–∏–∫–∞—Ö-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è—Ö.\n\n"
            "–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ò–ò –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–æ–¥–±–æ—Ä–∞ –∞—Ä–æ–º–∞—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –±–æ–ª–µ–µ —á–µ–º 1200 –ø–æ–∑–∏—Ü–∏–π."
        )
        
        keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    def create_application(self) -> Application:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram –±–æ—Ç–∞"""
        application = Application.builder().token(self.bot_token).build()
        
        # Conversation handler –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", self.send_main_menu)],
            states={
                BotState.MAIN_MENU.value: [
                    CallbackQueryHandler(self.handle_callback_query)
                ],
                BotState.WAITING_USER_INPUT.value: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.process_user_input),
                    CallbackQueryHandler(self.handle_callback_query)
                ],
                BotState.QUIZ_IN_PROGRESS.value: [
                    CallbackQueryHandler(self.handle_callback_query)
                ],
            },
            fallbacks=[
                CommandHandler("start", self.send_main_menu),
                CallbackQueryHandler(self.handle_callback_query)
            ],
        )
        
        application.add_handler(conv_handler)
        return application
    
    async def process_user_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        user_session = self.get_user_session(update.effective_user.id)
        
        if user_session.current_state == BotState.PERFUME_QUESTION:
            return await self.process_perfume_question(update, context)
        elif user_session.current_state == BotState.FRAGRANCE_INFO:
            return await self.process_fragrance_info(update, context)
        
        return BotState.MAIN_MENU.value

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"
    OPENROUTER_API_KEY = "YOUR_OPENROUTER_API_KEY_HERE"
    
    bot = PerfumeConsultantBot(BOT_TOKEN, OPENROUTER_API_KEY)
    application = bot.create_application()
    
    print("ü§ñ –ü–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("üìö –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()