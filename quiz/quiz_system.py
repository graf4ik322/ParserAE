#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
from typing import Dict, List, Any, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime

logger = logging.getLogger(__name__)

class QuizSystem:
    """–°–∏—Å—Ç–µ–º–∞ –∫–≤–∏–∑–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self, db_manager, ai_processor=None):
        self.db = db_manager
        self.ai_processor = ai_processor
        self.quiz_questions = self._initialize_quiz_questions()
        logger.info("üìù QuizSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _initialize_quiz_questions(self) -> List[Dict[str, Any]]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∫–≤–∏–∑–∞"""
        return [
            {
                "id": "gender",
                "question": "üë§ **–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:**",
                "type": "single_choice",
                "options": [
                    {"text": "üë® –ú—É–∂—Å–∫–æ–π", "value": "–ú—É–∂—Å–∫–æ–π"},
                    {"text": "üë© –ñ–µ–Ω—Å–∫–∏–π", "value": "–ñ–µ–Ω—Å–∫–∏–π"},
                    {"text": "üåà –£–Ω–∏—Å–µ–∫—Å", "value": "–£–Ω–∏—Å–µ–∫—Å"}
                ]
            },
            {
                "id": "age_group",
                "question": "üéÇ **–í–∞—à–∞ –≤–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞:**",
                "type": "single_choice",
                "options": [
                    {"text": "üå± 18-25 –ª–µ—Ç", "value": "18-25"},
                    {"text": "üåø 26-35 –ª–µ—Ç", "value": "26-35"},
                    {"text": "üå≥ 36-45 –ª–µ—Ç", "value": "36-45"},
                    {"text": "üçÇ 46+ –ª–µ—Ç", "value": "46+"}
                ]
            },
            {
                "id": "budget",
                "question": "üí∞ **–ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç –Ω–∞ –ø–∞—Ä—Ñ—é–º?**",
                "type": "single_choice",
                "options": [
                    {"text": "üí∏ –î–æ 2000 —Ä—É–±–ª–µ–π", "value": "–¥–æ 2000"},
                    {"text": "üíµ 2000-5000 —Ä—É–±–ª–µ–π", "value": "2000-5000"},
                    {"text": "üí¥ 5000-10000 —Ä—É–±–ª–µ–π", "value": "5000-10000"},
                    {"text": "üíé –°–≤—ã—à–µ 10000 —Ä—É–±–ª–µ–π", "value": "—Å–≤—ã—à–µ 10000"}
                ]
            },
            {
                "id": "occasion",
                "question": "üé≠ **–î–ª—è –∫–∞–∫–∏—Ö —Å–ª—É—á–∞–µ–≤ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä—Ñ—é–º?**",
                "type": "multiple_choice",
                "options": [
                    {"text": "üè¢ –†–∞–±–æ—Ç–∞/–æ—Ñ–∏—Å", "value": "—Ä–∞–±–æ—Ç–∞"},
                    {"text": "üíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –≤—Å—Ç—Ä–µ—á–∏", "value": "—Å–≤–∏–¥–∞–Ω–∏—è"},
                    {"text": "üéâ –û—Å–æ–±—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "value": "—Å–æ–±—ã—Ç–∏—è"},
                    {"text": "üåÖ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è –∂–∏–∑–Ω—å", "value": "–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ"},
                    {"text": "üåô –í–µ—á–µ—Ä–Ω–∏–µ –≤—ã—Ö–æ–¥—ã", "value": "–≤–µ—á–µ—Ä"}
                ]
            },
            {
                "id": "intensity_preference",
                "question": "üí® **–ö–∞–∫—É—é –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∞—Ä–æ–º–∞—Ç–∞ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?**",
                "type": "single_choice",
                "options": [
                    {"text": "üå∏ –õ–µ–≥–∫–∏–π –∏ –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤—ã–π", "value": "–ª–µ–≥–∫–∏–π"},
                    {"text": "üå∫ –£–º–µ—Ä–µ–Ω–Ω—ã–π", "value": "—É–º–µ—Ä–µ–Ω–Ω—ã–π"},
                    {"text": "üåπ –ù–∞—Å—ã—â–µ–Ω–Ω—ã–π –∏ —Å—Ç–æ–π–∫–∏–π", "value": "–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π"}
                ]
            },
            {
                "id": "season_preference",
                "question": "üåç **–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞ –≤—ã —á–∞—â–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø–∞—Ä—Ñ—é–º?**",
                "type": "multiple_choice",
                "options": [
                    {"text": "üå∏ –í–µ—Å–Ω–∞", "value": "–≤–µ—Å–Ω–∞"},
                    {"text": "‚òÄÔ∏è –õ–µ—Ç–æ", "value": "–ª–µ—Ç–æ"},
                    {"text": "üçÇ –û—Å–µ–Ω—å", "value": "–æ—Å–µ–Ω—å"},
                    {"text": "‚ùÑÔ∏è –ó–∏–º–∞", "value": "–∑–∏–º–∞"}
                ]
            },
            {
                "id": "fragrance_families",
                "question": "üåø **–ö–∞–∫–∏–µ –≥—Ä—É–ø–ø—ã –∞—Ä–æ–º–∞—Ç–æ–≤ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è?**",
                "type": "multiple_choice",
                "options": [
                    {"text": "üå∏ –¶–≤–µ—Ç–æ—á–Ω—ã–µ", "value": "—Ü–≤–µ—Ç–æ—á–Ω—ã–µ"},
                    {"text": "üçä –¶–∏—Ç—Ä—É—Å–æ–≤—ã–µ", "value": "—Ü–∏—Ç—Ä—É—Å–æ–≤—ã–µ"},
                    {"text": "üå≤ –î—Ä–µ–≤–µ—Å–Ω—ã–µ", "value": "–¥—Ä–µ–≤–µ—Å–Ω—ã–µ"},
                    {"text": "üåø –°–≤–µ–∂–∏–µ", "value": "—Å–≤–µ–∂–∏–µ"},
                    {"text": "üçØ –í–æ—Å—Ç–æ—á–Ω—ã–µ", "value": "–≤–æ—Å—Ç–æ—á–Ω—ã–µ"},
                    {"text": "üå∞ –ì—É—Ä–º–∞–Ω—Å–∫–∏–µ", "value": "–≥—É—Ä–º–∞–Ω—Å–∫–∏–µ"}
                ]
            },
            {
                "id": "experience_level",
                "question": "üéì **–í–∞—à –æ–ø—ã—Ç —Å –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–µ–π:**",
                "type": "single_choice",
                "options": [
                    {"text": "üå± –ù–æ–≤–∏—á–æ–∫", "value": "–Ω–æ–≤–∏—á–æ–∫"},
                    {"text": "üåø –ù–µ–º–Ω–æ–≥–æ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å", "value": "—Å—Ä–µ–¥–Ω–∏–π"},
                    {"text": "üå≥ –•–æ—Ä–æ—à–æ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å", "value": "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"},
                    {"text": "üéØ –≠–∫—Å–ø–µ—Ä—Ç", "value": "—ç–∫—Å–ø–µ—Ä—Ç"}
                ]
            }
        ]
    
    async def start_quiz(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∫–≤–∏–∑"""
        user_id = update.effective_user.id
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–≤–∏–∑–∞
        self.db.update_session_state(user_id, "QUIZ_IN_PROGRESS", {"quiz_answers": {}, "quiz_step": 0})
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await self._show_quiz_question(update, context, 0)
        
        logger.info(f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –∫–≤–∏–∑")
    
    async def handle_quiz_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –∫–≤–∏–∑–µ"""
        query = update.callback_query
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
        session = self.db.get_user_session(user_id)
        if not session or session.get('current_state') != 'QUIZ_IN_PROGRESS':
            await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∫–≤–∏–∑–∞ –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        
        quiz_answers = session.get('quiz_answers', {})
        quiz_step = session.get('quiz_step', 0)
        
        # –ü–∞—Ä—Å–∏–º callback_data
        callback_parts = query.data.split('_')
        action = callback_parts[1]  # quiz_answer, quiz_next, quiz_finish
        
        if action == "answer":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
            question_id = callback_parts[2]
            answer_value = "_".join(callback_parts[3:])
            
            current_question = self.quiz_questions[quiz_step]
            
            if current_question['type'] == 'single_choice':
                quiz_answers[question_id] = answer_value
            elif current_question['type'] == 'multiple_choice':
                if question_id not in quiz_answers:
                    quiz_answers[question_id] = []
                
                if answer_value in quiz_answers[question_id]:
                    quiz_answers[question_id].remove(answer_value)
                else:
                    quiz_answers[question_id].append(answer_value)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
            self.db.update_quiz_session(user_id, quiz_answers, quiz_step)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
            await self._show_quiz_question(update, context, quiz_step, quiz_answers)
            
        elif action == "next":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            quiz_step += 1
            
            if quiz_step < len(self.quiz_questions):
                self.db.update_quiz_session(user_id, quiz_answers, quiz_step)
                await self._show_quiz_question(update, context, quiz_step, quiz_answers)
            else:
                # –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω
                await self._finish_quiz(update, context, quiz_answers)
                
        elif action == "finish":
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–∏–∑
            await self._finish_quiz(update, context, quiz_answers)
    
    async def handle_quiz_answer(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ –∫–≤–∏–∑–µ (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)"""
        # –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏, –Ω–æ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
        await update.message.reply_text(
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–≤–∏–∑–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]])
        )
    
    async def _show_quiz_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                 step: int, current_answers: Dict = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞"""
        if step >= len(self.quiz_questions):
            return
        
        question = self.quiz_questions[step]
        current_answers = current_answers or {}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        
        for option in question['options']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç
            is_selected = False
            if question['type'] == 'single_choice':
                is_selected = current_answers.get(question['id']) == option['value']
            elif question['type'] == 'multiple_choice':
                is_selected = option['value'] in current_answers.get(question['id'], [])
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            text = f"‚úÖ {option['text']}" if is_selected else option['text']
            
            callback_data = f"quiz_answer_{question['id']}_{option['value']}"
            keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å)
        has_answer = question['id'] in current_answers and current_answers[question['id']]
        if has_answer:
            if step < len(self.quiz_questions) - 1:
                control_buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="quiz_next"))
            else:
                control_buttons.append(InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–∏–∑", callback_data="quiz_finish"))
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        control_buttons.append(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
        
        if control_buttons:
            keyboard.append(control_buttons)
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        progress = f"–í–æ–ø—Ä–æ—Å {step + 1} –∏–∑ {len(self.quiz_questions)}"
        
        if question['type'] == 'multiple_choice':
            instruction = "\nüí° *–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤*"
        else:
            instruction = "\nüí° *–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç*"
        
        question_text = f"üìã **{progress}**\n\n{question['question']}{instruction}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=question_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                text=question_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    
    async def _finish_quiz(self, update: Update, context: ContextTypes.DEFAULT_TYPE, quiz_answers: Dict):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∫–≤–∏–∑ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        user_id = update.effective_user.id
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        user_profile = self._analyze_quiz_answers(quiz_answers)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db.save_user_quiz_profile(user_id, user_profile)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä—Ñ—é–º—ã –∏–∑ –ë–î (–±–µ–∑ –ª–∏–º–∏—Ç–æ–≤!)
        suitable_perfumes = self.db.get_all_perfumes_from_database()
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ù–æ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            from ai.processor import AIProcessor
            from config import Config
            
            config = Config()
            ai_processor = AIProcessor(config.openrouter_api_key)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            prompt = ai_processor.create_quiz_results_prompt(user_profile, suitable_perfumes)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            processing_msg = await update.callback_query.edit_message_text(
                "ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∏ –ø–æ–¥–±–∏—Ä–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..."
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò
            ai_response = await ai_processor.call_openrouter_api(prompt, max_tokens=4000)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏
            processed_response = ai_processor.process_ai_response_with_links(ai_response, self.db)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            final_response = f"""üéâ **–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!**

{processed_response}

üìù –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –í –±—É–¥—É—â–µ–º —è —Å–º–æ–≥—É –¥–∞–≤–∞—Ç—å –µ—â–µ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!"""
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await processing_msg.delete()
            
            await update.effective_chat.send_message(
                text=final_response,
                parse_mode='Markdown',
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]])
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.db.save_usage_stat(user_id, "quiz_completed", None, str(quiz_answers), len(final_response))
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º AI processor
            await ai_processor.close()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–≤–∏–∑–∞: {e}")
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–≤–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]])
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.db.update_session_state(user_id, "MAIN_MENU")
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª –∫–≤–∏–∑")
    
    def _analyze_quiz_answers(self, quiz_answers: Dict) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –∫–≤–∏–∑–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        profile = {}
        
        # –ü—Ä—è–º–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
        direct_mapping = {
            'gender': 'gender',
            'age_group': 'age_group',
            'budget': 'budget',
            'intensity_preference': 'intensity_preference',
            'experience_level': 'experience_level'
        }
        
        for quiz_key, profile_key in direct_mapping.items():
            if quiz_key in quiz_answers:
                profile[profile_key] = quiz_answers[quiz_key]
        
        # –ú–∞—Å—Å–∏–≤—ã
        array_mapping = {
            'occasion': 'occasion',
            'season_preference': 'season_preference',
            'fragrance_families': 'preferred_fragrance_groups'
        }
        
        for quiz_key, profile_key in array_mapping.items():
            if quiz_key in quiz_answers:
                profile[profile_key] = quiz_answers[quiz_key]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        profile['quiz_completed_at'] = datetime.now().isoformat()
        profile['quiz_version'] = '1.0'
        
        return profile
    
    async def _finish_quiz(self, update: Update, context: ContextTypes.DEFAULT_TYPE, quiz_answers: Dict):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∫–≤–∏–∑ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_profile = self._analyze_quiz_results(quiz_answers)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.db.save_user_profile(user_id, user_profile)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä—Ñ—é–º—ã
            all_perfumes = self.db.get_all_perfumes_for_ai()
            
            if not all_perfumes:
                await update.callback_query.edit_message_text(
                    "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–∞—Ç–∞–ª–æ–≥ –ø–∞—Ä—Ñ—é–º–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
                )
                return
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä—Ñ—é–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è
            suitable_perfumes = self._filter_perfumes_by_profile(user_profile, all_perfumes)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π AIProcessor
            if not self.ai_processor:
                await update.callback_query.edit_message_text(
                    "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
                )
                return
            ai_processor = self.ai_processor
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò
            prompt = ai_processor.create_quiz_results_prompt(user_profile, suitable_perfumes)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            await update.callback_query.edit_message_text("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –≥–æ—Ç–æ–≤–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
            ai_response = await ai_processor.call_openrouter_api(prompt, max_tokens=6000)
            
            if ai_response.startswith("–ò–∑–≤–∏–Ω–∏—Ç–µ"):
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"‚ùå {ai_response}"
                )
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏"
            processed_response = ai_processor.process_ai_response_with_links(ai_response, self.db)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üéØ **–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n\n{processed_response}",
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.db.save_usage_stat(user_id, 'quiz_completed')
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
            self.db.end_user_session(user_id)
            
            logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª –∫–≤–∏–∑ –∏ –ø–æ–ª—É—á–∏–ª –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–≤–∏–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    def _filter_perfumes_by_profile(self, user_profile: Dict, all_perfumes: List[Dict]) -> List[Dict]:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–∞—Ä—Ñ—é–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        suitable = []
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        preferred_gender = user_profile.get('gender', '')
        preferred_groups = user_profile.get('preferred_fragrance_groups', [])
        budget_preference = user_profile.get('budget_preference', '')
        
        for perfume in all_perfumes:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—É
            if preferred_gender and preferred_gender != 'unisex':
                perfume_gender = perfume.get('gender', '').lower()
                if perfume_gender and perfume_gender != '—É–Ω–∏—Å–µ–∫—Å' and preferred_gender.lower() not in perfume_gender:
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≥—Ä—É–ø–ø—ã
            if preferred_groups:
                perfume_group = perfume.get('fragrance_group', '').lower()
                group_match = any(group.lower() in perfume_group for group in preferred_groups)
                if not group_match:
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—é–¥–∂–µ—Ç (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            if budget_preference and budget_preference != 'no_limit':
                price = perfume.get('price', 0)
                if budget_preference == 'budget' and price > 100:
                    continue
                elif budget_preference == 'medium' and (price < 50 or price > 200):
                    continue
                elif budget_preference == 'premium' and price < 150:
                    continue
            
            suitable.append(perfume)
        
        # –ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        if len(suitable) < 10:
            suitable.extend([p for p in all_perfumes if p not in suitable][:20])
        
        return suitable[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏