#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
from typing import Dict, List, Any, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime
import json

logger = logging.getLogger(__name__)

class QuizSystem:
    """–ù–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–≤–∏–∑–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ Edwards Fragrance Wheel"""
    
    def __init__(self, db_manager, ai_processor=None):
        self.db = db_manager
        self.ai_processor = ai_processor
        self.quiz_questions = self._initialize_quiz_questions()
        logger.info("üìù QuizSystem v3.0 (Edwards Fragrance Wheel) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _initialize_quiz_questions(self) -> List[Dict[str, Any]]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç 15 –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∫–≤–∏–∑–∞"""
        return [
            # –ë–õ–û–ö 1: –î–ï–ú–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–ô (2 –≤–æ–ø—Ä–æ—Å–∞)
            {
                "id": "gender",
                "block": "demographic",
                "question": "üë§ **–î–ª—è –∫–æ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –∞—Ä–æ–º–∞—Ç?**",
                "type": "single_choice",
                "options": [
                    {
                        "text": "üë© –î–ª—è –º–µ–Ω—è (–∂–µ–Ω—â–∏–Ω–∞)",
                        "value": "female",
                        "keywords": ["–∂–µ–Ω—Å–∫–∏–π", "feminine", "floral", "delicate"]
                    },
                    {
                        "text": "üë® –î–ª—è –º–µ–Ω—è (–º—É–∂—á–∏–Ω–∞)",
                        "value": "male",
                        "keywords": ["–º—É–∂—Å–∫–æ–π", "masculine", "woody", "strong"]
                    },
                    {
                        "text": "üåà –£–Ω–∏—Å–µ–∫—Å",
                        "value": "unisex",
                        "keywords": ["—É–Ω–∏—Å–µ–∫—Å", "unisex", "neutral", "balanced"]
                    }
                ]
            },
            {
                "id": "age_experience",
                "block": "demographic",
                "question": "üéì **–í–∞—à –æ–ø—ã—Ç —Å –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–µ–π?**",
                "type": "single_choice",
                "options": [
                    {
                        "text": "üå± –ù–æ–≤–∏—á–æ–∫ (–ø–µ—Ä–≤—ã–µ –∞—Ä–æ–º–∞—Ç—ã)",
                        "value": "beginner",
                        "keywords": ["–ª–µ–≥–∫–∏–π", "–ø—Ä–æ—Å—Ç–æ–π", "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "–ø–æ–ø—É–ª—è—Ä–Ω—ã–π", "–±–µ–∑–æ–ø–∞—Å–Ω—ã–π"]
                    },
                    {
                        "text": "üåø –ò–º–µ—é –±–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç",
                        "value": "intermediate",
                        "keywords": ["—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π", "—Ç—Ä–µ–Ω–¥–æ–≤—ã–π", "–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π", "—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"]
                    },
                    {
                        "text": "üå≥ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä)",
                        "value": "advanced",
                        "keywords": ["–Ω–∏—à–µ–≤—ã–π", "—ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π", "—Å–ª–æ–∂–Ω—ã–π", "—É–Ω–∏–∫–∞–ª—å–Ω—ã–π", "–∞—Ä—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π"]
                    }
                ]
            },

            # –ë–õ–û–ö 2: –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô (3 –≤–æ–ø—Ä–æ—Å–∞)
            {
                "id": "personality_type",
                "block": "psychological",
                "question": "üß† **–ö–∞–∫–æ–π —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏ –≤–∞–º –±–ª–∏–∂–µ?**",
                "type": "single_choice",
                "options": [
                    {
                        "text": "üíï –†–æ–º–∞–Ω—Ç–∏–∫",
                        "value": "romantic",
                        "keywords": ["—Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π", "—á—É–≤—Å—Ç–≤–µ–Ω–Ω—ã–π", "–Ω–µ–∂–Ω—ã–π", "floral", "rose", "jasmine"]
                    },
                    {
                        "text": "üéì –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª",
                        "value": "intellectual",
                        "keywords": ["—Å–ª–æ–∂–Ω—ã–π", "—É—Ç–æ–Ω—á–µ–Ω–Ω—ã–π", "–∏–∑—ã—Å–∫–∞–Ω–Ω—ã–π", "green", "herbaceous"]
                    },
                    {
                        "text": "üéâ –≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç",
                        "value": "extrovert",
                        "keywords": ["—è—Ä–∫–∏–π", "–∑–∞–º–µ—Ç–Ω—ã–π", "bold", "oriental", "spicy"]
                    },
                    {
                        "text": "ü§´ –ò–Ω—Ç—Ä–æ–≤–µ—Ä—Ç",
                        "value": "introvert",
                        "keywords": ["—Å–ø–æ–∫–æ–π–Ω—ã–π", "–¥–µ–ª–∏–∫–∞—Ç–Ω—ã–π", "subtle", "woody", "musky"]
                    },
                    {
                        "text": "üî¨ –õ–æ–≥–∏–∫-–∞–Ω–∞–ª–∏—Ç–∏–∫",
                        "value": "analytical",
                        "keywords": ["—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", "—á–∏—Å—Ç—ã–π", "minimalistic", "aquatic", "ozonic"]
                    }
                ]
            },
            {
                "id": "lifestyle",
                "block": "psychological", 
                "question": "üèÉ **–û–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏:**",
                "type": "single_choice",
                "options": [
                    {
                        "text": "‚ö° –ê–∫—Ç–∏–≤–Ω—ã–π –∏ –¥–∏–Ω–∞–º–∏—á–Ω—ã–π",
                        "value": "active",
                        "keywords": ["—ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π", "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π", "fresh", "citrus", "energizing"]
                    },
                    {
                        "text": "üßò –°–ø–æ–∫–æ–π–Ω—ã–π –∏ —Ä–∞–∑–º–µ—Ä–µ–Ω–Ω—ã–π",
                        "value": "calm",
                        "keywords": ["—Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π", "–º—è–≥–∫–∏–π", "comforting", "vanilla", "amber"]
                    },
                    {
                        "text": "üé® –¢–≤–æ—Ä—á–µ—Å–∫–∏–π –∏ –∞—Ä—Ç–∏—Å—Ç–∏—á–Ω—ã–π",
                        "value": "creative",
                        "keywords": ["–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π", "–Ω–µ–æ–±—ã—á–Ω—ã–π", "artistic", "incense", "patchouli"]
                    },
                    {
                        "text": "üíº –î–µ–ª–æ–≤–æ–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π",
                        "value": "professional",
                        "keywords": ["—Å—Ç—Ä–æ–≥–∏–π", "—ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π", "sophisticated", "cedar", "sandalwood"]
                    }
                ]
            },
            {
                "id": "usage_time",
                "block": "psychological",
                "question": "‚è∞ **–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –¥–Ω—è –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—Ä–æ–º–∞—Ç?**",
                "type": "multiple_choice",
                "options": [
                    {
                        "text": "üåÖ –£—Ç—Ä–æ–º –∏ –¥–Ω–µ–º",
                        "value": "day",
                        "keywords": ["–¥–Ω–µ–≤–Ω–æ–π", "light", "fresh", "citrus", "green"]
                    },
                    {
                        "text": "üåÉ –í–µ—á–µ—Ä–æ–º",
                        "value": "evening",
                        "keywords": ["–≤–µ—á–µ—Ä–Ω–∏–π", "intense", "oriental", "woody", "amber"]
                    },
                    {
                        "text": "‚ú® –ù–∞ –æ—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏",
                        "value": "special",
                        "keywords": ["–ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π", "luxurious", "sophisticated", "oud", "rare"]
                    },
                    {
                        "text": "üîÑ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ",
                        "value": "universal",
                        "keywords": ["—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π", "versatile", "balanced", "moderate"]
                    }
                ]
            },

            # –ë–õ–û–ö 3: LIFESTYLE (4 –≤–æ–ø—Ä–æ—Å–∞)
            {
                "id": "occasions",
                "block": "lifestyle",
                "question": "üé≠ **–î–ª—è –∫–∞–∫–∏—Ö —Å–ª—É—á–∞–µ–≤ –Ω—É–∂–µ–Ω –∞—Ä–æ–º–∞—Ç?**",
                "type": "multiple_choice",
                "options": [
                    {
                        "text": "üè¢ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞/—É—á–µ–±–∞",
                        "value": "work",
                        "keywords": ["–æ—Ñ–∏—Å–Ω—ã–π", "–¥–µ–ª–∏–∫–∞—Ç–Ω—ã–π", "professional", "clean", "subtle"]
                    },
                    {
                        "text": "üíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –≤—Å—Ç—Ä–µ—á–∏",
                        "value": "romantic",
                        "keywords": ["—Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω—ã–π", "—á—É–≤—Å—Ç–≤–µ–Ω–Ω—ã–π", "seductive", "rose", "ylang-ylang"]
                    },
                    {
                        "text": "üéâ –í–µ—á–µ—Ä–∏–Ω–∫–∏ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
                        "value": "party",
                        "keywords": ["—è—Ä–∫–∏–π", "–∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–π—Å—è", "party", "gourmand", "sweet"]
                    },
                    {
                        "text": "üèÉ –°–ø–æ—Ä—Ç –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                        "value": "sport",
                        "keywords": ["—Å–≤–µ–∂–∏–π", "–ª–µ–≥–∫–∏–π", "sport", "aquatic", "marine"]
                    },
                    {
                        "text": "üõãÔ∏è –û—Ç–¥—ã—Ö –∏ —Ä–µ–ª–∞–∫—Å",
                        "value": "relaxation",
                        "keywords": ["—É—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–π", "–∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π", "relaxing", "lavender", "chamomile"]
                    }
                ]
            },
            {
                "id": "style_preference",
                "block": "lifestyle",
                "question": "üëî **–í–∞—à —Å—Ç–∏–ª—å –≤ –æ–¥–µ–∂–¥–µ:**",
                "type": "single_choice",
                "options": [
                    {
                        "text": "üëë –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π",
                        "value": "classic",
                        "keywords": ["–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "—ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π", "timeless", "chypre", "aldehydic"]
                    },
                    {
                        "text": "üî• –ú–æ–¥–Ω—ã–π –∏ —Ç—Ä–µ–Ω–¥–æ–≤—ã–π",
                        "value": "trendy",
                        "keywords": ["–º–æ–¥–Ω—ã–π", "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π", "trendy", "fruity", "synthetic"]
                    },
                    {
                        "text": "üëï Casual –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π",
                        "value": "casual",
                        "keywords": ["–ø—Ä–æ—Å—Ç–æ–π", "–∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π", "easy-going", "cotton", "clean"]
                    },
                    {
                        "text": "‚ö° –≠–∫—Å—Ç—Ä–∞–≤–∞–≥–∞–Ω—Ç–Ω—ã–π –∏ —è—Ä–∫–∏–π",
                        "value": "bold",
                        "keywords": ["—è—Ä–∫–∏–π", "—Å–º–µ–ª—ã–π", "extravagant", "leather", "tobacco"]
                    }
                ]
            },
            {
                "id": "budget_category",
                "block": "lifestyle",
                "question": "üí∞ **–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:**",
                "type": "single_choice",
                "options": [
                    {
                        "text": "üí∏ –î–æ—Å—Ç—É–ø–Ω–∞—è (–º–∞—Å—Å-–º–∞—Ä–∫–µ—Ç)",
                        "value": "mass_market",
                        "keywords": ["–ø–æ–ø—É–ª—è—Ä–Ω—ã–π", "–¥–æ—Å—Ç—É–ø–Ω—ã–π", "commercial", "mainstream"]
                    },
                    {
                        "text": "üíé –°—Ä–µ–¥–Ω—è—è (—Å–µ–ª–µ–∫—Ç–∏–≤–Ω–∞—è)",
                        "value": "selective",
                        "keywords": ["–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π", "—Å–µ–ª–µ–∫—Ç–∏–≤–Ω—ã–π", "premium", "boutique"]
                    },
                    {
                        "text": "üëë –í—ã—Å–æ–∫–∞—è (–ª—é–∫—Å/–Ω–∏—à–µ–≤–∞—è)",
                        "value": "luxury",
                        "keywords": ["–ª—é–∫—Å–æ–≤—ã–π", "–Ω–∏—à–µ–≤—ã–π", "luxury", "exclusive", "artisanal"]
                    }
                ]
            },
            {
                "id": "longevity_preference",
                "block": "lifestyle",
                "question": "‚è±Ô∏è **–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–π–∫–æ—Å—Ç—å –∞—Ä–æ–º–∞—Ç–∞:**",
                "type": "single_choice",
                "options": [
                    {
                        "text": "üå∏ –õ–µ–≥–∫–∏–π –∏ –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤—ã–π (2-4 —á–∞—Å–∞)",
                        "value": "light",
                        "keywords": ["–ª–µ–≥–∫–∏–π", "–¥–µ–ª–∏–∫–∞—Ç–Ω—ã–π", "eau_de_cologne", "citrus", "aromatic"]
                    },
                    {
                        "text": "‚öñÔ∏è –£–º–µ—Ä–µ–Ω–Ω–æ–π —Å—Ç–æ–π–∫–æ—Å—Ç–∏ (4-6 —á–∞—Å–æ–≤)",
                        "value": "moderate",
                        "keywords": ["—É–º–µ—Ä–µ–Ω–Ω—ã–π", "—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", "eau_de_toilette", "balanced"]
                    },
                    {
                        "text": "üí™ –°—Ç–æ–π–∫–∏–π –∏ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π (8+ —á–∞—Å–æ–≤)",
                        "value": "long_lasting",
                        "keywords": ["—Å—Ç–æ–π–∫–∏–π", "–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π", "eau_de_parfum", "intense", "heavy"]
                    }
                ]
            },

            # –ë–õ–û–ö 4: –°–ï–ù–°–û–†–ù–´–ô (3 –≤–æ–ø—Ä–æ—Å–∞) - Edwards Fragrance Wheel
            {
                "id": "fragrance_families",
                "block": "sensory",
                "question": "üå∏ **–ö–∞–∫–∏–µ –∞—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ–º–µ–π—Å—Ç–≤–∞ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è? (Edwards Wheel)**",
                "type": "multiple_choice",
                "options": [
                    {
                        "text": "üå∏ –¶–≤–µ—Ç–æ—á–Ω—ã–µ (—Ä–æ–∑–∞, –∂–∞—Å–º–∏–Ω, –ø–∏–æ–Ω)",
                        "value": "floral",
                        "keywords": ["floral", "rose", "jasmine", "peony", "lily", "romantic"]
                    },
                    {
                        "text": "üåü –í–æ—Å—Ç–æ—á–Ω—ã–µ/–ê–º–±—Ä–æ–≤—ã–µ (–≤–∞–Ω–∏–ª—å, –∞–º–±—Ä–∞, –º—É—Å–∫—É—Å)",
                        "value": "oriental",
                        "keywords": ["oriental", "amber", "vanilla", "musk", "resin", "warm"]
                    },
                    {
                        "text": "üå≥ –î—Ä–µ–≤–µ—Å–Ω—ã–µ (—Å–∞–Ω–¥–∞–ª, –∫–µ–¥—Ä, –¥—É–±)",
                        "value": "woody",
                        "keywords": ["woody", "sandalwood", "cedar", "oak", "pine", "forest"]
                    },
                    {
                        "text": "üíß –°–≤–µ–∂–∏–µ (—Ü–∏—Ç—Ä—É—Å, –∑–µ–ª–µ–Ω—ã–µ, –≤–æ–¥–Ω—ã–µ)",
                        "value": "fresh",
                        "keywords": ["fresh", "citrus", "green", "aquatic", "marine", "clean"]
                    }
                ]
            },
            {
                "id": "intensity_preference",
                "block": "sensory",
                "question": "üì∂ **–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∞—Ä–æ–º–∞—Ç–∞:**",
                "type": "single_choice",
                "options": [
                    {
                        "text": "üå∏ –î–µ–ª–∏–∫–∞—Ç–Ω–∞—è –∏ —Ç–æ–Ω–∫–∞—è",
                        "value": "delicate",
                        "keywords": ["–¥–µ–ª–∏–∫–∞—Ç–Ω—ã–π", "—Ç–æ–Ω–∫–∏–π", "subtle", "soft", "gentle"]
                    },
                    {
                        "text": "‚öñÔ∏è –£–º–µ—Ä–µ–Ω–Ω–∞—è –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è",
                        "value": "moderate",
                        "keywords": ["—É–º–µ—Ä–µ–Ω–Ω—ã–π", "—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", "moderate", "balanced"]
                    },
                    {
                        "text": "üî• –Ø—Ä–∫–∞—è –∏ –Ω–∞—Å—ã—â–µ–Ω–Ω–∞—è",
                        "value": "intense",
                        "keywords": ["—è—Ä–∫–∏–π", "–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π", "intense", "bold", "powerful"]
                    }
                ]
            },
            {
                "id": "seasonal_preference",
                "block": "sensory",
                "question": "üåç **–í –∫–∞–∫–∏–µ —Å–µ–∑–æ–Ω—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –Ω–æ—Å–∏—Ç—å –∞—Ä–æ–º–∞—Ç?**",
                "type": "multiple_choice",
                "options": [
                    {
                        "text": "üå∏ –í–µ—Å–Ω–∞",
                        "value": "spring",
                        "keywords": ["–≤–µ—Å–µ–Ω–Ω–∏–π", "—Å–≤–µ–∂–∏–π", "green", "floral", "light"]
                    },
                    {
                        "text": "‚òÄÔ∏è –õ–µ—Ç–æ",
                        "value": "summer",
                        "keywords": ["–ª–µ—Ç–Ω–∏–π", "–ª–µ–≥–∫–∏–π", "citrus", "aquatic", "fresh"]
                    },
                    {
                        "text": "üçÇ –û—Å–µ–Ω—å",
                        "value": "autumn",
                        "keywords": ["–æ—Å–µ–Ω–Ω–∏–π", "—Ç–µ–ø–ª—ã–π", "spicy", "woody", "amber"]
                    },
                    {
                        "text": "‚ùÑÔ∏è –ó–∏–º–∞",
                        "value": "winter",
                        "keywords": ["–∑–∏–º–Ω–∏–π", "—Å–æ–≥—Ä–µ–≤–∞—é—â–∏–π", "oriental", "heavy", "intense"]
                    }
                ]
            },

            # –ë–õ–û–ö 5: –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û-–ê–°–°–û–¶–ò–ê–¢–ò–í–ù–´–ô (3 –≤–æ–ø—Ä–æ—Å–∞)
            {
                "id": "desired_mood",
                "block": "emotional",
                "question": "üòä **–ö–∞–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —ç–º–æ—Ü–∏–∏ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å?**",
                "type": "multiple_choice",
                "options": [
                    {
                        "text": "üí™ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ —Å–∏–ª—É",
                        "value": "confidence",
                        "keywords": ["—É–≤–µ—Ä–µ–Ω–Ω—ã–π", "—Å–∏–ª—å–Ω—ã–π", "powerful", "dominant", "leader"]
                    },
                    {
                        "text": "üíï –†–æ–º–∞–Ω—Ç–∏–∫—É –∏ –Ω–µ–∂–Ω–æ—Å—Ç—å",
                        "value": "romance",
                        "keywords": ["—Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π", "–Ω–µ–∂–Ω—ã–π", "romantic", "tender", "loving"]
                    },
                    {
                        "text": "üëë –≠–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç—å –∏ –∏–∑—ã—Å–∫–∞–Ω–Ω–æ—Å—Ç—å",
                        "value": "elegance",
                        "keywords": ["—ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π", "–∏–∑—ã—Å–∫–∞–Ω–Ω—ã–π", "sophisticated", "refined", "classy"]
                    },
                    {
                        "text": "‚ö° –≠–Ω–µ—Ä–≥–∏—é –∏ –∂–∏–∑–Ω–µ—Ä–∞–¥–æ—Å—Ç–Ω–æ—Å—Ç—å",
                        "value": "energy",
                        "keywords": ["—ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π", "–∂–∏–∑–Ω–µ—Ä–∞–¥–æ—Å—Ç–Ω—ã–π", "energetic", "vibrant", "happy"]
                    },
                    {
                        "text": "üßò –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ –≥–∞—Ä–º–æ–Ω–∏—é",
                        "value": "calm",
                        "keywords": ["—Å–ø–æ–∫–æ–π–Ω—ã–π", "–≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π", "peaceful", "serene", "balanced"]
                    }
                ]
            },
            {
                "id": "scent_memories",
                "block": "emotional",
                "question": "üå∫ **–ö–∞–∫–∏–µ –∞—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∞–º –ø—Ä–∏—è—Ç–Ω—ã?**",
                "type": "multiple_choice",
                "options": [
                    {
                        "text": "üå∑ –¶–≤–µ—Ç—É—â–∏–π —Å–∞–¥ –≤–µ—Å–Ω–æ–π",
                        "value": "garden",
                        "keywords": ["—Ü–≤–µ—Ç–æ—á–Ω—ã–π", "–ø—Ä–∏—Ä–æ–¥–Ω—ã–π", "garden", "blooming", "natural"]
                    },
                    {
                        "text": "üè† –£—é—Ç–Ω—ã–π –¥–æ–º —Å –≤—ã–ø–µ—á–∫–æ–π",
                        "value": "home_comfort",
                        "keywords": ["—É—é—Ç–Ω—ã–π", "—Å–ª–∞–¥–∫–∏–π", "gourmand", "vanilla", "caramel"]
                    },
                    {
                        "text": "üå≤ –ü—Ä–æ–≥—É–ª–∫–∞ –ø–æ –ª–µ—Å—É",
                        "value": "forest",
                        "keywords": ["–ª–µ—Å–Ω–æ–π", "–¥—Ä–µ–≤–µ—Å–Ω—ã–π", "forest", "pine", "earthy"]
                    },
                    {
                        "text": "üåä –ú–æ—Ä—Å–∫–æ–π –±–µ—Ä–µ–≥",
                        "value": "ocean",
                        "keywords": ["–º–æ—Ä—Å–∫–æ–π", "—Å–≤–µ–∂–∏–π", "marine", "salty", "breeze"]
                    },
                    {
                        "text": "üïå –í–æ—Å—Ç–æ—á–Ω—ã–π –±–∞–∑–∞—Ä",
                        "value": "oriental_market",
                        "keywords": ["–≤–æ—Å—Ç–æ—á–Ω—ã–π", "–ø—Ä—è–Ω—ã–π", "spicy", "exotic", "incense"]
                    }
                ]
            },
            {
                "id": "color_associations",
                "block": "emotional",
                "question": "üé® **–ö–∞–∫–∏–µ —Ü–≤–µ—Ç–∞ –∞—Å—Å–æ—Ü–∏–∏—Ä—É—é—Ç—Å—è —Å –≤–∞—à–∏–º –∏–¥–µ–∞–ª—å–Ω—ã–º –∞—Ä–æ–º–∞—Ç–æ–º?**",
                "type": "multiple_choice",
                "options": [
                    {
                        "text": "‚ö™ –ë–µ–ª—ã–π –∏ —Å–≤–µ—Ç–ª—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏",
                        "value": "white_light",
                        "keywords": ["—á–∏—Å—Ç—ã–π", "–Ω–µ–≤–∏–Ω–Ω—ã–π", "clean", "pure", "innocent"]
                    },
                    {
                        "text": "üå∏ –†–æ–∑–æ–≤—ã–π –∏ –ø–µ—Ä—Å–∏–∫–æ–≤—ã–π",
                        "value": "pink_peach",
                        "keywords": ["–Ω–µ–∂–Ω—ã–π", "–∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π", "gentle", "feminine", "soft"]
                    },
                    {
                        "text": "üü° –ó–æ–ª–æ—Ç–æ–π –∏ —è–Ω—Ç–∞—Ä–Ω—ã–π",
                        "value": "gold_amber",
                        "keywords": ["—Ç–µ–ø–ª—ã–π", "—Ä–æ—Å–∫–æ—à–Ω—ã–π", "warm", "luxurious", "rich"]
                    },
                    {
                        "text": "üü¢ –ó–µ–ª–µ–Ω—ã–π –∏ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —Ç–æ–Ω–∞",
                        "value": "green_natural",
                        "keywords": ["–ø—Ä–∏—Ä–æ–¥–Ω—ã–π", "—Å–≤–µ–∂–∏–π", "natural", "green", "herbal"]
                    },
                    {
                        "text": "üîµ –°–∏–Ω–∏–π –∏ –º–æ—Ä—Å–∫–∏–µ –æ—Ç—Ç–µ–Ω–∫–∏",
                        "value": "blue_marine",
                        "keywords": ["–ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π", "—Å–≤–µ–∂–∏–π", "cool", "aquatic", "marine"]
                    },
                    {
                        "text": "‚ö´ –¢–µ–º–Ω—ã–µ –∏ –≥–ª—É–±–æ–∫–∏–µ —Ü–≤–µ—Ç–∞",
                        "value": "dark_deep",
                        "keywords": ["–≥–ª—É–±–æ–∫–∏–π", "—Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π", "deep", "mysterious", "intense"]
                    }
                ]
            }
        ]

    async def start_quiz(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∫–≤–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–∏–∑–∞
        context.user_data['quiz_step'] = 0
        context.user_data['quiz_answers'] = {}
        
        await self._send_question(update, context, 0)
        
        logger.info(f"üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –Ω–æ–≤—ã–π –∫–≤–∏–∑ (v3.0 Edwards Wheel)")

    async def handle_quiz_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –∫–≤–∏–∑–∞"""
        query = update.callback_query
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        current_step = context.user_data.get('quiz_step', 0)
        current_answers = context.user_data.get('quiz_answers', {})
        
        logger.info(f"Quiz callback: user={user_id}, step={current_step}, data={query.data}")
        
        try:
            if query.data == "quiz_next":
                # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
                next_step = current_step + 1
                if next_step < len(self.quiz_questions):
                    context.user_data['quiz_step'] = next_step
                    await self._send_question(update, context, next_step)
                else:
                    await self._finish_quiz(update, context, current_answers)
                    
            elif query.data == "quiz_finish":
                # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–∏–∑–∞
                await self._finish_quiz(update, context, current_answers)
                
            elif query.data == "quiz_prev":
                # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
                prev_step = current_step - 1
                if prev_step >= 0:
                    context.user_data['quiz_step'] = prev_step
                    await self._send_question(update, context, prev_step)
                
            elif query.data.startswith("quiz_answer_"):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
                parts = query.data.split("_", 3)
                if len(parts) >= 4:
                    question_id = parts[2]
                    answer_value = parts[3]
                    
                    question = self.quiz_questions[current_step]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ question_id —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
                    if question['id'] == question_id:
                        if question['type'] == 'single_choice':
                            current_answers[question_id] = answer_value
                        elif question['type'] == 'multiple_choice':
                            if question_id not in current_answers:
                                current_answers[question_id] = []
                            
                            if answer_value in current_answers[question_id]:
                                current_answers[question_id].remove(answer_value)
                            else:
                                current_answers[question_id].append(answer_value)
                        
                        context.user_data['quiz_answers'] = current_answers
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                        await self._send_question(update, context, current_step)
                    else:
                        logger.warning(f"Question ID mismatch: expected {question['id']}, got {question_id}")
                        await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–≤–∏–∑–∞: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    async def _send_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE, step: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if step >= len(self.quiz_questions):
            return
            
        question = self.quiz_questions[step]
        current_answers = context.user_data.get('quiz_answers', {})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        
        for option in question['options']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç
            is_selected = False
            if question['type'] == 'single_choice':
                is_selected = current_answers.get(question['id']) == option['value']
            elif question['type'] == 'multiple_choice':
                is_selected = option['value'] in current_answers.get(question['id'], [])
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            text = f"‚úÖ {option['text']}" if is_selected else option['text']
            
            callback_data = f"quiz_answer_{question['id']}_{option['value']}"
            keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å)
        has_answer = question['id'] in current_answers and bool(current_answers[question['id']])
        if has_answer:
            if step < len(self.quiz_questions) - 1:
                control_buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="quiz_next"))
            else:
                control_buttons.append(InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–∏–∑", callback_data="quiz_finish"))
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        if step > 0:
            control_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="quiz_prev"))
        
        control_buttons.append(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
        
        if control_buttons:
            keyboard.append(control_buttons)
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–ª–æ–∫ –≤–æ–ø—Ä–æ—Å–∞
        block_labels = {
            'demographic': '1Ô∏è‚É£ –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫',
            'psychological': '2Ô∏è‚É£ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫', 
            'lifestyle': '3Ô∏è‚É£ Lifestyle –±–ª–æ–∫',
            'sensory': '4Ô∏è‚É£ –°–µ–Ω—Å–æ—Ä–Ω—ã–π –±–ª–æ–∫ (Edwards Wheel)',
            'emotional': '5Ô∏è‚É£ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ-–∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –±–ª–æ–∫'
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        progress = f"–í–æ–ø—Ä–æ—Å {step + 1} –∏–∑ {len(self.quiz_questions)}"
        block_info = block_labels.get(question['block'], '')
        
        if question['type'] == 'multiple_choice':
            instruction = "\nüí° *–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤*"
        else:
            instruction = "\nüí° *–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç*"
        
        question_text = f"üî¨ **{progress}**\n{block_info}\n\n{question['question']}{instruction}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(
                    text=question_text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–≤–∏–∑–∞: {e}")
                try:
                    await update.effective_chat.send_message(
                        text=question_text,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                except Exception as e2:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–≤–∏–∑–∞: {e2}")
        else:
            await update.message.reply_text(
                text=question_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )

    async def _finish_quiz(self, update: Update, context: ContextTypes.DEFAULT_TYPE, quiz_answers: Dict):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∫–≤–∏–∑ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        user_id = update.effective_user.id
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã —Å –ø–æ–º–æ—â—å—é Edwards Fragrance Wheel
        analysis_result = self._analyze_quiz_answers_edwards(quiz_answers)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db.save_user_quiz_profile(user_id, analysis_result['profile'])
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä—Ñ—é–º—ã –∏–∑ –ë–î
        suitable_perfumes = self.db.get_all_perfumes_from_database()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI —Å –∞–Ω–∞–ª–∏–∑–æ–º Edwards Wheel
        ai_prompt = self._create_ai_prompt_with_edwards(analysis_result, suitable_perfumes)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI
        try:
            ai_response = await self.ai_processor.process_message(ai_prompt, user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            result_text = f"""
üéØ **–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!**

üî¨ **–ê–Ω–∞–ª–∏–∑ –ø–æ Edwards Fragrance Wheel:**
üå∏ –¶–≤–µ—Ç–æ—á–Ω—ã–µ: {analysis_result['edwards_analysis']['floral']}%
üåü –í–æ—Å—Ç–æ—á–Ω—ã–µ: {analysis_result['edwards_analysis']['oriental']}%
üå≥ –î—Ä–µ–≤–µ—Å–Ω—ã–µ: {analysis_result['edwards_analysis']['woody']}%
üíß –°–≤–µ–∂–∏–µ: {analysis_result['edwards_analysis']['fresh']}%

**–î–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ —Å–µ–º–µ–π—Å—Ç–≤–æ:** {analysis_result['dominant_family']}

ü§ñ **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
{ai_response}
            """
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ AI –∑–∞–ø—Ä–æ—Å–∞: {e}")
            result_text = f"""
üéØ **–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!**

üî¨ **–ê–Ω–∞–ª–∏–∑ –ø–æ Edwards Fragrance Wheel:**
üå∏ –¶–≤–µ—Ç–æ—á–Ω—ã–µ: {analysis_result['edwards_analysis']['floral']}%
üåü –í–æ—Å—Ç–æ—á–Ω—ã–µ: {analysis_result['edwards_analysis']['oriental']}%
üå≥ –î—Ä–µ–≤–µ—Å–Ω—ã–µ: {analysis_result['edwards_analysis']['woody']}%
üíß –°–≤–µ–∂–∏–µ: {analysis_result['edwards_analysis']['fresh']}%

**–î–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ —Å–µ–º–µ–π—Å—Ç–≤–æ:** {analysis_result['dominant_family']}

‚ö†Ô∏è AI-–∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!
            """
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="start_quiz")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(
                    text=result_text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            except Exception:
                await update.effective_chat.send_message(
                    text=result_text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
        else:
            await update.message.reply_text(
                text=result_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª –∫–≤–∏–∑. –î–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ —Å–µ–º–µ–π—Å—Ç–≤–æ: {analysis_result['dominant_family']}")

    def _analyze_quiz_answers_edwards(self, quiz_answers: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –∫–≤–∏–∑–∞ —Å –ø–æ–º–æ—â—å—é Edwards Fragrance Wheel"""
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤
        all_keywords = []
        profile = {}
        
        for question in self.quiz_questions:
            question_id = question['id']
            if question_id in quiz_answers:
                answer_values = quiz_answers[question_id]
                if not isinstance(answer_values, list):
                    answer_values = [answer_values]
                
                profile[question_id] = answer_values
                
                # –°–æ–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                for answer_value in answer_values:
                    for option in question['options']:
                        if option['value'] == answer_value:
                            all_keywords.extend(option.get('keywords', []))
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ Edwards Fragrance Wheel
        edwards_keywords = {
            'floral': ['floral', 'rose', 'jasmine', 'peony', 'lily', 'romantic', 'feminine', 'gentle', '–Ω–µ–∂–Ω—ã–π', '—Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π', '—á—É–≤—Å—Ç–≤–µ–Ω–Ω—ã–π', '–∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π'],
            'oriental': ['oriental', 'amber', 'vanilla', 'musk', 'warm', 'spicy', 'exotic', 'intense', '—Ç–µ–ø–ª—ã–π', '–ø—Ä—è–Ω—ã–π', '–≤–æ—Å—Ç–æ—á–Ω—ã–π', '–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π', '—Å–æ–≥—Ä–µ–≤–∞—é—â–∏–π'],
            'woody': ['woody', 'sandalwood', 'cedar', 'forest', 'pine', 'earthy', 'masculine', '–¥—Ä–µ–≤–µ—Å–Ω—ã–π', '–ª–µ—Å–Ω–æ–π', '–º—É–∂—Å–∫–æ–π', '—Å—Ç—Ä–æ–≥–∏–π'],
            'fresh': ['fresh', 'citrus', 'green', 'aquatic', 'marine', 'clean', 'light', '—Å–≤–µ–∂–∏–π', '–ª–µ–≥–∫–∏–π', '–º–æ—Ä—Å–∫–æ–π', '—á–∏—Å—Ç—ã–π', '–ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π', '–¥–Ω–µ–≤–Ω–æ–π', '–ª–µ—Ç–Ω–∏–π', '–≤–µ—Å–µ–Ω–Ω–∏–π']
        }
        
        edwards_scores = {family: 0 for family in edwards_keywords.keys()}
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        for keyword in all_keywords:
            keyword_lower = keyword.lower()
            for family, family_keywords in edwards_keywords.items():
                if keyword_lower in family_keywords:
                    edwards_scores[family] += 1
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        total_score = sum(edwards_scores.values())
        if total_score > 0:
            edwards_percentages = {
                family: round((score / total_score) * 100)
                for family, score in edwards_scores.items()
            }
        else:
            edwards_percentages = {family: 0 for family in edwards_keywords.keys()}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ —Å–µ–º–µ–π—Å—Ç–≤–æ
        dominant_family = max(edwards_percentages.keys(), key=lambda k: edwards_percentages[k])
        if edwards_percentages[dominant_family] == 0:
            dominant_family = 'fresh'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        return {
            'profile': profile,
            'all_keywords': all_keywords,
            'edwards_analysis': edwards_percentages,
            'dominant_family': dominant_family,
            'total_keywords': len(all_keywords),
            'unique_keywords': len(set(all_keywords))
        }

    def _create_ai_prompt_with_edwards(self, analysis_result: Dict, perfumes_data: List) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è AI —Å –∞–Ω–∞–ª–∏–∑–æ–º Edwards Wheel"""
        
        family_names = {
            'floral': '–¶–≤–µ—Ç–æ—á–Ω—ã–µ',
            'oriental': '–í–æ—Å—Ç–æ—á–Ω—ã–µ/–ê–º–±—Ä–æ–≤—ã–µ',
            'woody': '–î—Ä–µ–≤–µ—Å–Ω—ã–µ',
            'fresh': '–°–≤–µ–∂–∏–µ'
        }
        
        prompt = f"""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–ø–∞—Ä—Ñ—é–º–µ—Ä. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞—É—á–Ω–æ–≥–æ –∫–≤–∏–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ Edwards Fragrance Wheel –∏ –ø–æ–¥–±–µ—Ä–∏ –∏–¥–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä—Ñ—é–º—ã.

–ê–ù–ê–õ–ò–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
üî¨ Edwards Fragrance Wheel –∞–Ω–∞–ª–∏–∑:
- –¶–≤–µ—Ç–æ—á–Ω—ã–µ: {analysis_result['edwards_analysis']['floral']}%
- –í–æ—Å—Ç–æ—á–Ω—ã–µ/–ê–º–±—Ä–æ–≤—ã–µ: {analysis_result['edwards_analysis']['oriental']}%  
- –î—Ä–µ–≤–µ—Å–Ω—ã–µ: {analysis_result['edwards_analysis']['woody']}%
- –°–≤–µ–∂–∏–µ: {analysis_result['edwards_analysis']['fresh']}%

–î–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ —Å–µ–º–µ–π—Å—Ç–≤–æ: {family_names.get(analysis_result['dominant_family'], analysis_result['dominant_family'])}

–ö–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {', '.join(analysis_result['all_keywords'][:15])}

–ó–ê–î–ê–ß–ê:
1. –ü–æ–¥–±–µ—Ä–∏ 3-5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–∞—Ä—Ñ—é–º–æ–≤ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
2. –£—á–∏—Ç—ã–≤–∞–π –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ —Å–µ–º–µ–π—Å—Ç–≤–æ Edwards Wheel
3. –û–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ –∞—Ä–æ–º–∞—Ç—ã –ø–æ–¥—Ö–æ–¥—è—Ç
4. –£–∫–∞–∂–∏ –¥–ª—è –∫–∞–∫–∏—Ö —Å–ª—É—á–∞–µ–≤ –∫–∞–∂–¥—ã–π –∞—Ä–æ–º–∞—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç
5. –î–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∞—Ä–æ–º–∞—Ç–∞

–ö–ê–¢–ê–õ–û–ì –ü–ê–†–§–Æ–ú–û–í:
{json.dumps(perfumes_data[:100], ensure_ascii=False, indent=2)}

–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –∫–∞–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤ –ø–∞—Ä—Ñ—é–º–µ—Ä–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ.
        """
        
        return prompt