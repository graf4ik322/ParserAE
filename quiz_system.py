#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from typing import Dict, List, Any, Optional
from dataclasses import dataclass
from enum import Enum

class QuizCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫–≤–∏–∑–∞"""
    BASIC_INFO = "basic_info"
    PREFERENCES = "preferences"
    LIFESTYLE = "lifestyle"
    OCCASIONS = "occasions"
    EXPERIENCE = "experience"

@dataclass
class QuizQuestion:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫–≤–∏–∑–∞"""
    id: str
    category: QuizCategory
    text: str
    options: List[str]
    key: str
    weight: float = 1.0
    depends_on: Optional[str] = None

class PerfumeQuizSystem:
    """–°–∏—Å—Ç–µ–º–∞ –∫–≤–∏–∑–∞ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä—Ñ—é–º–æ–≤"""
    
    def __init__(self):
        self.questions = self._create_quiz_questions()
        self.question_flow = self._create_question_flow()
    
    def _create_quiz_questions(self) -> List[QuizQuestion]:
        """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∫–≤–∏–∑–∞"""
        return [
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            QuizQuestion(
                id="gender",
                category=QuizCategory.BASIC_INFO,
                text="üë§ –î–ª—è –∫–æ–≥–æ –ø–æ–¥–±–∏—Ä–∞–µ–º –∞—Ä–æ–º–∞—Ç?",
                options=[
                    "–î–ª—è –º—É–∂—á–∏–Ω—ã", 
                    "–î–ª—è –∂–µ–Ω—â–∏–Ω—ã", 
                    "–£–Ω–∏—Å–µ–∫—Å (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)", 
                    "–ù–µ –≤–∞–∂–Ω–æ"
                ],
                key="target_gender",
                weight=2.0
            ),
            
            QuizQuestion(
                id="age_group",
                category=QuizCategory.BASIC_INFO,
                text="üéÇ –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞?",
                options=[
                    "18-25 –ª–µ—Ç (–º–æ–ª–æ–¥–µ–∂–Ω—ã–π)", 
                    "25-35 –ª–µ—Ç (–∞–∫—Ç–∏–≤–Ω—ã–π)", 
                    "35-50 –ª–µ—Ç (–∑—Ä–µ–ª—ã–π)", 
                    "50+ –ª–µ—Ç (—ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π)"
                ],
                key="age_group",
                weight=1.5
            ),
            
            # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∞—Ä–æ–º–∞—Ç–∞–º
            QuizQuestion(
                id="fragrance_family",
                category=QuizCategory.PREFERENCES,
                text="üå∏ –ö–∞–∫–∏–µ –∞—Ä–æ–º–∞—Ç—ã –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è?",
                options=[
                    "–¶–≤–µ—Ç–æ—á–Ω—ã–µ (—Ä–æ–∑–∞, –∂–∞—Å–º–∏–Ω, –ø–∏–æ–Ω)",
                    "–¶–∏—Ç—Ä—É—Å–æ–≤—ã–µ (–ª–∏–º–æ–Ω, –∞–ø–µ–ª—å—Å–∏–Ω, –≥—Ä–µ–π–ø—Ñ—Ä—É—Ç)",
                    "–î—Ä–µ–≤–µ—Å–Ω—ã–µ (—Å–∞–Ω–¥–∞–ª, –∫–µ–¥—Ä, –ø–∞—á—É–ª–∏)",
                    "–í–æ—Å—Ç–æ—á–Ω—ã–µ (–≤–∞–Ω–∏–ª—å, –∞–º–±—Ä–∞, –º—É—Å–∫—É—Å)",
                    "–°–≤–µ–∂–∏–µ (–º–æ—Ä—Å–∫–∏–µ, –∑–µ–ª–µ–Ω—ã–µ)",
                    "–§—Ä—É–∫—Ç–æ–≤—ã–µ (—è–≥–æ–¥—ã, –ø–µ—Ä—Å–∏–∫, —è–±–ª–æ–∫–æ)",
                    "–ù–µ –∑–Ω–∞—é, –ø–æ–º–æ–≥–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å"
                ],
                key="fragrance_family",
                weight=2.5
            ),
            
            QuizQuestion(
                id="intensity",
                category=QuizCategory.PREFERENCES,
                text="üí™ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∞—Ä–æ–º–∞—Ç–∞?",
                options=[
                    "–õ–µ–≥–∫–∏–π, –µ–¥–≤–∞ –∑–∞–º–µ—Ç–Ω—ã–π",
                    "–£–º–µ—Ä–µ–Ω–Ω—ã–π, –ø—Ä–∏—è—Ç–Ω—ã–π —à–ª–µ–π—Ñ",
                    "–ù–∞—Å—ã—â–µ–Ω–Ω—ã–π, —è—Ä–∫–∏–π",
                    "–û—á–µ–Ω—å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π, —Å—Ç–æ–π–∫–∏–π"
                ],
                key="intensity",
                weight=2.0
            ),
            
            # –û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏
            QuizQuestion(
                id="lifestyle",
                category=QuizCategory.LIFESTYLE,
                text="üèÉ‚Äç‚ôÇÔ∏è –í–∞—à –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏?",
                options=[
                    "–ê–∫—Ç–∏–≤–Ω—ã–π, —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π",
                    "–î–µ–ª–æ–≤–æ–π, –æ—Ñ–∏—Å–Ω—ã–π",
                    "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π, —Å–≤–æ–±–æ–¥–Ω—ã–π",
                    "–î–æ–º–∞—à–Ω–∏–π, —Å–ø–æ–∫–æ–π–Ω—ã–π"
                ],
                key="lifestyle",
                weight=1.5
            ),
            
            QuizQuestion(
                id="season",
                category=QuizCategory.OCCASIONS,
                text="üå°Ô∏è –î–ª—è –∫–∞–∫–æ–≥–æ —Å–µ–∑–æ–Ω–∞?",
                options=[
                    "–í–µ—Å–Ω–∞ (—Å–≤–µ–∂–∏–µ, —Ü–≤–µ—Ç–æ—á–Ω—ã–µ)",
                    "–õ–µ—Ç–æ (–ª–µ–≥–∫–∏–µ, —Ü–∏—Ç—Ä—É—Å–æ–≤—ã–µ)",
                    "–û—Å–µ–Ω—å (—Ç–µ–ø–ª—ã–µ, –ø—Ä—è–Ω—ã–µ)",
                    "–ó–∏–º–∞ (–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ, —É—é—Ç–Ω—ã–µ)",
                    "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π (–∫—Ä—É–≥–ª—ã–π –≥–æ–¥)"
                ],
                key="season",
                weight=1.8
            ),
            
            QuizQuestion(
                id="time_of_day",
                category=QuizCategory.OCCASIONS,
                text="‚è∞ –í—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è?",
                options=[
                    "–£—Ç—Ä–æ/–î–µ–Ω—å (–±–æ–¥—Ä—è—â–∏–µ)",
                    "–í–µ—á–µ—Ä/–ù–æ—á—å (—Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω—ã–µ)",
                    "–û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏ (–ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ)",
                    "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ)"
                ],
                key="time_of_day",
                weight=1.7
            ),
            
            QuizQuestion(
                id="occasion",
                category=QuizCategory.OCCASIONS,
                text="üé≠ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–≤–æ–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è?",
                options=[
                    "–†–∞–±–æ—Ç–∞, –æ—Ñ–∏—Å",
                    "–°–≤–∏–¥–∞–Ω–∏—è, —Ä–æ–º–∞–Ω—Ç–∏–∫–∞",
                    "–í–µ—á–µ—Ä–∏–Ω–∫–∏, –∫–ª—É–±—ã",
                    "–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è –∂–∏–∑–Ω—å",
                    "–û—Å–æ–±—ã–µ —Å–æ–±—ã—Ç–∏—è"
                ],
                key="occasion",
                weight=1.6
            ),
            
            # –û–ø—ã—Ç —Å –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–µ–π
            QuizQuestion(
                id="experience",
                category=QuizCategory.EXPERIENCE,
                text="üéì –í–∞—à –æ–ø—ã—Ç —Å –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–µ–π?",
                options=[
                    "–ù–æ–≤–∏—á–æ–∫, —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞—é",
                    "–ò–Ω–æ–≥–¥–∞ –ø–æ–∫—É–ø–∞—é –∞—Ä–æ–º–∞—Ç—ã",
                    "–†–∞–∑–±–∏—Ä–∞—é—Å—å –≤ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏",
                    "–≠–∫—Å–ø–µ—Ä—Ç, –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä"
                ],
                key="experience_level",
                weight=1.2
            ),
            
            QuizQuestion(
                id="budget",
                category=QuizCategory.EXPERIENCE,
                text="üí∞ –ë—é–¥–∂–µ—Ç –Ω–∞ –∞—Ä–æ–º–∞—Ç?",
                options=[
                    "–≠–∫–æ–Ω–æ–º–Ω—ã–π (–¥–æ 30‚ÇΩ)",
                    "–°—Ä–µ–¥–Ω–∏–π (30-45‚ÇΩ)",
                    "–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ (45‚ÇΩ+)",
                    "–ù–µ –≤–∞–∂–Ω–æ, –≥–ª–∞–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
                ],
                key="budget",
                weight=1.3
            ),
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            QuizQuestion(
                id="quality_preference",
                category=QuizCategory.PREFERENCES,
                text="‚≠ê –ß—Ç–æ –≤–∞–∂–Ω–µ–µ?",
                options=[
                    "–ö–∞—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è",
                    "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞—Ä–æ–º–∞—Ç–∞",
                    "–£–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å –±—Ä–µ–Ω–¥–∞",
                    "–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ"
                ],
                key="quality_preference",
                weight=1.4
            ),
            
            QuizQuestion(
                id="factory_preference",
                category=QuizCategory.EXPERIENCE,
                text="üè≠ –ï—Å—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ñ–∞–±—Ä–∏–∫–∞–º?",
                options=[
                    "Givaudan (–ø—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–æ)",
                    "LZ (—à–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä)",
                    "Argeville (–∫–ª–∞—Å—Å–∏–∫–∞)",
                    "SELUZ (—ç–∫—Å–∫–ª—é–∑–∏–≤)",
                    "–ù–µ –≤–∞–∂–Ω–æ, –ª—é–±–∞—è"
                ],
                key="factory_preference",
                weight=1.1
            )
        ]
    
    def _create_question_flow(self) -> Dict[str, List[str]]:
        """–°–æ–∑–¥–∞–µ—Ç –ª–æ–≥–∏–∫—É –ø–æ—Ç–æ–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        return {
            "start": ["gender", "age_group"],
            "basic_complete": ["fragrance_family", "intensity"],
            "preferences_complete": ["lifestyle", "season"],
            "lifestyle_complete": ["time_of_day", "occasion"],
            "occasions_complete": ["experience", "budget"],
            "experience_complete": ["quality_preference", "factory_preference"],
            "end": []
        }
    
    def get_next_question(self, current_answers: Dict[str, str], 
                         current_step: int) -> Optional[QuizQuestion]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
        if current_step >= len(self.questions):
            return None
        
        return self.questions[current_step]
    
    def get_total_questions(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        return len(self.questions)
    
    def analyze_answers(self, answers: Dict[str, str]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –∏ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
        profile = {
            "target_audience": self._analyze_target_audience(answers),
            "fragrance_preferences": self._analyze_fragrance_preferences(answers),
            "usage_context": self._analyze_usage_context(answers),
            "quality_requirements": self._analyze_quality_requirements(answers),
            "weighted_preferences": self._calculate_weighted_preferences(answers)
        }
        
        return profile
    
    def _analyze_target_audience(self, answers: Dict[str, str]) -> Dict[str, str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é"""
        return {
            "gender": answers.get("target_gender", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
            "age_group": answers.get("age_group", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
            "lifestyle": answers.get("lifestyle", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        }
    
    def _analyze_fragrance_preferences(self, answers: Dict[str, str]) -> Dict[str, str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∞—Ä–æ–º–∞—Ç–∞–º"""
        return {
            "family": answers.get("fragrance_family", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
            "intensity": answers.get("intensity", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
            "quality_focus": answers.get("quality_preference", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        }
    
    def _analyze_usage_context(self, answers: Dict[str, str]) -> Dict[str, str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        return {
            "season": answers.get("season", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
            "time": answers.get("time_of_day", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
            "occasion": answers.get("occasion", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        }
    
    def _analyze_quality_requirements(self, answers: Dict[str, str]) -> Dict[str, str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—á–µ—Å—Ç–≤—É"""
        return {
            "budget": answers.get("budget", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
            "experience": answers.get("experience_level", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
            "factory": answers.get("factory_preference", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        }
    
    def _calculate_weighted_preferences(self, answers: Dict[str, str]) -> Dict[str, float]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"""
        weights = {}
        
        for question in self.questions:
            if question.key in answers:
                answer = answers[question.key]
                weights[f"{question.key}_{answer}"] = question.weight
        
        return weights
    
    def create_recommendation_prompt(self, profile: Dict[str, Any], 
                                   available_perfumes: List[str],
                                   factory_analysis: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target = profile["target_audience"]
        preferences = profile["fragrance_preferences"]
        context = profile["usage_context"]
        quality = profile["quality_requirements"]
        
        profile_description = f"""
–ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
‚Ä¢ –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {target['gender']}, {target['age_group']}, {target['lifestyle']}
‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {preferences['family']}, –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å {preferences['intensity']}
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {context['season']}, {context['time']}, –¥–ª—è {context['occasion']}
‚Ä¢ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –±—é–¥–∂–µ—Ç {quality['budget']}, –æ–ø—ã—Ç {quality['experience']}, —Ñ–∞–±—Ä–∏–∫–∞ {quality['factory']}
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {preferences['quality_focus']}
"""
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—Ä–æ–º–∞—Ç–æ–≤
        limited_perfumes = available_perfumes[:300]
        
        # –¢–æ–ø —Ñ–∞–±—Ä–∏–∫
        top_factories = []
        for factory, data in list(factory_analysis.items())[:8]:
            top_factories.append(f"- {factory}: {data['perfume_count']} –∞—Ä–æ–º–∞—Ç–æ–≤, –∫–∞—á–µ—Å—Ç–≤–æ: {', '.join(data.get('quality_levels', ['—Å—Ç–∞–Ω–¥–∞—Ä—Ç'])[:2])}")
        
        prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç-–ø–∞—Ä—Ñ—é–º–µ—Ä –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –ü–æ–¥–±–µ—Ä–∏ –∏–¥–µ–∞–ª—å–Ω—ã–µ –∞—Ä–æ–º–∞—Ç—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.

{profile_description}

–î–û–°–¢–£–ü–ù–´–ï –ê–†–û–ú–ê–¢–´ (–±—Ä–µ–Ω–¥ - –Ω–∞–∑–≤–∞–Ω–∏–µ + —Ñ–∞–±—Ä–∏–∫–∞):
{chr(10).join(limited_perfumes)}

–ê–ù–ê–õ–ò–ó –§–ê–ë–†–ò–ö:
{chr(10).join(top_factories)}

–ó–ê–î–ê–ß–ê:
1. –í—ã–±–µ—Ä–∏ 5-7 –∞—Ä–æ–º–∞—Ç–æ–≤, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ñ–∏–ª—é –∫–ª–∏–µ–Ω—Ç–∞
2. –†–∞—Å–ø–æ–ª–æ–∂–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (—Å–∞–º—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–µ—Ä–≤—ã–º)
3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Ä–æ–º–∞—Ç–∞ –æ–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É –æ–Ω –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
4. –£–∫–∞–∂–∏ –ª—É—á—à–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∞—Ä–æ–º–∞—Ç–∞
5. –î–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é

–ö–†–ò–¢–ï–†–ò–ò –û–¢–ë–û–†–ê:
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≥–µ–Ω–¥–µ—Ä—É –∏ –≤–æ–∑—Ä–∞—Å—Ç—É
- –ü–æ–¥—Ö–æ–¥—è—â–∞—è –≥—Ä—É–ø–ø–∞ –∞—Ä–æ–º–∞—Ç–æ–≤
- –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
- –£–º–µ—Å—Ç–Ω–æ—Å—Ç—å –¥–ª—è —Å–µ–∑–æ–Ω–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±—é–¥–∂–µ—Ç—É –∏ –æ–ø—ã—Ç—É

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, –ø–æ–¥—Ä–æ–±–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º."""

        return prompt

def create_quiz_system() -> PerfumeQuizSystem:
    """–§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–≤–∏–∑–∞"""
    return PerfumeQuizSystem()