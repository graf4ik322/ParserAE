#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–ø–∞—Ä—Å–µ—Ä–æ–º –ø–∞—Ä—Ñ—é–º–µ—Ä–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"

cd "$PROJECT_DIR"

show_help() {
    echo "ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AutoParser –¥–ª—è –ø–∞—Ä—Ñ—é–º–µ—Ä–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ö–û–ú–ê–ù–î–ê]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  start       - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–ø–∞—Ä—Å–µ—Ä"
    echo "  stop        - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–∞—Ä—Å–µ—Ä"
    echo "  restart     - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–ø–∞—Ä—Å–µ—Ä"
    echo "  status      - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø–∞—Ä—Å–µ—Ä–∞"
    echo "  logs        - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –∞–≤—Ç–æ–ø–∞—Ä—Å–µ—Ä–∞"
    echo "  force-parse - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"
    echo "  stats       - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ç–∞–ª–æ–≥–∞"
    echo "  help        - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
}

check_docker() {
    if ! command -v docker-compose &> /dev/null; then
        echo "‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
}

start_parser() {
    echo "üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–∞—Ä—Å–µ—Ä–∞..."
    check_docker
    docker-compose up -d auto-parser
    echo "‚úÖ –ê–≤—Ç–æ–ø–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω"
    echo ""
    echo "üìã –°—Ç–∞—Ç—É—Å:"
    docker-compose ps auto-parser
}

stop_parser() {
    echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–ø–∞—Ä—Å–µ—Ä–∞..."
    check_docker
    docker-compose stop auto-parser
    echo "‚úÖ –ê–≤—Ç–æ–ø–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

restart_parser() {
    echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–∞—Ä—Å–µ—Ä–∞..."
    check_docker
    docker-compose restart auto-parser
    echo "‚úÖ –ê–≤—Ç–æ–ø–∞—Ä—Å–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
    echo ""
    echo "üìã –°—Ç–∞—Ç—É—Å:"
    docker-compose ps auto-parser
}

show_status() {
    echo "üìä –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø–∞—Ä—Å–µ—Ä–∞:"
    echo ""
    check_docker
    
    # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    echo "üê≥ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:"
    docker-compose ps auto-parser
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    if [ -f "last_check.json" ]; then
        echo "üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:"
        cat last_check.json | python3 -m json.tool
        echo ""
    else
        echo "‚ö†Ô∏è –§–∞–π–ª –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        echo ""
    fi
    
    # –†–∞–∑–º–µ—Ä –ª–æ–≥ —Ñ–∞–π–ª–∞
    if [ -f "auto_parser.log" ]; then
        LOG_SIZE=$(du -h auto_parser.log | cut -f1)
        LOG_LINES=$(wc -l < auto_parser.log)
        echo "üìù –õ–æ–≥ —Ñ–∞–π–ª: ${LOG_SIZE}, ${LOG_LINES} —Å—Ç—Ä–æ–∫"
    else
        echo "üìù –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

show_logs() {
    echo "üìã –õ–æ–≥–∏ –∞–≤—Ç–æ–ø–∞—Ä—Å–µ—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫):"
    echo ""
    check_docker
    docker-compose logs --tail=50 auto-parser
}

force_parse() {
    echo "üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞..."
    check_docker
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if [ -f "last_check.json" ]; then
        rm last_check.json
        echo "üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"
    fi
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    docker-compose exec auto-parser python3 -c "
import os
import json
from datetime import datetime

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª-—Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
trigger_data = {
    'force_parse': True,
    'timestamp': datetime.now().isoformat(),
    'triggered_by': 'manual_script'
}

with open('/tmp/force_parse_trigger.json', 'w') as f:
    json.dump(trigger_data, f)

print('‚úÖ –¢—Ä–∏–≥–≥–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω')
"
    
    echo "üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω"
    echo "üìã –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ª–æ–≥–∞–º–∏: $0 logs"
}

show_stats() {
    echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–∞—Ä—Ñ—é–º–æ–≤:"
    echo ""
    
    if [ -f "full_perfumes_catalog_complete.json" ]; then
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ JSON
        python3 -c "
import json
from collections import Counter
from datetime import datetime

with open('full_perfumes_catalog_complete.json', 'r', encoding='utf-8') as f:
    data = json.load(f)

perfumes = data.get('perfumes', [])
metadata = data.get('metadata', {})

print(f'üìÖ –î–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {metadata.get(\"parsing_date\", \"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\")}')
print(f'üß¥ –í—Å–µ–≥–æ –∞—Ä–æ–º–∞—Ç–æ–≤: {len(perfumes)}')
print(f'üåê –ò—Å—Ç–æ—á–Ω–∏–∫: {metadata.get(\"source\", \"aroma-euro.ru\")}')
print()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∞–±—Ä–∏–∫–∞–º
factories = [p.get('factory', '–ù–µ —É–∫–∞–∑–∞–Ω–æ') for p in perfumes if p.get('factory')]
factory_stats = Counter(factories)

print('üè≠ –¢–æ–ø-10 —Ñ–∞–±—Ä–∏–∫:')
for factory, count in factory_stats.most_common(10):
    print(f'   {factory}: {count} –∞—Ä–æ–º–∞—Ç–æ–≤')

print()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±—Ä–µ–Ω–¥–∞–º
brands = [p.get('brand', '–ù–µ —É–∫–∞–∑–∞–Ω–æ') for p in perfumes if p.get('brand')]
brand_stats = Counter(brands)

print('üè∑Ô∏è –¢–æ–ø-10 –±—Ä–µ–Ω–¥–æ–≤:')
for brand, count in brand_stats.most_common(10):
    print(f'   {brand}: {count} –∞—Ä–æ–º–∞—Ç–æ–≤')
"
    else
        echo "‚ùå –§–∞–π–ª –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "${1:-help}" in
    "start")
        start_parser
        ;;
    "stop")
        stop_parser
        ;;
    "restart")
        restart_parser
        ;;
    "status")
        show_status
        ;;
    "logs")
        show_logs
        ;;
    "force-parse")
        force_parse
        ;;
    "stats")
        show_stats
        ;;
    "help"|*)
        show_help
        ;;
esac