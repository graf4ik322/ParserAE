#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
from complete_parser_with_details import CompleteParfumeParser
import json

def test_pagination_detection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü"""
    
    parser = CompleteParfumeParser(max_workers=2)
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü...")
    print("üìç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")
    print("-" * 60)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü
        all_urls = parser.get_all_pages_urls()
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {len(all_urls)}")
        print(f"üìÑ –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–∞–Ω–∏—Ü:")
        for i, url in enumerate(all_urls[:5], 1):
            print(f"  {i}. {url}")
        
        if len(all_urls) > 5:
            print(f"  ...")
            print(f"  {len(all_urls)}. {all_urls[-1]}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 3 —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–≤—ã—Ö 3 —Å—Ç—Ä–∞–Ω–∏—Ü...")
        
        test_urls = all_urls[:3]
        all_perfumes = []
        unique_keys = set()
        
        for i, url in enumerate(test_urls, 1):
            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É {i}/{len(test_urls)}: {url}")
            
            page_perfumes = parser.parse_catalog_page(url)
            print(f"  –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(page_perfumes)}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            for perfume in page_perfumes:
                unique_key = perfume['unique_key']
                if unique_key not in unique_keys:
                    unique_keys.add(unique_key)
                    all_perfumes.append(perfume)
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:")
        print(f"–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {len(all_urls)}")
        print(f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {len(test_urls)}")
        print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö: {len(all_perfumes)}")
        print(f"–û–∂–∏–¥–∞–µ–º–æ–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: ~{len(all_urls) * 40}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–±—Ä–∏–∫–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        factories = {}
        brands = {}
        
        for perfume in all_perfumes:
            # –ò–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
            factory_from_title = perfume.get('factory', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            if factory_from_title:
                factories[factory_from_title] = factories.get(factory_from_title, 0) + 1
            
            brand = perfume.get('brand', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            if brand:
                brands[brand] = brands.get(brand, 0) + 1
        
        print(f"\nüè≠ –§–ê–ë–†–ò–ö–ò (–∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö):")
        for factory, count in sorted(factories.items(), key=lambda x: x[1], reverse=True)[:10]:
            print(f"  {factory}: {count} —Ç–æ–≤–∞—Ä–æ–≤")
        
        print(f"\nüè∑Ô∏è –ë–†–ï–ù–î–´ (–∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö):")
        for brand, count in sorted(brands.items(), key=lambda x: x[1], reverse=True)[:10]:
            print(f"  {brand}: {count} —Ç–æ–≤–∞—Ä–æ–≤")
        
        print(f"\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
        print(f"–ü–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–∞ {len(all_urls)} —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö")
        
        return len(all_urls)
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return 0

if __name__ == "__main__":
    total_pages = test_pagination_detection()
    
    if total_pages > 0:
        print(f"\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print(f"python3 complete_parser_with_details.py")
        print(f"–ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü —Å ~{total_pages * 40} —Ç–æ–≤–∞—Ä–∞–º–∏")